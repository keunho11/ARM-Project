
Joy_Dot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba9c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000644  0800bbb0  0800bbb0  0001bbb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1f4  0800c1f4  00020360  2**0
                  CONTENTS
  4 .ARM          00000000  0800c1f4  0800c1f4  00020360  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c1f4  0800c1f4  00020360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1f4  0800c1f4  0001c1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1f8  0800c1f8  0001c1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0800c1fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000360  0800c55c  00020360  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  0800c55c  000205c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012aee  00000000  00000000  00020389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003020  00000000  00000000  00032e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00035e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  000372d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a75e  00000000  00000000  000385e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016dbe  00000000  00000000  00052d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095ded  00000000  00000000  00069b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff8f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b5c  00000000  00000000  000ff944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000360 	.word	0x20000360
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bb94 	.word	0x0800bb94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000364 	.word	0x20000364
 800014c:	0800bb94 	.word	0x0800bb94

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

 /* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	for (int indx = 0; indx < 128; indx++)
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	e016      	b.n	80010d0 <GetPage+0x3c>
	{
		if ((Address < (0x08000000 + (FLASH_PAGE_SIZE * (indx + 1)))) && (Address >= (0x08000000 + FLASH_PAGE_SIZE * indx)))
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80010a8:	3301      	adds	r3, #1
 80010aa:	029b      	lsls	r3, r3, #10
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d20b      	bcs.n	80010ca <GetPage+0x36>
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80010b8:	029b      	lsls	r3, r3, #10
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d304      	bcc.n	80010ca <GetPage+0x36>
		{
			return (0x08000000 + FLASH_PAGE_SIZE * indx);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80010c6:	029b      	lsls	r3, r3, #10
 80010c8:	e006      	b.n	80010d8 <GetPage+0x44>
	for (int indx = 0; indx < 128; indx++)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3301      	adds	r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2b7f      	cmp	r3, #127	; 0x7f
 80010d4:	dde5      	ble.n	80010a2 <GetPage+0xe>
		}
	}

	return 0;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
	...

080010e4 <Flash_Write_Data>:
	float float_variable = thing.a;
	return float_variable;
}

uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint32_t* Data, uint16_t numberofwords)
{
 80010e4:	b5b0      	push	{r4, r5, r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	4613      	mov	r3, r2
 80010f0:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80010f6:	f002 fc1f 	bl	8003938 <HAL_FLASH_Unlock>

	/* Erase the user Flash area*/

	uint32_t StartPage = GetPage(StartPageAddress);
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f7ff ffca 	bl	8001094 <GetPage>
 8001100:	6238      	str	r0, [r7, #32]
	uint32_t EndPageAdress = StartPageAddress + numberofwords * 4;
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	461a      	mov	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	61fb      	str	r3, [r7, #28]
	uint32_t EndPage = GetPage(EndPageAdress);
 800110e:	69f8      	ldr	r0, [r7, #28]
 8001110:	f7ff ffc0 	bl	8001094 <GetPage>
 8001114:	61b8      	str	r0, [r7, #24]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <Flash_Write_Data+0xb4>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = StartPage;
 800111c:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <Flash_Write_Data+0xb4>)
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = ((EndPage - StartPage) / FLASH_PAGE_SIZE) + 1;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	0a9b      	lsrs	r3, r3, #10
 800112a:	3301      	adds	r3, #1
 800112c:	4a1a      	ldr	r2, [pc, #104]	; (8001198 <Flash_Write_Data+0xb4>)
 800112e:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4818      	ldr	r0, [pc, #96]	; (8001198 <Flash_Write_Data+0xb4>)
 8001138:	f002 fcf0 	bl	8003b1c <HAL_FLASHEx_Erase>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d01f      	beq.n	8001182 <Flash_Write_Data+0x9e>
	{
		/*Error occurred while page erase.*/
		return HAL_FLASH_GetError();
 8001142:	f002 fc2f 	bl	80039a4 <HAL_FLASH_GetError>
 8001146:	4603      	mov	r3, r0
 8001148:	e022      	b.n	8001190 <Flash_Write_Data+0xac>

	/* Program the user Flash area word by word*/

	while (sofar < numberofwords)
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	4413      	add	r3, r2
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2200      	movs	r2, #0
 8001156:	461c      	mov	r4, r3
 8001158:	4615      	mov	r5, r2
 800115a:	4622      	mov	r2, r4
 800115c:	462b      	mov	r3, r5
 800115e:	68f9      	ldr	r1, [r7, #12]
 8001160:	2002      	movs	r0, #2
 8001162:	f002 fb79 	bl	8003858 <HAL_FLASH_Program>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d106      	bne.n	800117a <Flash_Write_Data+0x96>
		{
			StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3304      	adds	r3, #4
 8001170:	60fb      	str	r3, [r7, #12]
			sofar++;
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	3301      	adds	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
 8001178:	e003      	b.n	8001182 <Flash_Write_Data+0x9e>
		}
		else
		{
			/* Error occurred while writing data in Flash memory*/
			return HAL_FLASH_GetError();
 800117a:	f002 fc13 	bl	80039a4 <HAL_FLASH_GetError>
 800117e:	4603      	mov	r3, r0
 8001180:	e006      	b.n	8001190 <Flash_Write_Data+0xac>
	while (sofar < numberofwords)
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001186:	429a      	cmp	r2, r3
 8001188:	dbdf      	blt.n	800114a <Flash_Write_Data+0x66>
		}
	}

	/* Lock the Flash to disable the flash control register access (recommended
	   to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 800118a:	f002 fbfb 	bl	8003984 <HAL_FLASH_Lock>

	return 0;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3728      	adds	r7, #40	; 0x28
 8001194:	46bd      	mov	sp, r7
 8001196:	bdb0      	pop	{r4, r5, r7, pc}
 8001198:	2000037c 	.word	0x2000037c

0800119c <Flash_Read_Data>:


void Flash_Read_Data(uint32_t StartPageAddress, uint32_t* RxBuf, uint16_t numberofwords)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	4613      	mov	r3, r2
 80011a8:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t*)StartPageAddress;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3304      	adds	r3, #4
 80011b6:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	3304      	adds	r3, #4
 80011bc:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	1e5a      	subs	r2, r3, #1
 80011c2:	80fa      	strh	r2, [r7, #6]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d000      	beq.n	80011ca <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t*)StartPageAddress;
 80011c8:	e7ef      	b.n	80011aa <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80011ca:	bf00      	nop
	}
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <am2320_Init>:
#include "am2320.h"

Am2320_HandleTypeDef am2320_Init(I2C_HandleTypeDef* i2c_handle,uint8_t device_address) {
 80011d6:	b490      	push	{r4, r7}
 80011d8:	b088      	sub	sp, #32
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	4613      	mov	r3, r2
 80011e2:	71fb      	strb	r3, [r7, #7]
	Am2320_HandleTypeDef AM2320_;
	AM2320_.i2c_handle = i2c_handle;
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	613b      	str	r3, [r7, #16]
	AM2320_.device_address = device_address;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	753b      	strb	r3, [r7, #20]
	return AM2320_;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	461c      	mov	r4, r3
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	3720      	adds	r7, #32
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc90      	pop	{r4, r7}
 8001202:	4770      	bx	lr

08001204 <am2320_ReadValue>:

uint8_t am2320_ReadValue(Am2320_HandleTypeDef *am2320) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af02      	add	r7, sp, #8
 800120a:	6078      	str	r0, [r7, #4]
	uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 800120c:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <am2320_ReadValue+0xa4>)
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	4611      	mov	r1, r2
 8001216:	8019      	strh	r1, [r3, #0]
 8001218:	3302      	adds	r3, #2
 800121a:	0c12      	lsrs	r2, r2, #16
 800121c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address, 0x00, 0,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6818      	ldr	r0, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	791b      	ldrb	r3, [r3, #4]
 8001226:	b299      	uxth	r1, r3
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2300      	movs	r3, #0
 8001230:	2200      	movs	r2, #0
 8001232:	f003 f835 	bl	80042a0 <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	HAL_Delay(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f001 fc22 	bl	8002a80 <HAL_Delay>
	if (HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address,registers, 3, HAL_MAX_DELAY) != HAL_OK) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	791b      	ldrb	r3, [r3, #4]
 8001244:	b299      	uxth	r1, r3
 8001246:	f107 020c 	add.w	r2, r7, #12
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2303      	movs	r3, #3
 8001252:	f003 f825 	bl	80042a0 <HAL_I2C_Master_Transmit>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <am2320_ReadValue+0x5c>
		return 1;
 800125c:	2301      	movs	r3, #1
 800125e:	e01f      	b.n	80012a0 <am2320_ReadValue+0x9c>
	}
	HAL_Delay(2);
 8001260:	2002      	movs	r0, #2
 8001262:	f001 fc0d 	bl	8002a80 <HAL_Delay>
	if (HAL_I2C_Master_Receive(am2320->i2c_handle, am2320->device_address,am2320->data, 8, HAL_MAX_DELAY) != HAL_OK) {
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	791b      	ldrb	r3, [r3, #4]
 800126e:	b299      	uxth	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	1d5a      	adds	r2, r3, #5
 8001274:	f04f 33ff 	mov.w	r3, #4294967295
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2308      	movs	r3, #8
 800127c:	f003 f90e 	bl	800449c <HAL_I2C_Master_Receive>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <am2320_ReadValue+0x86>
		return 2;
 8001286:	2302      	movs	r3, #2
 8001288:	e00a      	b.n	80012a0 <am2320_ReadValue+0x9c>
	}
	if (am2320->data[1] != 0x04 && am2320->data[0] != 0x03) {
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	799b      	ldrb	r3, [r3, #6]
 800128e:	2b04      	cmp	r3, #4
 8001290:	d005      	beq.n	800129e <am2320_ReadValue+0x9a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	795b      	ldrb	r3, [r3, #5]
 8001296:	2b03      	cmp	r3, #3
 8001298:	d001      	beq.n	800129e <am2320_ReadValue+0x9a>
		return 3;
 800129a:	2303      	movs	r3, #3
 800129c:	e000      	b.n	80012a0 <am2320_ReadValue+0x9c>
	}
	return 0;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	0800bbb0 	.word	0x0800bbb0

080012ac <am2320_GetTemperatureAndHumidity>:

void am2320_GetTemperatureAndHumidity(Am2320_HandleTypeDef *am2320, float *temperature,float *humidity) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
	int read = am2320_ReadValue(am2320);
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f7ff ffa3 	bl	8001204 <am2320_ReadValue>
 80012be:	4603      	mov	r3, r0
 80012c0:	613b      	str	r3, [r7, #16]
	if (read) {
		// Simple exception handling
	}
	uint16_t temp_temperature = (am2320->data[5] | am2320->data[4] << 8);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	7a9b      	ldrb	r3, [r3, #10]
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	7a5b      	ldrb	r3, [r3, #9]
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	82fb      	strh	r3, [r7, #22]
	if (temp_temperature & 0x8000) {
 80012d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	da05      	bge.n	80012ea <am2320_GetTemperatureAndHumidity+0x3e>
		temp_temperature = -(int16_t) (temp_temperature & 0x7fff);
 80012de:	8afb      	ldrh	r3, [r7, #22]
 80012e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	425b      	negs	r3, r3
 80012e8:	82fb      	strh	r3, [r7, #22]
	} else {
		temp_temperature = (int16_t) temp_temperature;
	}
	*temperature = (float) temp_temperature / 10.0;
 80012ea:	8afb      	ldrh	r3, [r7, #22]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fcf1 	bl	8000cd4 <__aeabi_ui2f>
 80012f2:	4603      	mov	r3, r0
 80012f4:	490f      	ldr	r1, [pc, #60]	; (8001334 <am2320_GetTemperatureAndHumidity+0x88>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fdf8 	bl	8000eec <__aeabi_fdiv>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	601a      	str	r2, [r3, #0]
	*humidity = (float) (am2320->data[3] | am2320->data[2] << 8) / 10.0;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	7a1b      	ldrb	r3, [r3, #8]
 8001308:	461a      	mov	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	79db      	ldrb	r3, [r3, #7]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	4313      	orrs	r3, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fce2 	bl	8000cdc <__aeabi_i2f>
 8001318:	4603      	mov	r3, r0
 800131a:	4906      	ldr	r1, [pc, #24]	; (8001334 <am2320_GetTemperatureAndHumidity+0x88>)
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fde5 	bl	8000eec <__aeabi_fdiv>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	601a      	str	r2, [r3, #0]
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	41200000 	.word	0x41200000

08001338 <write_byte>:
//uint32_t Erase_Data[8] ={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
//uint32_t No_Data[8] ={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
/*****************dot matrix function*******************/

void write_byte (uint8_t byte)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	e018      	b.n	800137a <write_byte+0x42>
	{
		HAL_GPIO_WritePin (GPIOC, clock_Pin, 0);  // pull the clock pin low
 8001348:	2200      	movs	r2, #0
 800134a:	2101      	movs	r1, #1
 800134c:	480f      	ldr	r0, [pc, #60]	; (800138c <write_byte+0x54>)
 800134e:	f002 fe28 	bl	8003fa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOC, data_Pin, byte&0x80);  // write the MSB bit to the data pin
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001358:	b2db      	uxtb	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	2104      	movs	r1, #4
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <write_byte+0x54>)
 8001360:	f002 fe1f 	bl	8003fa2 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (GPIOC, clock_Pin, 1);  // pull the clock pin HIGH
 800136a:	2201      	movs	r2, #1
 800136c:	2101      	movs	r1, #1
 800136e:	4807      	ldr	r0, [pc, #28]	; (800138c <write_byte+0x54>)
 8001370:	f002 fe17 	bl	8003fa2 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3301      	adds	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b07      	cmp	r3, #7
 800137e:	dde3      	ble.n	8001348 <write_byte+0x10>
	}
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40011000 	.word	0x40011000

08001390 <write_max>:

void write_max (uint8_t address, uint8_t data)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	460a      	mov	r2, r1
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	4613      	mov	r3, r2
 800139e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (GPIOC, cs_Pin, 0);  // pull the CS pin LOW
 80013a0:	2200      	movs	r2, #0
 80013a2:	2102      	movs	r1, #2
 80013a4:	4809      	ldr	r0, [pc, #36]	; (80013cc <write_max+0x3c>)
 80013a6:	f002 fdfc 	bl	8003fa2 <HAL_GPIO_WritePin>
	write_byte (address);
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ffc3 	bl	8001338 <write_byte>
	write_byte (data);
 80013b2:	79bb      	ldrb	r3, [r7, #6]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ffbf 	bl	8001338 <write_byte>
	HAL_GPIO_WritePin (GPIOC, cs_Pin, 1);  // pull the CS pin HIGH
 80013ba:	2201      	movs	r2, #1
 80013bc:	2102      	movs	r1, #2
 80013be:	4803      	ldr	r0, [pc, #12]	; (80013cc <write_max+0x3c>)
 80013c0:	f002 fdef 	bl	8003fa2 <HAL_GPIO_WritePin>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40011000 	.word	0x40011000

080013d0 <max_init>:


// function for init

void max_init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
 write_max(0x09, 0x00);       //  no decoding
 80013d4:	2100      	movs	r1, #0
 80013d6:	2009      	movs	r0, #9
 80013d8:	f7ff ffda 	bl	8001390 <write_max>
 write_max(0x0a, 0x03);       //  brightness intensity
 80013dc:	2103      	movs	r1, #3
 80013de:	200a      	movs	r0, #10
 80013e0:	f7ff ffd6 	bl	8001390 <write_max>
 write_max(0x0b, 0x07);       //  scan limit = 8 LEDs
 80013e4:	2107      	movs	r1, #7
 80013e6:	200b      	movs	r0, #11
 80013e8:	f7ff ffd2 	bl	8001390 <write_max>
 write_max(0x0c, 0x01);       //  power down =0,normal mode = 1
 80013ec:	2101      	movs	r1, #1
 80013ee:	200c      	movs	r0, #12
 80013f0:	f7ff ffce 	bl	8001390 <write_max>
 write_max(0x0f, 0x00);       //  no test display
 80013f4:	2100      	movs	r1, #0
 80013f6:	200f      	movs	r0, #15
 80013f8:	f7ff ffca 	bl	8001390 <write_max>
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <write_string>:

void write_string (char *str)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	while (*str)
 8001408:	e01f      	b.n	800144a <write_string+0x4a>
	{
		for(int i=1;i<9;i++)
 800140a:	2301      	movs	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	e012      	b.n	8001436 <write_string+0x36>
			   {
			       write_max (i,disp1ay[(*str - 46)][i-1]);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	b2d8      	uxtb	r0, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	f1a3 022e 	sub.w	r2, r3, #46	; 0x2e
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3b01      	subs	r3, #1
 8001420:	490e      	ldr	r1, [pc, #56]	; (800145c <write_string+0x5c>)
 8001422:	00d2      	lsls	r2, r2, #3
 8001424:	440a      	add	r2, r1
 8001426:	4413      	add	r3, r2
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	4619      	mov	r1, r3
 800142c:	f7ff ffb0 	bl	8001390 <write_max>
		for(int i=1;i<9;i++)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	3301      	adds	r3, #1
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2b08      	cmp	r3, #8
 800143a:	dde9      	ble.n	8001410 <write_string+0x10>
			   }
		str++;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3301      	adds	r3, #1
 8001440:	607b      	str	r3, [r7, #4]
		HAL_Delay (500);
 8001442:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001446:	f001 fb1b 	bl	8002a80 <HAL_Delay>
	while (*str)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1db      	bne.n	800140a <write_string+0xa>
	}
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000008 	.word	0x20000008

08001460 <MSB_check>:

uint8_t MSB_check(uint8_t check, uint16_t col)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	460a      	mov	r2, r1
 800146a:	71fb      	strb	r3, [r7, #7]
 800146c:	4613      	mov	r3, r2
 800146e:	80bb      	strh	r3, [r7, #4]
	uint8_t temp = (check >>col)&0x01;
 8001470:	79fa      	ldrb	r2, [r7, #7]
 8001472:	88bb      	ldrh	r3, [r7, #4]
 8001474:	fa42 f303 	asr.w	r3, r2, r3
 8001478:	b2db      	uxtb	r3, r3
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
	if(temp == 0x01) // if bit is 1
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d101      	bne.n	800148a <MSB_check+0x2a>
		return 1;
 8001486:	2301      	movs	r3, #1
 8001488:	e004      	b.n	8001494 <MSB_check+0x34>
	else if(temp == 0x00) // if bit is 0
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <MSB_check+0x34>
		return 0;
 8001490:	2300      	movs	r3, #0
 8001492:	e7ff      	b.n	8001494 <MSB_check+0x34>
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
	...

080014a0 <write_string_shift>:

void write_string_shift(char *str)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	char now_display[8];
	char next_display[8];

	char str_length = strlen(str);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7fe fe51 	bl	8000150 <strlen>
 80014ae:	4603      	mov	r3, r0
 80014b0:	76fb      	strb	r3, [r7, #27]
	char count =0; // check null
 80014b2:	2300      	movs	r3, #0
 80014b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	while(*str)
 80014b8:	e0ae      	b.n	8001618 <write_string_shift+0x178>
	{
		for (int temp = 0; temp < 8; temp++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014be:	e011      	b.n	80014e4 <write_string_shift+0x44>
		{
			now_display[temp] = disp1ay[(*str - 46)][temp];
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	3b2e      	subs	r3, #46	; 0x2e
 80014c6:	4a5a      	ldr	r2, [pc, #360]	; (8001630 <write_string_shift+0x190>)
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	441a      	add	r2, r3
 80014cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ce:	4413      	add	r3, r2
 80014d0:	7819      	ldrb	r1, [r3, #0]
 80014d2:	f107 0210 	add.w	r2, r7, #16
 80014d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d8:	4413      	add	r3, r2
 80014da:	460a      	mov	r2, r1
 80014dc:	701a      	strb	r2, [r3, #0]
		for (int temp = 0; temp < 8; temp++)
 80014de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e0:	3301      	adds	r3, #1
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80014e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e6:	2b07      	cmp	r3, #7
 80014e8:	ddea      	ble.n	80014c0 <write_string_shift+0x20>
		}
		str++; count++;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3301      	adds	r3, #1
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014f4:	3301      	adds	r3, #1
 80014f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (int temp = 0; temp < 8; temp++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
 80014fe:	e011      	b.n	8001524 <write_string_shift+0x84>
		{
			next_display[temp] = disp1ay[(*str - 46)][temp];
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	3b2e      	subs	r3, #46	; 0x2e
 8001506:	4a4a      	ldr	r2, [pc, #296]	; (8001630 <write_string_shift+0x190>)
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	441a      	add	r2, r3
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	4413      	add	r3, r2
 8001510:	7819      	ldrb	r1, [r3, #0]
 8001512:	f107 0208 	add.w	r2, r7, #8
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	4413      	add	r3, r2
 800151a:	460a      	mov	r2, r1
 800151c:	701a      	strb	r2, [r3, #0]
		for (int temp = 0; temp < 8; temp++)
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	3301      	adds	r3, #1
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	2b07      	cmp	r3, #7
 8001528:	ddea      	ble.n	8001500 <write_string_shift+0x60>
		}
		// now char, next char copy

		for (int k = 7; k >= 0; k--) // shift
 800152a:	2307      	movs	r3, #7
 800152c:	623b      	str	r3, [r7, #32]
 800152e:	e05f      	b.n	80015f0 <write_string_shift+0x150>
		{
			for (int i = 1; i < 9; i++)
 8001530:	2301      	movs	r3, #1
 8001532:	61fb      	str	r3, [r7, #28]
 8001534:	e04b      	b.n	80015ce <write_string_shift+0x12e>
			{
				if (MSB_check(next_display[i-1], k) == 1)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b01      	subs	r3, #1
 800153a:	3330      	adds	r3, #48	; 0x30
 800153c:	443b      	add	r3, r7
 800153e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001542:	6a3a      	ldr	r2, [r7, #32]
 8001544:	b292      	uxth	r2, r2
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff89 	bl	8001460 <MSB_check>
 800154e:	4603      	mov	r3, r0
 8001550:	2b01      	cmp	r3, #1
 8001552:	d110      	bne.n	8001576 <write_string_shift+0xd6>
					now_display[i-1] = (now_display[i-1] << 1) + 1;
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	3b01      	subs	r3, #1
 8001558:	3330      	adds	r3, #48	; 0x30
 800155a:	443b      	add	r3, r7
 800155c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	b2da      	uxtb	r2, r3
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	3b01      	subs	r3, #1
 8001568:	3201      	adds	r2, #1
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	3330      	adds	r3, #48	; 0x30
 800156e:	443b      	add	r3, r7
 8001570:	f803 2c20 	strb.w	r2, [r3, #-32]
 8001574:	e01c      	b.n	80015b0 <write_string_shift+0x110>
				else if (MSB_check(next_display[i-1], k) == 0)
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3b01      	subs	r3, #1
 800157a:	3330      	adds	r3, #48	; 0x30
 800157c:	443b      	add	r3, r7
 800157e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001582:	6a3a      	ldr	r2, [r7, #32]
 8001584:	b292      	uxth	r2, r2
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff69 	bl	8001460 <MSB_check>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10d      	bne.n	80015b0 <write_string_shift+0x110>
					now_display[i-1] = now_display[i-1] << 1;
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	3b01      	subs	r3, #1
 8001598:	3330      	adds	r3, #48	; 0x30
 800159a:	443b      	add	r3, r7
 800159c:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	0052      	lsls	r2, r2, #1
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	3330      	adds	r3, #48	; 0x30
 80015aa:	443b      	add	r3, r7
 80015ac:	f803 2c20 	strb.w	r2, [r3, #-32]
				write_max(i, now_display[i-1]);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	3330      	adds	r3, #48	; 0x30
 80015ba:	443b      	add	r3, r7
 80015bc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80015c0:	4619      	mov	r1, r3
 80015c2:	4610      	mov	r0, r2
 80015c4:	f7ff fee4 	bl	8001390 <write_max>
			for (int i = 1; i < 9; i++)
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	3301      	adds	r3, #1
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	ddb0      	ble.n	8001536 <write_string_shift+0x96>
			}
			HAL_Delay(100);
 80015d4:	2064      	movs	r0, #100	; 0x64
 80015d6:	f001 fa53 	bl	8002a80 <HAL_Delay>

			if(HAL_GPIO_ReadPin(GPIOB, joysw_Pin) == 0)
 80015da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015de:	4815      	ldr	r0, [pc, #84]	; (8001634 <write_string_shift+0x194>)
 80015e0:	f002 fcc8 	bl	8003f74 <HAL_GPIO_ReadPin>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d01c      	beq.n	8001624 <write_string_shift+0x184>
		for (int k = 7; k >= 0; k--) // shift
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	623b      	str	r3, [r7, #32]
 80015f0:	6a3b      	ldr	r3, [r7, #32]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da9c      	bge.n	8001530 <write_string_shift+0x90>
						return;
		} //end of display
		if(HAL_GPIO_ReadPin(GPIOB, joysw_Pin) == 0)
 80015f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015fa:	480e      	ldr	r0, [pc, #56]	; (8001634 <write_string_shift+0x194>)
 80015fc:	f002 fcba 	bl	8003f74 <HAL_GPIO_ReadPin>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d010      	beq.n	8001628 <write_string_shift+0x188>
			break;
		if(count==str_length -1)
 8001606:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800160a:	7efb      	ldrb	r3, [r7, #27]
 800160c:	3b01      	subs	r3, #1
 800160e:	429a      	cmp	r2, r3
 8001610:	d102      	bne.n	8001618 <write_string_shift+0x178>
			str++;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3301      	adds	r3, #1
 8001616:	607b      	str	r3, [r7, #4]
	while(*str)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	f47f af4c 	bne.w	80014ba <write_string_shift+0x1a>
 8001622:	e002      	b.n	800162a <write_string_shift+0x18a>
						return;
 8001624:	bf00      	nop
 8001626:	e000      	b.n	800162a <write_string_shift+0x18a>
			break;
 8001628:	bf00      	nop
	} // end of while


}
 800162a:	3730      	adds	r7, #48	; 0x30
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000008 	.word	0x20000008
 8001634:	40010c00 	.word	0x40010c00

08001638 <bit_check>:


uint8_t bit_check(uint8_t check)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = (check >>col)&0x01;
 8001642:	79fa      	ldrb	r2, [r7, #7]
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <bit_check+0x3c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	fa42 f303 	asr.w	r3, r2, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
	if(temp == 0x01) // if bit is 1
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d101      	bne.n	800165e <bit_check+0x26>
		return 1;
 800165a:	2301      	movs	r3, #1
 800165c:	e004      	b.n	8001668 <bit_check+0x30>
	else if(temp == 0x00) // if bit is 0
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <bit_check+0x30>
		return 0;
 8001664:	2300      	movs	r3, #0
 8001666:	e7ff      	b.n	8001668 <bit_check+0x30>
}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000004 	.word	0x20000004

08001678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001678:	b5b0      	push	{r4, r5, r7, lr}
 800167a:	b094      	sub	sp, #80	; 0x50
 800167c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t cnt =0;
 800167e:	2300      	movs	r3, #0
 8001680:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001684:	f001 f99a 	bl	80029bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001688:	f000 fc96 	bl	8001fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800168c:	f000 fe50 	bl	8002330 <MX_GPIO_Init>
  MX_DMA_Init();
 8001690:	f000 fe30 	bl	80022f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001694:	f000 fe04 	bl	80022a0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001698:	f000 fcee 	bl	8002078 <MX_ADC1_Init>
  MX_TIM3_Init();
 800169c:	f000 fdb2 	bl	8002204 <MX_TIM3_Init>
  MX_RTC_Init();
 80016a0:	f000 fd66 	bl	8002170 <MX_RTC_Init>
  MX_I2C1_Init();
 80016a4:	f000 fd36 	bl	8002114 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  max_init ();
 80016a8:	f7ff fe92 	bl	80013d0 <max_init>
  printf("Start\n");
 80016ac:	487e      	ldr	r0, [pc, #504]	; (80018a8 <main+0x230>)
 80016ae:	f006 fca7 	bl	8008000 <puts>
  Am2320_HandleTypeDef Am2320_;
  Am2320_ = am2320_Init(&hi2c1, 0x5C << 1);
 80016b2:	463b      	mov	r3, r7
 80016b4:	22b8      	movs	r2, #184	; 0xb8
 80016b6:	497d      	ldr	r1, [pc, #500]	; (80018ac <main+0x234>)
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fd8c 	bl	80011d6 <am2320_Init>
 80016be:	f107 0418 	add.w	r4, r7, #24
 80016c2:	463b      	mov	r3, r7
 80016c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  float temperature, humidity;

  HAL_TIM_Base_Start_IT(&htim3);
 80016ca:	4879      	ldr	r0, [pc, #484]	; (80018b0 <main+0x238>)
 80016cc:	f005 f810 	bl	80066f0 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, joy_value, 2);
 80016d0:	2202      	movs	r2, #2
 80016d2:	4978      	ldr	r1, [pc, #480]	; (80018b4 <main+0x23c>)
 80016d4:	4878      	ldr	r0, [pc, #480]	; (80018b8 <main+0x240>)
 80016d6:	f001 facf 	bl	8002c78 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if (state == 0) // state 1 : normal control
 80016da:	4b78      	ldr	r3, [pc, #480]	; (80018bc <main+0x244>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f040 81c5 	bne.w	8001a6e <main+0x3f6>
		{
			if (input_delay == 1)
 80016e4:	4b76      	ldr	r3, [pc, #472]	; (80018c0 <main+0x248>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d148      	bne.n	800177e <main+0x106>
			{
				if (joy_value[1] == 0) //up
 80016ec:	4b71      	ldr	r3, [pc, #452]	; (80018b4 <main+0x23c>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d108      	bne.n	8001706 <main+0x8e>
				{
					printf("up\r\n");
 80016f4:	4873      	ldr	r0, [pc, #460]	; (80018c4 <main+0x24c>)
 80016f6:	f006 fc83 	bl	8008000 <puts>
					dot_flag1 = 1; //dot matrix flag-> up
 80016fa:	4b73      	ldr	r3, [pc, #460]	; (80018c8 <main+0x250>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
					input_delay = 0;
 8001700:	4b6f      	ldr	r3, [pc, #444]	; (80018c0 <main+0x248>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
				}
				if (joy_value[1] == 4095) //down
 8001706:	4b6b      	ldr	r3, [pc, #428]	; (80018b4 <main+0x23c>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800170e:	4293      	cmp	r3, r2
 8001710:	d108      	bne.n	8001724 <main+0xac>
				{
					printf("down\r\n");
 8001712:	486e      	ldr	r0, [pc, #440]	; (80018cc <main+0x254>)
 8001714:	f006 fc74 	bl	8008000 <puts>
					dot_flag2 = 1; //dot matrix flag-> down
 8001718:	4b6d      	ldr	r3, [pc, #436]	; (80018d0 <main+0x258>)
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
					input_delay = 0;
 800171e:	4b68      	ldr	r3, [pc, #416]	; (80018c0 <main+0x248>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
				}
				if (joy_value[0] == 0) //left
 8001724:	4b63      	ldr	r3, [pc, #396]	; (80018b4 <main+0x23c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d108      	bne.n	800173e <main+0xc6>
				{
					printf("left\r\n");
 800172c:	4869      	ldr	r0, [pc, #420]	; (80018d4 <main+0x25c>)
 800172e:	f006 fc67 	bl	8008000 <puts>
					dot_flag3 = 1; //dot matrix flag-> left
 8001732:	4b69      	ldr	r3, [pc, #420]	; (80018d8 <main+0x260>)
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
					input_delay = 0;
 8001738:	4b61      	ldr	r3, [pc, #388]	; (80018c0 <main+0x248>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
				}
				if (joy_value[0] == 4095) //right
 800173e:	4b5d      	ldr	r3, [pc, #372]	; (80018b4 <main+0x23c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001746:	4293      	cmp	r3, r2
 8001748:	d108      	bne.n	800175c <main+0xe4>
				{
					printf("right\r\n");
 800174a:	4864      	ldr	r0, [pc, #400]	; (80018dc <main+0x264>)
 800174c:	f006 fc58 	bl	8008000 <puts>
					dot_flag4 = 1; //dot matrix flag-> right
 8001750:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <main+0x268>)
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
					input_delay = 0;
 8001756:	4b5a      	ldr	r3, [pc, #360]	; (80018c0 <main+0x248>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
				}

				if (HAL_GPIO_ReadPin(GPIOB, joysw_Pin) == 0) // button push
 800175c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001760:	4860      	ldr	r0, [pc, #384]	; (80018e4 <main+0x26c>)
 8001762:	f002 fc07 	bl	8003f74 <HAL_GPIO_ReadPin>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d108      	bne.n	800177e <main+0x106>
				{
					printf("push\r\n");
 800176c:	485e      	ldr	r0, [pc, #376]	; (80018e8 <main+0x270>)
 800176e:	f006 fc47 	bl	8008000 <puts>
					button_flag = 1;
 8001772:	4b5e      	ldr	r3, [pc, #376]	; (80018ec <main+0x274>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
					input_delay = 0;
 8001778:	4b51      	ldr	r3, [pc, #324]	; (80018c0 <main+0x248>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]

				}

			}// end  of 'input_delay'
			if (dot_flag1 == 1) //up
 800177e:	4b52      	ldr	r3, [pc, #328]	; (80018c8 <main+0x250>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d135      	bne.n	80017f2 <main+0x17a>
					{
				coordinate[row] &= ~(1 << col); // pre-coordinate off
 8001786:	4b5a      	ldr	r3, [pc, #360]	; (80018f0 <main+0x278>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a5a      	ldr	r2, [pc, #360]	; (80018f4 <main+0x27c>)
 800178c:	5cd3      	ldrb	r3, [r2, r3]
 800178e:	b25a      	sxtb	r2, r3
 8001790:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <main+0x280>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2101      	movs	r1, #1
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	b25b      	sxtb	r3, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	4013      	ands	r3, r2
 80017a2:	b25a      	sxtb	r2, r3
 80017a4:	4b52      	ldr	r3, [pc, #328]	; (80018f0 <main+0x278>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	b2d1      	uxtb	r1, r2
 80017aa:	4a52      	ldr	r2, [pc, #328]	; (80018f4 <main+0x27c>)
 80017ac:	54d1      	strb	r1, [r2, r3]

				if (row == 0)
 80017ae:	4b50      	ldr	r3, [pc, #320]	; (80018f0 <main+0x278>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d103      	bne.n	80017be <main+0x146>
					row = 7;
 80017b6:	4b4e      	ldr	r3, [pc, #312]	; (80018f0 <main+0x278>)
 80017b8:	2207      	movs	r2, #7
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	e004      	b.n	80017c8 <main+0x150>
				else
					row--;
 80017be:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <main+0x278>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	4a4a      	ldr	r2, [pc, #296]	; (80018f0 <main+0x278>)
 80017c6:	6013      	str	r3, [r2, #0]
				coordinate[row] |= (1 << col);  //cur-coordinate on
 80017c8:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <main+0x278>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a49      	ldr	r2, [pc, #292]	; (80018f4 <main+0x27c>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	b25a      	sxtb	r2, r3
 80017d2:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <main+0x280>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2101      	movs	r1, #1
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	b25a      	sxtb	r2, r3
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <main+0x278>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	b2d1      	uxtb	r1, r2
 80017e8:	4a42      	ldr	r2, [pc, #264]	; (80018f4 <main+0x27c>)
 80017ea:	54d1      	strb	r1, [r2, r3]

				dot_flag1 = 0;
 80017ec:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <main+0x250>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
			}
			if (dot_flag2 == 1)  //down
 80017f2:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <main+0x258>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d135      	bne.n	8001866 <main+0x1ee>
					{
				coordinate[row] &= ~(1 << col); // pre-coordinate off
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <main+0x278>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a3d      	ldr	r2, [pc, #244]	; (80018f4 <main+0x27c>)
 8001800:	5cd3      	ldrb	r3, [r2, r3]
 8001802:	b25a      	sxtb	r2, r3
 8001804:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <main+0x280>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2101      	movs	r1, #1
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	b25b      	sxtb	r3, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	b25b      	sxtb	r3, r3
 8001814:	4013      	ands	r3, r2
 8001816:	b25a      	sxtb	r2, r3
 8001818:	4b35      	ldr	r3, [pc, #212]	; (80018f0 <main+0x278>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	b2d1      	uxtb	r1, r2
 800181e:	4a35      	ldr	r2, [pc, #212]	; (80018f4 <main+0x27c>)
 8001820:	54d1      	strb	r1, [r2, r3]
				if (row == 7)
 8001822:	4b33      	ldr	r3, [pc, #204]	; (80018f0 <main+0x278>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b07      	cmp	r3, #7
 8001828:	d103      	bne.n	8001832 <main+0x1ba>
					row = 0;
 800182a:	4b31      	ldr	r3, [pc, #196]	; (80018f0 <main+0x278>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	e004      	b.n	800183c <main+0x1c4>
				else
					row++;
 8001832:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <main+0x278>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	4a2d      	ldr	r2, [pc, #180]	; (80018f0 <main+0x278>)
 800183a:	6013      	str	r3, [r2, #0]
				coordinate[row] |= (1 << col);
 800183c:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <main+0x278>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a2c      	ldr	r2, [pc, #176]	; (80018f4 <main+0x27c>)
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	b25a      	sxtb	r2, r3
 8001846:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <main+0x280>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2101      	movs	r1, #1
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	b25b      	sxtb	r3, r3
 8001852:	4313      	orrs	r3, r2
 8001854:	b25a      	sxtb	r2, r3
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <main+0x278>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	b2d1      	uxtb	r1, r2
 800185c:	4a25      	ldr	r2, [pc, #148]	; (80018f4 <main+0x27c>)
 800185e:	54d1      	strb	r1, [r2, r3]

				dot_flag2 = 0;
 8001860:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <main+0x258>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
			}
			if (dot_flag3 == 1) //left
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <main+0x260>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d160      	bne.n	8001930 <main+0x2b8>
					{
				coordinate[row] &= ~(1 << col); // pre-coordinate off
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <main+0x278>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a20      	ldr	r2, [pc, #128]	; (80018f4 <main+0x27c>)
 8001874:	5cd3      	ldrb	r3, [r2, r3]
 8001876:	b25a      	sxtb	r2, r3
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <main+0x280>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2101      	movs	r1, #1
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	b25b      	sxtb	r3, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	b25b      	sxtb	r3, r3
 8001888:	4013      	ands	r3, r2
 800188a:	b25a      	sxtb	r2, r3
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <main+0x278>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	b2d1      	uxtb	r1, r2
 8001892:	4a18      	ldr	r2, [pc, #96]	; (80018f4 <main+0x27c>)
 8001894:	54d1      	strb	r1, [r2, r3]
				if (col == 7)
 8001896:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <main+0x280>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b07      	cmp	r3, #7
 800189c:	d12e      	bne.n	80018fc <main+0x284>
					col = 0;
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <main+0x280>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	e02f      	b.n	8001906 <main+0x28e>
 80018a6:	bf00      	nop
 80018a8:	0800bbb4 	.word	0x0800bbb4
 80018ac:	20000400 	.word	0x20000400
 80018b0:	20000468 	.word	0x20000468
 80018b4:	200004f4 	.word	0x200004f4
 80018b8:	2000038c 	.word	0x2000038c
 80018bc:	200004fd 	.word	0x200004fd
 80018c0:	200004fc 	.word	0x200004fc
 80018c4:	0800bbbc 	.word	0x0800bbbc
 80018c8:	200004fe 	.word	0x200004fe
 80018cc:	0800bbc0 	.word	0x0800bbc0
 80018d0:	200004ff 	.word	0x200004ff
 80018d4:	0800bbc8 	.word	0x0800bbc8
 80018d8:	20000500 	.word	0x20000500
 80018dc:	0800bbd0 	.word	0x0800bbd0
 80018e0:	20000501 	.word	0x20000501
 80018e4:	40010c00 	.word	0x40010c00
 80018e8:	0800bbd8 	.word	0x0800bbd8
 80018ec:	20000502 	.word	0x20000502
 80018f0:	20000000 	.word	0x20000000
 80018f4:	2000052c 	.word	0x2000052c
 80018f8:	20000004 	.word	0x20000004
				else
					col++;
 80018fc:	4b9c      	ldr	r3, [pc, #624]	; (8001b70 <main+0x4f8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	4a9b      	ldr	r2, [pc, #620]	; (8001b70 <main+0x4f8>)
 8001904:	6013      	str	r3, [r2, #0]
				coordinate[row] |= (1 << col);
 8001906:	4b9b      	ldr	r3, [pc, #620]	; (8001b74 <main+0x4fc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a9b      	ldr	r2, [pc, #620]	; (8001b78 <main+0x500>)
 800190c:	5cd3      	ldrb	r3, [r2, r3]
 800190e:	b25a      	sxtb	r2, r3
 8001910:	4b97      	ldr	r3, [pc, #604]	; (8001b70 <main+0x4f8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	b25b      	sxtb	r3, r3
 800191c:	4313      	orrs	r3, r2
 800191e:	b25a      	sxtb	r2, r3
 8001920:	4b94      	ldr	r3, [pc, #592]	; (8001b74 <main+0x4fc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b2d1      	uxtb	r1, r2
 8001926:	4a94      	ldr	r2, [pc, #592]	; (8001b78 <main+0x500>)
 8001928:	54d1      	strb	r1, [r2, r3]

				dot_flag3 = 0;
 800192a:	4b94      	ldr	r3, [pc, #592]	; (8001b7c <main+0x504>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
			}
			if (dot_flag4 == 1) //right
 8001930:	4b93      	ldr	r3, [pc, #588]	; (8001b80 <main+0x508>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d135      	bne.n	80019a4 <main+0x32c>
					{
				coordinate[row] &= ~(1 << col); // pre-coordinate off
 8001938:	4b8e      	ldr	r3, [pc, #568]	; (8001b74 <main+0x4fc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a8e      	ldr	r2, [pc, #568]	; (8001b78 <main+0x500>)
 800193e:	5cd3      	ldrb	r3, [r2, r3]
 8001940:	b25a      	sxtb	r2, r3
 8001942:	4b8b      	ldr	r3, [pc, #556]	; (8001b70 <main+0x4f8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2101      	movs	r1, #1
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	b25b      	sxtb	r3, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	b25b      	sxtb	r3, r3
 8001952:	4013      	ands	r3, r2
 8001954:	b25a      	sxtb	r2, r3
 8001956:	4b87      	ldr	r3, [pc, #540]	; (8001b74 <main+0x4fc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	b2d1      	uxtb	r1, r2
 800195c:	4a86      	ldr	r2, [pc, #536]	; (8001b78 <main+0x500>)
 800195e:	54d1      	strb	r1, [r2, r3]
				if (col == 0)
 8001960:	4b83      	ldr	r3, [pc, #524]	; (8001b70 <main+0x4f8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d103      	bne.n	8001970 <main+0x2f8>
					col = 7;
 8001968:	4b81      	ldr	r3, [pc, #516]	; (8001b70 <main+0x4f8>)
 800196a:	2207      	movs	r2, #7
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	e004      	b.n	800197a <main+0x302>
				else
					col--;
 8001970:	4b7f      	ldr	r3, [pc, #508]	; (8001b70 <main+0x4f8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	3b01      	subs	r3, #1
 8001976:	4a7e      	ldr	r2, [pc, #504]	; (8001b70 <main+0x4f8>)
 8001978:	6013      	str	r3, [r2, #0]
				coordinate[row] |= (1 << col);
 800197a:	4b7e      	ldr	r3, [pc, #504]	; (8001b74 <main+0x4fc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a7e      	ldr	r2, [pc, #504]	; (8001b78 <main+0x500>)
 8001980:	5cd3      	ldrb	r3, [r2, r3]
 8001982:	b25a      	sxtb	r2, r3
 8001984:	4b7a      	ldr	r3, [pc, #488]	; (8001b70 <main+0x4f8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2101      	movs	r1, #1
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	b25b      	sxtb	r3, r3
 8001990:	4313      	orrs	r3, r2
 8001992:	b25a      	sxtb	r2, r3
 8001994:	4b77      	ldr	r3, [pc, #476]	; (8001b74 <main+0x4fc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	b2d1      	uxtb	r1, r2
 800199a:	4a77      	ldr	r2, [pc, #476]	; (8001b78 <main+0x500>)
 800199c:	54d1      	strb	r1, [r2, r3]
				dot_flag4 = 0;
 800199e:	4b78      	ldr	r3, [pc, #480]	; (8001b80 <main+0x508>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
			}
			if (button_flag == 1) {
 80019a4:	4b77      	ldr	r3, [pc, #476]	; (8001b84 <main+0x50c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d158      	bne.n	8001a5e <main+0x3e6>
				uint8_t bit_state = bit_check(map[row]);
 80019ac:	4b71      	ldr	r3, [pc, #452]	; (8001b74 <main+0x4fc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a75      	ldr	r2, [pc, #468]	; (8001b88 <main+0x510>)
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fe3f 	bl	8001638 <bit_check>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (bit_state == 0) { // if bit is 0
 80019c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d112      	bne.n	80019ee <main+0x376>
					map[row] |= (1 << col); // led on
 80019c8:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <main+0x4fc>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a6e      	ldr	r2, [pc, #440]	; (8001b88 <main+0x510>)
 80019ce:	5cd3      	ldrb	r3, [r2, r3]
 80019d0:	b25a      	sxtb	r2, r3
 80019d2:	4b67      	ldr	r3, [pc, #412]	; (8001b70 <main+0x4f8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2101      	movs	r1, #1
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	b25b      	sxtb	r3, r3
 80019de:	4313      	orrs	r3, r2
 80019e0:	b25a      	sxtb	r2, r3
 80019e2:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <main+0x4fc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	b2d1      	uxtb	r1, r2
 80019e8:	4a67      	ldr	r2, [pc, #412]	; (8001b88 <main+0x510>)
 80019ea:	54d1      	strb	r1, [r2, r3]
 80019ec:	e017      	b.n	8001a1e <main+0x3a6>
				} else if (bit_state == 1) { // if bit is 1
 80019ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d113      	bne.n	8001a1e <main+0x3a6>
					map[row] &= ~(1 << col); //led off
 80019f6:	4b5f      	ldr	r3, [pc, #380]	; (8001b74 <main+0x4fc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a63      	ldr	r2, [pc, #396]	; (8001b88 <main+0x510>)
 80019fc:	5cd3      	ldrb	r3, [r2, r3]
 80019fe:	b25a      	sxtb	r2, r3
 8001a00:	4b5b      	ldr	r3, [pc, #364]	; (8001b70 <main+0x4f8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2101      	movs	r1, #1
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	4013      	ands	r3, r2
 8001a12:	b25a      	sxtb	r2, r3
 8001a14:	4b57      	ldr	r3, [pc, #348]	; (8001b74 <main+0x4fc>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	b2d1      	uxtb	r1, r2
 8001a1a:	4a5b      	ldr	r2, [pc, #364]	; (8001b88 <main+0x510>)
 8001a1c:	54d1      	strb	r1, [r2, r3]
				}

				button_flag = 0;
 8001a1e:	4b59      	ldr	r3, [pc, #356]	; (8001b84 <main+0x50c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
			}



			while (!(HAL_GPIO_ReadPin(GPIOB, joysw_Pin))) // push button while 5sec;
 8001a24:	e01b      	b.n	8001a5e <main+0x3e6>
			{
				cnt++;
 8001a26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				HAL_Delay(100);
 8001a30:	2064      	movs	r0, #100	; 0x64
 8001a32:	f001 f825 	bl	8002a80 <HAL_Delay>
				if (cnt > 10) {
 8001a36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001a3a:	2b0a      	cmp	r3, #10
 8001a3c:	d90f      	bls.n	8001a5e <main+0x3e6>
					printf("Mode change to 1\r\n");
 8001a3e:	4853      	ldr	r0, [pc, #332]	; (8001b8c <main+0x514>)
 8001a40:	f006 fade 	bl	8008000 <puts>
					cnt = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
					state = 1; // change to state1
 8001a4a:	4b51      	ldr	r3, [pc, #324]	; (8001b90 <main+0x518>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
					write_string("1");
 8001a50:	4850      	ldr	r0, [pc, #320]	; (8001b94 <main+0x51c>)
 8001a52:	f7ff fcd5 	bl	8001400 <write_string>
					HAL_Delay(1000);
 8001a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a5a:	f001 f811 	bl	8002a80 <HAL_Delay>
			while (!(HAL_GPIO_ReadPin(GPIOB, joysw_Pin))) // push button while 5sec;
 8001a5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a62:	484d      	ldr	r0, [pc, #308]	; (8001b98 <main+0x520>)
 8001a64:	f002 fa86 	bl	8003f74 <HAL_GPIO_ReadPin>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0db      	beq.n	8001a26 <main+0x3ae>
				}
			}
		}// end of 'state0'

		if (state == 1) // state 1 : display current time
 8001a6e:	4b48      	ldr	r3, [pc, #288]	; (8001b90 <main+0x518>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d141      	bne.n	8001afa <main+0x482>
		{
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001a76:	2200      	movs	r2, #0
 8001a78:	4948      	ldr	r1, [pc, #288]	; (8001b9c <main+0x524>)
 8001a7a:	4849      	ldr	r0, [pc, #292]	; (8001ba0 <main+0x528>)
 8001a7c:	f004 f964 	bl	8005d48 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001a80:	2200      	movs	r2, #0
 8001a82:	4948      	ldr	r1, [pc, #288]	; (8001ba4 <main+0x52c>)
 8001a84:	4846      	ldr	r0, [pc, #280]	; (8001ba0 <main+0x528>)
 8001a86:	f004 faed 	bl	8006064 <HAL_RTC_GetDate>


			//sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
			sprintf(time,"%02d:%02d:%02d",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8001a8a:	4b44      	ldr	r3, [pc, #272]	; (8001b9c <main+0x524>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b42      	ldr	r3, [pc, #264]	; (8001b9c <main+0x524>)
 8001a92:	785b      	ldrb	r3, [r3, #1]
 8001a94:	4619      	mov	r1, r3
 8001a96:	4b41      	ldr	r3, [pc, #260]	; (8001b9c <main+0x524>)
 8001a98:	789b      	ldrb	r3, [r3, #2]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4942      	ldr	r1, [pc, #264]	; (8001ba8 <main+0x530>)
 8001aa0:	4842      	ldr	r0, [pc, #264]	; (8001bac <main+0x534>)
 8001aa2:	f006 fab9 	bl	8008018 <siprintf>
			write_string_shift(time);
 8001aa6:	4841      	ldr	r0, [pc, #260]	; (8001bac <main+0x534>)
 8001aa8:	f7ff fcfa 	bl	80014a0 <write_string_shift>

			while (!(HAL_GPIO_ReadPin(GPIOB, joysw_Pin))) // push button while 5sec;
 8001aac:	e01d      	b.n	8001aea <main+0x472>
			{
				cnt++;
 8001aae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				HAL_Delay(100);
 8001ab8:	2064      	movs	r0, #100	; 0x64
 8001aba:	f000 ffe1 	bl	8002a80 <HAL_Delay>
				if (cnt > 10)
 8001abe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001ac2:	2b0a      	cmp	r3, #10
 8001ac4:	d911      	bls.n	8001aea <main+0x472>
				{
					printf("Mode change to 2\r\n");
 8001ac6:	483a      	ldr	r0, [pc, #232]	; (8001bb0 <main+0x538>)
 8001ac8:	f006 fa9a 	bl	8008000 <puts>
					cnt = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
					state = 2; // change to state0
 8001ad2:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <main+0x518>)
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	701a      	strb	r2, [r3, #0]
					write_string("2");
 8001ad8:	4836      	ldr	r0, [pc, #216]	; (8001bb4 <main+0x53c>)
 8001ada:	f7ff fc91 	bl	8001400 <write_string>
					HAL_Delay(1000);
 8001ade:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ae2:	f000 ffcd 	bl	8002a80 <HAL_Delay>
					max_init ();
 8001ae6:	f7ff fc73 	bl	80013d0 <max_init>
			while (!(HAL_GPIO_ReadPin(GPIOB, joysw_Pin))) // push button while 5sec;
 8001aea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aee:	482a      	ldr	r0, [pc, #168]	; (8001b98 <main+0x520>)
 8001af0:	f002 fa40 	bl	8003f74 <HAL_GPIO_ReadPin>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0d9      	beq.n	8001aae <main+0x436>
				}
			}
		 } // end of 'state1'

		if (state == 2) // state 2 : display temp and hum
 8001afa:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <main+0x518>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	f040 8088 	bne.w	8001c14 <main+0x59c>
		{
			//Am2320_ = am2320_Init(&hi2c1, 0x5C << 1);
			am2320_GetTemperatureAndHumidity(&Am2320_, &temperature, &humidity);
 8001b04:	f107 0210 	add.w	r2, r7, #16
 8001b08:	f107 0114 	add.w	r1, r7, #20
 8001b0c:	f107 0318 	add.w	r3, r7, #24
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fbcb 	bl	80012ac <am2320_GetTemperatureAndHumidity>
			printf("=====================================\r\n");
 8001b16:	4828      	ldr	r0, [pc, #160]	; (8001bb8 <main+0x540>)
 8001b18:	f006 fa72 	bl	8008000 <puts>
			printf("Temperature: %.1fºC\r\n", temperature);
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fc82 	bl	8000428 <__aeabi_f2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4824      	ldr	r0, [pc, #144]	; (8001bbc <main+0x544>)
 8001b2a:	f006 f9e3 	bl	8007ef4 <iprintf>
			printf("Humidity: %.1f%%\r\n", humidity);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fc79 	bl	8000428 <__aeabi_f2d>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4821      	ldr	r0, [pc, #132]	; (8001bc0 <main+0x548>)
 8001b3c:	f006 f9da 	bl	8007ef4 <iprintf>

			sprintf(time,"%.1f;C@%.1f/",temperature,humidity);
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fc70 	bl	8000428 <__aeabi_f2d>
 8001b48:	4604      	mov	r4, r0
 8001b4a:	460d      	mov	r5, r1
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fc6a 	bl	8000428 <__aeabi_f2d>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	e9cd 2300 	strd	r2, r3, [sp]
 8001b5c:	4622      	mov	r2, r4
 8001b5e:	462b      	mov	r3, r5
 8001b60:	4918      	ldr	r1, [pc, #96]	; (8001bc4 <main+0x54c>)
 8001b62:	4812      	ldr	r0, [pc, #72]	; (8001bac <main+0x534>)
 8001b64:	f006 fa58 	bl	8008018 <siprintf>
			write_string_shift(time);
 8001b68:	4810      	ldr	r0, [pc, #64]	; (8001bac <main+0x534>)
 8001b6a:	f7ff fc99 	bl	80014a0 <write_string_shift>

			while (!(HAL_GPIO_ReadPin(GPIOB, joysw_Pin))) // push button while 5sec;
 8001b6e:	e049      	b.n	8001c04 <main+0x58c>
 8001b70:	20000004 	.word	0x20000004
 8001b74:	20000000 	.word	0x20000000
 8001b78:	2000052c 	.word	0x2000052c
 8001b7c:	20000500 	.word	0x20000500
 8001b80:	20000501 	.word	0x20000501
 8001b84:	20000502 	.word	0x20000502
 8001b88:	20000538 	.word	0x20000538
 8001b8c:	0800bbe0 	.word	0x0800bbe0
 8001b90:	200004fd 	.word	0x200004fd
 8001b94:	0800bbf4 	.word	0x0800bbf4
 8001b98:	40010c00 	.word	0x40010c00
 8001b9c:	20000524 	.word	0x20000524
 8001ba0:	20000454 	.word	0x20000454
 8001ba4:	20000528 	.word	0x20000528
 8001ba8:	0800bbf8 	.word	0x0800bbf8
 8001bac:	20000504 	.word	0x20000504
 8001bb0:	0800bc08 	.word	0x0800bc08
 8001bb4:	0800bc1c 	.word	0x0800bc1c
 8001bb8:	0800bc20 	.word	0x0800bc20
 8001bbc:	0800bc48 	.word	0x0800bc48
 8001bc0:	0800bc60 	.word	0x0800bc60
 8001bc4:	0800bc74 	.word	0x0800bc74
			{
				cnt++;
 8001bc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				HAL_Delay(100);
 8001bd2:	2064      	movs	r0, #100	; 0x64
 8001bd4:	f000 ff54 	bl	8002a80 <HAL_Delay>
				if (cnt > 10)
 8001bd8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001bdc:	2b0a      	cmp	r3, #10
 8001bde:	d911      	bls.n	8001c04 <main+0x58c>
				{
					printf("Mode change to 3\r\n");
 8001be0:	48a2      	ldr	r0, [pc, #648]	; (8001e6c <main+0x7f4>)
 8001be2:	f006 fa0d 	bl	8008000 <puts>
					cnt = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
					state = 3; // change to state0
 8001bec:	4ba0      	ldr	r3, [pc, #640]	; (8001e70 <main+0x7f8>)
 8001bee:	2203      	movs	r2, #3
 8001bf0:	701a      	strb	r2, [r3, #0]
					write_string("3");
 8001bf2:	48a0      	ldr	r0, [pc, #640]	; (8001e74 <main+0x7fc>)
 8001bf4:	f7ff fc04 	bl	8001400 <write_string>
					HAL_Delay(1000);
 8001bf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bfc:	f000 ff40 	bl	8002a80 <HAL_Delay>
					max_init ();
 8001c00:	f7ff fbe6 	bl	80013d0 <max_init>
			while (!(HAL_GPIO_ReadPin(GPIOB, joysw_Pin))) // push button while 5sec;
 8001c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c08:	489b      	ldr	r0, [pc, #620]	; (8001e78 <main+0x800>)
 8001c0a:	f002 f9b3 	bl	8003f74 <HAL_GPIO_ReadPin>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0d9      	beq.n	8001bc8 <main+0x550>
				}
			}
		 } // end of 'state2'

		if (state == 3) // state 3 : save to Flash Memory
 8001c14:	4b96      	ldr	r3, [pc, #600]	; (8001e70 <main+0x7f8>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	f040 809a 	bne.w	8001d52 <main+0x6da>
		{
			for(int i =0; i<8; i++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	643b      	str	r3, [r7, #64]	; 0x40
 8001c22:	e00b      	b.n	8001c3c <main+0x5c4>
			{
				Upload_Data[i] = (uint32_t)map[i];
 8001c24:	4a95      	ldr	r2, [pc, #596]	; (8001e7c <main+0x804>)
 8001c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c28:	4413      	add	r3, r2
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4a94      	ldr	r2, [pc, #592]	; (8001e80 <main+0x808>)
 8001c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i =0; i<8; i++)
 8001c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c38:	3301      	adds	r3, #1
 8001c3a:	643b      	str	r3, [r7, #64]	; 0x40
 8001c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c3e:	2b07      	cmp	r3, #7
 8001c40:	ddf0      	ble.n	8001c24 <main+0x5ac>
			}
			if (input_delay == 1) {
 8001c42:	4b90      	ldr	r3, [pc, #576]	; (8001e84 <main+0x80c>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d17b      	bne.n	8001d42 <main+0x6ca>
				if (joy_value[1] == 0) //up
 8001c4a:	4b8f      	ldr	r3, [pc, #572]	; (8001e88 <main+0x810>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10d      	bne.n	8001c6e <main+0x5f6>
						{
					printf("up\r\n");
 8001c52:	488e      	ldr	r0, [pc, #568]	; (8001e8c <main+0x814>)
 8001c54:	f006 f9d4 	bl	8008000 <puts>
					Flash_Write_Data(0x0801F010 , Upload_Data,8);
 8001c58:	2208      	movs	r2, #8
 8001c5a:	4989      	ldr	r1, [pc, #548]	; (8001e80 <main+0x808>)
 8001c5c:	488c      	ldr	r0, [pc, #560]	; (8001e90 <main+0x818>)
 8001c5e:	f7ff fa41 	bl	80010e4 <Flash_Write_Data>

					//Flash_Write_Data(0x08004410 , Upload_Data,8);
					input_delay = 0;
 8001c62:	4b88      	ldr	r3, [pc, #544]	; (8001e84 <main+0x80c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
					write_string_shift("SAVE1");
 8001c68:	488a      	ldr	r0, [pc, #552]	; (8001e94 <main+0x81c>)
 8001c6a:	f7ff fc19 	bl	80014a0 <write_string_shift>
				}
				if (joy_value[1] == 4095) //down
 8001c6e:	4b86      	ldr	r3, [pc, #536]	; (8001e88 <main+0x810>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d10d      	bne.n	8001c96 <main+0x61e>
						{
					printf("down\r\n");
 8001c7a:	4887      	ldr	r0, [pc, #540]	; (8001e98 <main+0x820>)
 8001c7c:	f006 f9c0 	bl	8008000 <puts>
					Flash_Write_Data(0x0801F410 , Upload_Data,8);
 8001c80:	2208      	movs	r2, #8
 8001c82:	497f      	ldr	r1, [pc, #508]	; (8001e80 <main+0x808>)
 8001c84:	4885      	ldr	r0, [pc, #532]	; (8001e9c <main+0x824>)
 8001c86:	f7ff fa2d 	bl	80010e4 <Flash_Write_Data>
					//Flash_Write_Data(0x0800430 , Upload_Data,8);
					input_delay = 0;
 8001c8a:	4b7e      	ldr	r3, [pc, #504]	; (8001e84 <main+0x80c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
					write_string_shift("SAVE2");
 8001c90:	4883      	ldr	r0, [pc, #524]	; (8001ea0 <main+0x828>)
 8001c92:	f7ff fc05 	bl	80014a0 <write_string_shift>
				}
				if (joy_value[0] == 0) //left
 8001c96:	4b7c      	ldr	r3, [pc, #496]	; (8001e88 <main+0x810>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10d      	bne.n	8001cba <main+0x642>
						{
					printf("left\r\n");
 8001c9e:	4881      	ldr	r0, [pc, #516]	; (8001ea4 <main+0x82c>)
 8001ca0:	f006 f9ae 	bl	8008000 <puts>
					Flash_Write_Data(0x0801F810 , Upload_Data,8);
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	4976      	ldr	r1, [pc, #472]	; (8001e80 <main+0x808>)
 8001ca8:	487f      	ldr	r0, [pc, #508]	; (8001ea8 <main+0x830>)
 8001caa:	f7ff fa1b 	bl	80010e4 <Flash_Write_Data>
					//Flash_Write_Data(0x08004450 , Upload_Data,8);
					input_delay = 0;
 8001cae:	4b75      	ldr	r3, [pc, #468]	; (8001e84 <main+0x80c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
					write_string_shift("SAVE3");
 8001cb4:	487d      	ldr	r0, [pc, #500]	; (8001eac <main+0x834>)
 8001cb6:	f7ff fbf3 	bl	80014a0 <write_string_shift>
				}
				if (joy_value[0] == 4095) //right
 8001cba:	4b73      	ldr	r3, [pc, #460]	; (8001e88 <main+0x810>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d10d      	bne.n	8001ce2 <main+0x66a>
						{
					printf("right\r\n");
 8001cc6:	487a      	ldr	r0, [pc, #488]	; (8001eb0 <main+0x838>)
 8001cc8:	f006 f99a 	bl	8008000 <puts>
					Flash_Write_Data(0x0801FC10 , Upload_Data,8);
 8001ccc:	2208      	movs	r2, #8
 8001cce:	496c      	ldr	r1, [pc, #432]	; (8001e80 <main+0x808>)
 8001cd0:	4878      	ldr	r0, [pc, #480]	; (8001eb4 <main+0x83c>)
 8001cd2:	f7ff fa07 	bl	80010e4 <Flash_Write_Data>
					//Flash_Write_Data(0x08004470 , Upload_Data,8);
					input_delay = 0;
 8001cd6:	4b6b      	ldr	r3, [pc, #428]	; (8001e84 <main+0x80c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
					write_string_shift("SAVE4");
 8001cdc:	4876      	ldr	r0, [pc, #472]	; (8001eb8 <main+0x840>)
 8001cde:	f7ff fbdf 	bl	80014a0 <write_string_shift>
				}

				if (HAL_GPIO_ReadPin(GPIOB, joysw_Pin) == 0) // button push
 8001ce2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ce6:	4864      	ldr	r0, [pc, #400]	; (8001e78 <main+0x800>)
 8001ce8:	f002 f944 	bl	8003f74 <HAL_GPIO_ReadPin>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d127      	bne.n	8001d42 <main+0x6ca>
						{
					printf("push\r\n");
 8001cf2:	4872      	ldr	r0, [pc, #456]	; (8001ebc <main+0x844>)
 8001cf4:	f006 f984 	bl	8008000 <puts>
					button_flag = 1;
 8001cf8:	4b71      	ldr	r3, [pc, #452]	; (8001ec0 <main+0x848>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
					input_delay = 0;
 8001cfe:	4b61      	ldr	r3, [pc, #388]	; (8001e84 <main+0x80c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]

				}
			}

			while (!(HAL_GPIO_ReadPin(GPIOB, joysw_Pin))) // push button while 5sec;
 8001d04:	e01d      	b.n	8001d42 <main+0x6ca>
			{
				cnt++;
 8001d06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				HAL_Delay(100);
 8001d10:	2064      	movs	r0, #100	; 0x64
 8001d12:	f000 feb5 	bl	8002a80 <HAL_Delay>
				if (cnt > 10)
 8001d16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001d1a:	2b0a      	cmp	r3, #10
 8001d1c:	d911      	bls.n	8001d42 <main+0x6ca>
				{
					printf("Mode change to 4\r\n");
 8001d1e:	4869      	ldr	r0, [pc, #420]	; (8001ec4 <main+0x84c>)
 8001d20:	f006 f96e 	bl	8008000 <puts>
					cnt = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
					state = 4; // change to state4
 8001d2a:	4b51      	ldr	r3, [pc, #324]	; (8001e70 <main+0x7f8>)
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	701a      	strb	r2, [r3, #0]
					write_string("4");
 8001d30:	4865      	ldr	r0, [pc, #404]	; (8001ec8 <main+0x850>)
 8001d32:	f7ff fb65 	bl	8001400 <write_string>
					HAL_Delay(1000);
 8001d36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d3a:	f000 fea1 	bl	8002a80 <HAL_Delay>
					max_init();
 8001d3e:	f7ff fb47 	bl	80013d0 <max_init>
			while (!(HAL_GPIO_ReadPin(GPIOB, joysw_Pin))) // push button while 5sec;
 8001d42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d46:	484c      	ldr	r0, [pc, #304]	; (8001e78 <main+0x800>)
 8001d48:	f002 f914 	bl	8003f74 <HAL_GPIO_ReadPin>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0d9      	beq.n	8001d06 <main+0x68e>
				}
			}
		} // end of 'state3'

		if (state == 4) // state 4 : display saved map
 8001d52:	4b47      	ldr	r3, [pc, #284]	; (8001e70 <main+0x7f8>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	f040 80fd 	bne.w	8001f56 <main+0x8de>
		{
			if (input_delay == 1) {
 8001d5c:	4b49      	ldr	r3, [pc, #292]	; (8001e84 <main+0x80c>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	f040 80f0 	bne.w	8001f46 <main+0x8ce>
				if (joy_value[1] == 0) //up
 8001d66:	4b48      	ldr	r3, [pc, #288]	; (8001e88 <main+0x810>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d120      	bne.n	8001db0 <main+0x738>
						{
					printf("up\r\n");
 8001d6e:	4847      	ldr	r0, [pc, #284]	; (8001e8c <main+0x814>)
 8001d70:	f006 f946 	bl	8008000 <puts>
					Flash_Read_Data(0x0801F010, Read_Data, 8);
 8001d74:	2208      	movs	r2, #8
 8001d76:	4955      	ldr	r1, [pc, #340]	; (8001ecc <main+0x854>)
 8001d78:	4845      	ldr	r0, [pc, #276]	; (8001e90 <main+0x818>)
 8001d7a:	f7ff fa0f 	bl	800119c <Flash_Read_Data>

					//Flash_Read_Data(0x08004410, Read_Data, 8);
					for(int i =0; i<8; i++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d82:	e00c      	b.n	8001d9e <main+0x726>
					{
						map[i] = (uint8_t)Read_Data[i];
 8001d84:	4a51      	ldr	r2, [pc, #324]	; (8001ecc <main+0x854>)
 8001d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8c:	b2d9      	uxtb	r1, r3
 8001d8e:	4a3b      	ldr	r2, [pc, #236]	; (8001e7c <main+0x804>)
 8001d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d92:	4413      	add	r3, r2
 8001d94:	460a      	mov	r2, r1
 8001d96:	701a      	strb	r2, [r3, #0]
					for(int i =0; i<8; i++)
 8001d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001da0:	2b07      	cmp	r3, #7
 8001da2:	ddef      	ble.n	8001d84 <main+0x70c>
					}
					write_string_shift("READ1");
 8001da4:	484a      	ldr	r0, [pc, #296]	; (8001ed0 <main+0x858>)
 8001da6:	f7ff fb7b 	bl	80014a0 <write_string_shift>
					input_delay = 0;
 8001daa:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <main+0x80c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
				}
				if (joy_value[1] == 4095) //down
 8001db0:	4b35      	ldr	r3, [pc, #212]	; (8001e88 <main+0x810>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d120      	bne.n	8001dfe <main+0x786>
						{
					printf("down\r\n");
 8001dbc:	4836      	ldr	r0, [pc, #216]	; (8001e98 <main+0x820>)
 8001dbe:	f006 f91f 	bl	8008000 <puts>
					Flash_Read_Data(0x0801F410, Read_Data, 8);
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	4941      	ldr	r1, [pc, #260]	; (8001ecc <main+0x854>)
 8001dc6:	4835      	ldr	r0, [pc, #212]	; (8001e9c <main+0x824>)
 8001dc8:	f7ff f9e8 	bl	800119c <Flash_Read_Data>
					//Flash_Read_Data(0x08004430, Read_Data, 8);
					for(int i =0; i<8; i++)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dd0:	e00c      	b.n	8001dec <main+0x774>
					{
						map[i] = (uint8_t)Read_Data[i];
 8001dd2:	4a3e      	ldr	r2, [pc, #248]	; (8001ecc <main+0x854>)
 8001dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	b2d9      	uxtb	r1, r3
 8001ddc:	4a27      	ldr	r2, [pc, #156]	; (8001e7c <main+0x804>)
 8001dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de0:	4413      	add	r3, r2
 8001de2:	460a      	mov	r2, r1
 8001de4:	701a      	strb	r2, [r3, #0]
					for(int i =0; i<8; i++)
 8001de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de8:	3301      	adds	r3, #1
 8001dea:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dee:	2b07      	cmp	r3, #7
 8001df0:	ddef      	ble.n	8001dd2 <main+0x75a>
					}
					write_string_shift("READ2");
 8001df2:	4838      	ldr	r0, [pc, #224]	; (8001ed4 <main+0x85c>)
 8001df4:	f7ff fb54 	bl	80014a0 <write_string_shift>
					input_delay = 0;
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <main+0x80c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
				}
				if (joy_value[0] == 0) //left
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <main+0x810>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d120      	bne.n	8001e48 <main+0x7d0>
						{
					printf("left\r\n");
 8001e06:	4827      	ldr	r0, [pc, #156]	; (8001ea4 <main+0x82c>)
 8001e08:	f006 f8fa 	bl	8008000 <puts>
					Flash_Read_Data(0x0801F810, Read_Data, 8);
 8001e0c:	2208      	movs	r2, #8
 8001e0e:	492f      	ldr	r1, [pc, #188]	; (8001ecc <main+0x854>)
 8001e10:	4825      	ldr	r0, [pc, #148]	; (8001ea8 <main+0x830>)
 8001e12:	f7ff f9c3 	bl	800119c <Flash_Read_Data>
					//Flash_Read_Data(0x08004450, Read_Data, 8);
					for(int i =0; i<8; i++)
 8001e16:	2300      	movs	r3, #0
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
 8001e1a:	e00c      	b.n	8001e36 <main+0x7be>
					{
						map[i] = (uint8_t)Read_Data[i];
 8001e1c:	4a2b      	ldr	r2, [pc, #172]	; (8001ecc <main+0x854>)
 8001e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e24:	b2d9      	uxtb	r1, r3
 8001e26:	4a15      	ldr	r2, [pc, #84]	; (8001e7c <main+0x804>)
 8001e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2a:	4413      	add	r3, r2
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	701a      	strb	r2, [r3, #0]
					for(int i =0; i<8; i++)
 8001e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e32:	3301      	adds	r3, #1
 8001e34:	637b      	str	r3, [r7, #52]	; 0x34
 8001e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e38:	2b07      	cmp	r3, #7
 8001e3a:	ddef      	ble.n	8001e1c <main+0x7a4>
					}
					write_string_shift("READ3");
 8001e3c:	4826      	ldr	r0, [pc, #152]	; (8001ed8 <main+0x860>)
 8001e3e:	f7ff fb2f 	bl	80014a0 <write_string_shift>
					input_delay = 0;
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <main+0x80c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
				}
				if (joy_value[0] == 4095) //right
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <main+0x810>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d178      	bne.n	8001f46 <main+0x8ce>
						{
					printf("right\r\n");
 8001e54:	4816      	ldr	r0, [pc, #88]	; (8001eb0 <main+0x838>)
 8001e56:	f006 f8d3 	bl	8008000 <puts>
					Flash_Read_Data(0x0801FC10, Read_Data, 8);
 8001e5a:	2208      	movs	r2, #8
 8001e5c:	491b      	ldr	r1, [pc, #108]	; (8001ecc <main+0x854>)
 8001e5e:	4815      	ldr	r0, [pc, #84]	; (8001eb4 <main+0x83c>)
 8001e60:	f7ff f99c 	bl	800119c <Flash_Read_Data>
					//Flash_Read_Data(0x08004470, Read_Data, 8);
					for(int i =0; i<8; i++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
 8001e68:	e045      	b.n	8001ef6 <main+0x87e>
 8001e6a:	bf00      	nop
 8001e6c:	0800bc84 	.word	0x0800bc84
 8001e70:	200004fd 	.word	0x200004fd
 8001e74:	0800bc98 	.word	0x0800bc98
 8001e78:	40010c00 	.word	0x40010c00
 8001e7c:	20000538 	.word	0x20000538
 8001e80:	20000568 	.word	0x20000568
 8001e84:	200004fc 	.word	0x200004fc
 8001e88:	200004f4 	.word	0x200004f4
 8001e8c:	0800bbbc 	.word	0x0800bbbc
 8001e90:	0801f010 	.word	0x0801f010
 8001e94:	0800bc9c 	.word	0x0800bc9c
 8001e98:	0800bbc0 	.word	0x0800bbc0
 8001e9c:	0801f410 	.word	0x0801f410
 8001ea0:	0800bca4 	.word	0x0800bca4
 8001ea4:	0800bbc8 	.word	0x0800bbc8
 8001ea8:	0801f810 	.word	0x0801f810
 8001eac:	0800bcac 	.word	0x0800bcac
 8001eb0:	0800bbd0 	.word	0x0800bbd0
 8001eb4:	0801fc10 	.word	0x0801fc10
 8001eb8:	0800bcb4 	.word	0x0800bcb4
 8001ebc:	0800bbd8 	.word	0x0800bbd8
 8001ec0:	20000502 	.word	0x20000502
 8001ec4:	0800bcbc 	.word	0x0800bcbc
 8001ec8:	0800bcd0 	.word	0x0800bcd0
 8001ecc:	20000544 	.word	0x20000544
 8001ed0:	0800bcd4 	.word	0x0800bcd4
 8001ed4:	0800bcdc 	.word	0x0800bcdc
 8001ed8:	0800bce4 	.word	0x0800bce4
					{
						map[i] = (uint8_t)Read_Data[i];
 8001edc:	4a2d      	ldr	r2, [pc, #180]	; (8001f94 <main+0x91c>)
 8001ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee4:	b2d9      	uxtb	r1, r3
 8001ee6:	4a2c      	ldr	r2, [pc, #176]	; (8001f98 <main+0x920>)
 8001ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eea:	4413      	add	r3, r2
 8001eec:	460a      	mov	r2, r1
 8001eee:	701a      	strb	r2, [r3, #0]
					for(int i =0; i<8; i++)
 8001ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef8:	2b07      	cmp	r3, #7
 8001efa:	ddef      	ble.n	8001edc <main+0x864>
					}
					write_string_shift("READ4");
 8001efc:	4827      	ldr	r0, [pc, #156]	; (8001f9c <main+0x924>)
 8001efe:	f7ff facf 	bl	80014a0 <write_string_shift>
					input_delay = 0;
 8001f02:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <main+0x928>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
//					input_delay = 0;
//
//				}
			}

			while (!(HAL_GPIO_ReadPin(GPIOB, joysw_Pin))) // push button while 5sec;
 8001f08:	e01d      	b.n	8001f46 <main+0x8ce>
			{
				cnt++;
 8001f0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				HAL_Delay(100);
 8001f14:	2064      	movs	r0, #100	; 0x64
 8001f16:	f000 fdb3 	bl	8002a80 <HAL_Delay>
				if (cnt > 10)
 8001f1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001f1e:	2b0a      	cmp	r3, #10
 8001f20:	d911      	bls.n	8001f46 <main+0x8ce>
				{
					printf("Mode change to 0\r\n");
 8001f22:	4820      	ldr	r0, [pc, #128]	; (8001fa4 <main+0x92c>)
 8001f24:	f006 f86c 	bl	8008000 <puts>
					cnt = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
					state = 0; // change to state0
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <main+0x930>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
					write_string("0");
 8001f34:	481d      	ldr	r0, [pc, #116]	; (8001fac <main+0x934>)
 8001f36:	f7ff fa63 	bl	8001400 <write_string>
					HAL_Delay(1000);
 8001f3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f3e:	f000 fd9f 	bl	8002a80 <HAL_Delay>
					max_init();
 8001f42:	f7ff fa45 	bl	80013d0 <max_init>
			while (!(HAL_GPIO_ReadPin(GPIOB, joysw_Pin))) // push button while 5sec;
 8001f46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f4a:	4819      	ldr	r0, [pc, #100]	; (8001fb0 <main+0x938>)
 8001f4c:	f002 f812 	bl	8003f74 <HAL_GPIO_ReadPin>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0d9      	beq.n	8001f0a <main+0x892>
				}
			}
		} // end of 'state4'

		for (int i = 1; i < 9; i++) // display coordinate
 8001f56:	2301      	movs	r3, #1
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f5a:	e016      	b.n	8001f8a <main+0x912>
		{
			write_max(i, coordinate[i - 1]);
 8001f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f62:	3b01      	subs	r3, #1
 8001f64:	4913      	ldr	r1, [pc, #76]	; (8001fb4 <main+0x93c>)
 8001f66:	5ccb      	ldrb	r3, [r1, r3]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	f7ff fa10 	bl	8001390 <write_max>
			write_max(i, map[i - 1]);
 8001f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f76:	3b01      	subs	r3, #1
 8001f78:	4907      	ldr	r1, [pc, #28]	; (8001f98 <main+0x920>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4610      	mov	r0, r2
 8001f80:	f7ff fa06 	bl	8001390 <write_max>
		for (int i = 1; i < 9; i++) // display coordinate
 8001f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f86:	3301      	adds	r3, #1
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	dde5      	ble.n	8001f5c <main+0x8e4>
		if (state == 0) // state 1 : normal control
 8001f90:	f7ff bba3 	b.w	80016da <main+0x62>
 8001f94:	20000544 	.word	0x20000544
 8001f98:	20000538 	.word	0x20000538
 8001f9c:	0800bcec 	.word	0x0800bcec
 8001fa0:	200004fc 	.word	0x200004fc
 8001fa4:	0800bcf4 	.word	0x0800bcf4
 8001fa8:	200004fd 	.word	0x200004fd
 8001fac:	0800bd08 	.word	0x0800bd08
 8001fb0:	40010c00 	.word	0x40010c00
 8001fb4:	2000052c 	.word	0x2000052c

08001fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b094      	sub	sp, #80	; 0x50
 8001fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fc2:	2228      	movs	r2, #40	; 0x28
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f005 f91e 	bl	8007208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001fe8:	2305      	movs	r3, #5
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001fec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ffe:	2302      	movs	r3, #2
 8002000:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002002:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002006:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002008:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800200c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800200e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002012:	4618      	mov	r0, r3
 8002014:	f002 ffda 	bl	8004fcc <HAL_RCC_OscConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800201e:	f000 fa37 	bl	8002490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002022:	230f      	movs	r3, #15
 8002024:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002026:	2302      	movs	r3, #2
 8002028:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800202e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002032:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	2102      	movs	r1, #2
 800203e:	4618      	mov	r0, r3
 8002040:	f003 fa46 	bl	80054d0 <HAL_RCC_ClockConfig>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800204a:	f000 fa21 	bl	8002490 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800204e:	2303      	movs	r3, #3
 8002050:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002056:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002058:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800205c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	4618      	mov	r0, r3
 8002062:	f003 fbcd 	bl	8005800 <HAL_RCCEx_PeriphCLKConfig>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800206c:	f000 fa10 	bl	8002490 <Error_Handler>
  }
}
 8002070:	bf00      	nop
 8002072:	3750      	adds	r7, #80	; 0x50
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002088:	4b20      	ldr	r3, [pc, #128]	; (800210c <MX_ADC1_Init+0x94>)
 800208a:	4a21      	ldr	r2, [pc, #132]	; (8002110 <MX_ADC1_Init+0x98>)
 800208c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800208e:	4b1f      	ldr	r3, [pc, #124]	; (800210c <MX_ADC1_Init+0x94>)
 8002090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002094:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002096:	4b1d      	ldr	r3, [pc, #116]	; (800210c <MX_ADC1_Init+0x94>)
 8002098:	2201      	movs	r2, #1
 800209a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800209c:	4b1b      	ldr	r3, [pc, #108]	; (800210c <MX_ADC1_Init+0x94>)
 800209e:	2200      	movs	r2, #0
 80020a0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <MX_ADC1_Init+0x94>)
 80020a4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80020a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020aa:	4b18      	ldr	r3, [pc, #96]	; (800210c <MX_ADC1_Init+0x94>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <MX_ADC1_Init+0x94>)
 80020b2:	2202      	movs	r2, #2
 80020b4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020b6:	4815      	ldr	r0, [pc, #84]	; (800210c <MX_ADC1_Init+0x94>)
 80020b8:	f000 fd06 	bl	8002ac8 <HAL_ADC_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80020c2:	f000 f9e5 	bl	8002490 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80020c6:	2306      	movs	r3, #6
 80020c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020ca:	2301      	movs	r3, #1
 80020cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80020ce:	2307      	movs	r3, #7
 80020d0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	4619      	mov	r1, r3
 80020d6:	480d      	ldr	r0, [pc, #52]	; (800210c <MX_ADC1_Init+0x94>)
 80020d8:	f000 fec8 	bl	8002e6c <HAL_ADC_ConfigChannel>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80020e2:	f000 f9d5 	bl	8002490 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80020e6:	2307      	movs	r3, #7
 80020e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020ea:	2302      	movs	r3, #2
 80020ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	4619      	mov	r1, r3
 80020f2:	4806      	ldr	r0, [pc, #24]	; (800210c <MX_ADC1_Init+0x94>)
 80020f4:	f000 feba 	bl	8002e6c <HAL_ADC_ConfigChannel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80020fe:	f000 f9c7 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	2000038c 	.word	0x2000038c
 8002110:	40012400 	.word	0x40012400

08002114 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <MX_I2C1_Init+0x50>)
 800211a:	4a13      	ldr	r2, [pc, #76]	; (8002168 <MX_I2C1_Init+0x54>)
 800211c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <MX_I2C1_Init+0x50>)
 8002120:	4a12      	ldr	r2, [pc, #72]	; (800216c <MX_I2C1_Init+0x58>)
 8002122:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <MX_I2C1_Init+0x50>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <MX_I2C1_Init+0x50>)
 800212c:	2200      	movs	r2, #0
 800212e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <MX_I2C1_Init+0x50>)
 8002132:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002136:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <MX_I2C1_Init+0x50>)
 800213a:	2200      	movs	r2, #0
 800213c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <MX_I2C1_Init+0x50>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002144:	4b07      	ldr	r3, [pc, #28]	; (8002164 <MX_I2C1_Init+0x50>)
 8002146:	2200      	movs	r2, #0
 8002148:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <MX_I2C1_Init+0x50>)
 800214c:	2200      	movs	r2, #0
 800214e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002150:	4804      	ldr	r0, [pc, #16]	; (8002164 <MX_I2C1_Init+0x50>)
 8002152:	f001 ff61 	bl	8004018 <HAL_I2C_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800215c:	f000 f998 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000400 	.word	0x20000400
 8002168:	40005400 	.word	0x40005400
 800216c:	000186a0 	.word	0x000186a0

08002170 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	2100      	movs	r1, #0
 800217a:	460a      	mov	r2, r1
 800217c:	801a      	strh	r2, [r3, #0]
 800217e:	460a      	mov	r2, r1
 8002180:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002182:	2300      	movs	r3, #0
 8002184:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002186:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <MX_RTC_Init+0x8c>)
 8002188:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <MX_RTC_Init+0x90>)
 800218a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <MX_RTC_Init+0x8c>)
 800218e:	f04f 32ff 	mov.w	r2, #4294967295
 8002192:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <MX_RTC_Init+0x8c>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800219a:	4818      	ldr	r0, [pc, #96]	; (80021fc <MX_RTC_Init+0x8c>)
 800219c:	f003 fca6 	bl	8005aec <HAL_RTC_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80021a6:	f000 f973 	bl	8002490 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x19;
 80021aa:	2319      	movs	r3, #25
 80021ac:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	2201      	movs	r2, #1
 80021ba:	4619      	mov	r1, r3
 80021bc:	480f      	ldr	r0, [pc, #60]	; (80021fc <MX_RTC_Init+0x8c>)
 80021be:	f003 fd2b 	bl	8005c18 <HAL_RTC_SetTime>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80021c8:	f000 f962 	bl	8002490 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80021cc:	2300      	movs	r3, #0
 80021ce:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_MAY;
 80021d0:	2305      	movs	r3, #5
 80021d2:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80021d4:	2301      	movs	r3, #1
 80021d6:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x22;
 80021d8:	2322      	movs	r3, #34	; 0x22
 80021da:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80021dc:	463b      	mov	r3, r7
 80021de:	2201      	movs	r2, #1
 80021e0:	4619      	mov	r1, r3
 80021e2:	4806      	ldr	r0, [pc, #24]	; (80021fc <MX_RTC_Init+0x8c>)
 80021e4:	f003 fe88 	bl	8005ef8 <HAL_RTC_SetDate>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80021ee:	f000 f94f 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000454 	.word	0x20000454
 8002200:	40002800 	.word	0x40002800

08002204 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800220a:	f107 0308 	add.w	r3, r7, #8
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002218:	463b      	mov	r3, r7
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002220:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <MX_TIM3_Init+0x94>)
 8002222:	4a1e      	ldr	r2, [pc, #120]	; (800229c <MX_TIM3_Init+0x98>)
 8002224:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8002226:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <MX_TIM3_Init+0x94>)
 8002228:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800222c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222e:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <MX_TIM3_Init+0x94>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8002234:	4b18      	ldr	r3, [pc, #96]	; (8002298 <MX_TIM3_Init+0x94>)
 8002236:	f241 3287 	movw	r2, #4999	; 0x1387
 800223a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223c:	4b16      	ldr	r3, [pc, #88]	; (8002298 <MX_TIM3_Init+0x94>)
 800223e:	2200      	movs	r2, #0
 8002240:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <MX_TIM3_Init+0x94>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002248:	4813      	ldr	r0, [pc, #76]	; (8002298 <MX_TIM3_Init+0x94>)
 800224a:	f004 fa01 	bl	8006650 <HAL_TIM_Base_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002254:	f000 f91c 	bl	8002490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800225e:	f107 0308 	add.w	r3, r7, #8
 8002262:	4619      	mov	r1, r3
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <MX_TIM3_Init+0x94>)
 8002266:	f004 fb9d 	bl	80069a4 <HAL_TIM_ConfigClockSource>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002270:	f000 f90e 	bl	8002490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002274:	2300      	movs	r3, #0
 8002276:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800227c:	463b      	mov	r3, r7
 800227e:	4619      	mov	r1, r3
 8002280:	4805      	ldr	r0, [pc, #20]	; (8002298 <MX_TIM3_Init+0x94>)
 8002282:	f004 fd6f 	bl	8006d64 <HAL_TIMEx_MasterConfigSynchronization>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800228c:	f000 f900 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002290:	bf00      	nop
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000468 	.word	0x20000468
 800229c:	40000400 	.word	0x40000400

080022a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022a4:	4b11      	ldr	r3, [pc, #68]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <MX_USART2_UART_Init+0x50>)
 80022a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022c6:	220c      	movs	r2, #12
 80022c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022d8:	f004 fdb4 	bl	8006e44 <HAL_UART_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022e2:	f000 f8d5 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200004b0 	.word	0x200004b0
 80022f0:	40004400 	.word	0x40004400

080022f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <MX_DMA_Init+0x38>)
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	4a0b      	ldr	r2, [pc, #44]	; (800232c <MX_DMA_Init+0x38>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6153      	str	r3, [r2, #20]
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <MX_DMA_Init+0x38>)
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2100      	movs	r1, #0
 8002316:	200b      	movs	r0, #11
 8002318:	f001 f879 	bl	800340e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800231c:	200b      	movs	r0, #11
 800231e:	f001 f892 	bl	8003446 <HAL_NVIC_EnableIRQ>

}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000

08002330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002336:	f107 0310 	add.w	r3, r7, #16
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002344:	4b3d      	ldr	r3, [pc, #244]	; (800243c <MX_GPIO_Init+0x10c>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4a3c      	ldr	r2, [pc, #240]	; (800243c <MX_GPIO_Init+0x10c>)
 800234a:	f043 0310 	orr.w	r3, r3, #16
 800234e:	6193      	str	r3, [r2, #24]
 8002350:	4b3a      	ldr	r3, [pc, #232]	; (800243c <MX_GPIO_Init+0x10c>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800235c:	4b37      	ldr	r3, [pc, #220]	; (800243c <MX_GPIO_Init+0x10c>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4a36      	ldr	r2, [pc, #216]	; (800243c <MX_GPIO_Init+0x10c>)
 8002362:	f043 0320 	orr.w	r3, r3, #32
 8002366:	6193      	str	r3, [r2, #24]
 8002368:	4b34      	ldr	r3, [pc, #208]	; (800243c <MX_GPIO_Init+0x10c>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f003 0320 	and.w	r3, r3, #32
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	4b31      	ldr	r3, [pc, #196]	; (800243c <MX_GPIO_Init+0x10c>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a30      	ldr	r2, [pc, #192]	; (800243c <MX_GPIO_Init+0x10c>)
 800237a:	f043 0304 	orr.w	r3, r3, #4
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b2e      	ldr	r3, [pc, #184]	; (800243c <MX_GPIO_Init+0x10c>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <MX_GPIO_Init+0x10c>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4a2a      	ldr	r2, [pc, #168]	; (800243c <MX_GPIO_Init+0x10c>)
 8002392:	f043 0308 	orr.w	r3, r3, #8
 8002396:	6193      	str	r3, [r2, #24]
 8002398:	4b28      	ldr	r3, [pc, #160]	; (800243c <MX_GPIO_Init+0x10c>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, clock_Pin|cs_Pin|data_Pin, GPIO_PIN_RESET);
 80023a4:	2200      	movs	r2, #0
 80023a6:	2107      	movs	r1, #7
 80023a8:	4825      	ldr	r0, [pc, #148]	; (8002440 <MX_GPIO_Init+0x110>)
 80023aa:	f001 fdfa 	bl	8003fa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2120      	movs	r1, #32
 80023b2:	4824      	ldr	r0, [pc, #144]	; (8002444 <MX_GPIO_Init+0x114>)
 80023b4:	f001 fdf5 	bl	8003fa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023be:	4b22      	ldr	r3, [pc, #136]	; (8002448 <MX_GPIO_Init+0x118>)
 80023c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023c6:	f107 0310 	add.w	r3, r7, #16
 80023ca:	4619      	mov	r1, r3
 80023cc:	481c      	ldr	r0, [pc, #112]	; (8002440 <MX_GPIO_Init+0x110>)
 80023ce:	f001 fc4d 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : clock_Pin cs_Pin data_Pin */
  GPIO_InitStruct.Pin = clock_Pin|cs_Pin|data_Pin;
 80023d2:	2307      	movs	r3, #7
 80023d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d6:	2301      	movs	r3, #1
 80023d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	2302      	movs	r3, #2
 80023e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e2:	f107 0310 	add.w	r3, r7, #16
 80023e6:	4619      	mov	r1, r3
 80023e8:	4815      	ldr	r0, [pc, #84]	; (8002440 <MX_GPIO_Init+0x110>)
 80023ea:	f001 fc3f 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80023ee:	2320      	movs	r3, #32
 80023f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f2:	2301      	movs	r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	2302      	movs	r3, #2
 80023fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80023fe:	f107 0310 	add.w	r3, r7, #16
 8002402:	4619      	mov	r1, r3
 8002404:	480f      	ldr	r0, [pc, #60]	; (8002444 <MX_GPIO_Init+0x114>)
 8002406:	f001 fc31 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : joysw_Pin */
  GPIO_InitStruct.Pin = joysw_Pin;
 800240a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800240e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002414:	2301      	movs	r3, #1
 8002416:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(joysw_GPIO_Port, &GPIO_InitStruct);
 8002418:	f107 0310 	add.w	r3, r7, #16
 800241c:	4619      	mov	r1, r3
 800241e:	480b      	ldr	r0, [pc, #44]	; (800244c <MX_GPIO_Init+0x11c>)
 8002420:	f001 fc24 	bl	8003c6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	2100      	movs	r1, #0
 8002428:	2028      	movs	r0, #40	; 0x28
 800242a:	f000 fff0 	bl	800340e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800242e:	2028      	movs	r0, #40	; 0x28
 8002430:	f001 f809 	bl	8003446 <HAL_NVIC_EnableIRQ>

}
 8002434:	bf00      	nop
 8002436:	3720      	adds	r7, #32
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	40011000 	.word	0x40011000
 8002444:	40010800 	.word	0x40010800
 8002448:	10110000 	.word	0x10110000
 800244c:	40010c00 	.word	0x40010c00

08002450 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE {
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8002458:	1d39      	adds	r1, r7, #4
 800245a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800245e:	2201      	movs	r2, #1
 8002460:	4803      	ldr	r0, [pc, #12]	; (8002470 <__io_putchar+0x20>)
 8002462:	f004 fd3c 	bl	8006ede <HAL_UART_Transmit>

	return ch;
 8002466:	687b      	ldr	r3, [r7, #4]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	200004b0 	.word	0x200004b0

08002474 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	input_delay =1;
 800247c:	4b03      	ldr	r3, [pc, #12]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x18>)
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	200004fc 	.word	0x200004fc

08002490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002494:	b672      	cpsid	i
}
 8002496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002498:	e7fe      	b.n	8002498 <Error_Handler+0x8>
	...

0800249c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <HAL_MspInit+0x5c>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	4a14      	ldr	r2, [pc, #80]	; (80024f8 <HAL_MspInit+0x5c>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6193      	str	r3, [r2, #24]
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_MspInit+0x5c>)
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <HAL_MspInit+0x5c>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	4a0e      	ldr	r2, [pc, #56]	; (80024f8 <HAL_MspInit+0x5c>)
 80024c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c4:	61d3      	str	r3, [r2, #28]
 80024c6:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <HAL_MspInit+0x5c>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_MspInit+0x60>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	4a04      	ldr	r2, [pc, #16]	; (80024fc <HAL_MspInit+0x60>)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ee:	bf00      	nop
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40010000 	.word	0x40010000

08002500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 0310 	add.w	r3, r7, #16
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a28      	ldr	r2, [pc, #160]	; (80025bc <HAL_ADC_MspInit+0xbc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d149      	bne.n	80025b4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002520:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <HAL_ADC_MspInit+0xc0>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	4a26      	ldr	r2, [pc, #152]	; (80025c0 <HAL_ADC_MspInit+0xc0>)
 8002526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800252a:	6193      	str	r3, [r2, #24]
 800252c:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <HAL_ADC_MspInit+0xc0>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002538:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <HAL_ADC_MspInit+0xc0>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	4a20      	ldr	r2, [pc, #128]	; (80025c0 <HAL_ADC_MspInit+0xc0>)
 800253e:	f043 0304 	orr.w	r3, r3, #4
 8002542:	6193      	str	r3, [r2, #24]
 8002544:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <HAL_ADC_MspInit+0xc0>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002550:	23c0      	movs	r3, #192	; 0xc0
 8002552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002554:	2303      	movs	r3, #3
 8002556:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002558:	f107 0310 	add.w	r3, r7, #16
 800255c:	4619      	mov	r1, r3
 800255e:	4819      	ldr	r0, [pc, #100]	; (80025c4 <HAL_ADC_MspInit+0xc4>)
 8002560:	f001 fb84 	bl	8003c6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <HAL_ADC_MspInit+0xc8>)
 8002566:	4a19      	ldr	r2, [pc, #100]	; (80025cc <HAL_ADC_MspInit+0xcc>)
 8002568:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <HAL_ADC_MspInit+0xc8>)
 800256c:	2200      	movs	r2, #0
 800256e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002570:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_ADC_MspInit+0xc8>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002576:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <HAL_ADC_MspInit+0xc8>)
 8002578:	2280      	movs	r2, #128	; 0x80
 800257a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_ADC_MspInit+0xc8>)
 800257e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002582:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002584:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <HAL_ADC_MspInit+0xc8>)
 8002586:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800258a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800258c:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <HAL_ADC_MspInit+0xc8>)
 800258e:	2220      	movs	r2, #32
 8002590:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002592:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <HAL_ADC_MspInit+0xc8>)
 8002594:	2200      	movs	r2, #0
 8002596:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002598:	480b      	ldr	r0, [pc, #44]	; (80025c8 <HAL_ADC_MspInit+0xc8>)
 800259a:	f000 ff6f 	bl	800347c <HAL_DMA_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80025a4:	f7ff ff74 	bl	8002490 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <HAL_ADC_MspInit+0xc8>)
 80025ac:	621a      	str	r2, [r3, #32]
 80025ae:	4a06      	ldr	r2, [pc, #24]	; (80025c8 <HAL_ADC_MspInit+0xc8>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025b4:	bf00      	nop
 80025b6:	3720      	adds	r7, #32
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40012400 	.word	0x40012400
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40010800 	.word	0x40010800
 80025c8:	200003bc 	.word	0x200003bc
 80025cc:	40020008 	.word	0x40020008

080025d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a15      	ldr	r2, [pc, #84]	; (8002640 <HAL_I2C_MspInit+0x70>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d123      	bne.n	8002638 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <HAL_I2C_MspInit+0x74>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	4a13      	ldr	r2, [pc, #76]	; (8002644 <HAL_I2C_MspInit+0x74>)
 80025f6:	f043 0308 	orr.w	r3, r3, #8
 80025fa:	6193      	str	r3, [r2, #24]
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_I2C_MspInit+0x74>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002608:	23c0      	movs	r3, #192	; 0xc0
 800260a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800260c:	2312      	movs	r3, #18
 800260e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002614:	f107 0310 	add.w	r3, r7, #16
 8002618:	4619      	mov	r1, r3
 800261a:	480b      	ldr	r0, [pc, #44]	; (8002648 <HAL_I2C_MspInit+0x78>)
 800261c:	f001 fb26 	bl	8003c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <HAL_I2C_MspInit+0x74>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	4a07      	ldr	r2, [pc, #28]	; (8002644 <HAL_I2C_MspInit+0x74>)
 8002626:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800262a:	61d3      	str	r3, [r2, #28]
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_I2C_MspInit+0x74>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002638:	bf00      	nop
 800263a:	3720      	adds	r7, #32
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40005400 	.word	0x40005400
 8002644:	40021000 	.word	0x40021000
 8002648:	40010c00 	.word	0x40010c00

0800264c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <HAL_RTC_MspInit+0x3c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d110      	bne.n	8002680 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800265e:	f002 fca9 	bl	8004fb4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002662:	4b0a      	ldr	r3, [pc, #40]	; (800268c <HAL_RTC_MspInit+0x40>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4a09      	ldr	r2, [pc, #36]	; (800268c <HAL_RTC_MspInit+0x40>)
 8002668:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800266c:	61d3      	str	r3, [r2, #28]
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <HAL_RTC_MspInit+0x40>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <HAL_RTC_MspInit+0x44>)
 800267c:	2201      	movs	r2, #1
 800267e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002680:	bf00      	nop
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40002800 	.word	0x40002800
 800268c:	40021000 	.word	0x40021000
 8002690:	4242043c 	.word	0x4242043c

08002694 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0d      	ldr	r2, [pc, #52]	; (80026d8 <HAL_TIM_Base_MspInit+0x44>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d113      	bne.n	80026ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <HAL_TIM_Base_MspInit+0x48>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	4a0c      	ldr	r2, [pc, #48]	; (80026dc <HAL_TIM_Base_MspInit+0x48>)
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	61d3      	str	r3, [r2, #28]
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_TIM_Base_MspInit+0x48>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026be:	2200      	movs	r2, #0
 80026c0:	2100      	movs	r1, #0
 80026c2:	201d      	movs	r0, #29
 80026c4:	f000 fea3 	bl	800340e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026c8:	201d      	movs	r0, #29
 80026ca:	f000 febc 	bl	8003446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40021000 	.word	0x40021000

080026e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	f107 0310 	add.w	r3, r7, #16
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a15      	ldr	r2, [pc, #84]	; (8002750 <HAL_UART_MspInit+0x70>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d123      	bne.n	8002748 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002700:	4b14      	ldr	r3, [pc, #80]	; (8002754 <HAL_UART_MspInit+0x74>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	4a13      	ldr	r2, [pc, #76]	; (8002754 <HAL_UART_MspInit+0x74>)
 8002706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270a:	61d3      	str	r3, [r2, #28]
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_UART_MspInit+0x74>)
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_UART_MspInit+0x74>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	4a0d      	ldr	r2, [pc, #52]	; (8002754 <HAL_UART_MspInit+0x74>)
 800271e:	f043 0304 	orr.w	r3, r3, #4
 8002722:	6193      	str	r3, [r2, #24]
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_UART_MspInit+0x74>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002730:	230c      	movs	r3, #12
 8002732:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002738:	2302      	movs	r3, #2
 800273a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273c:	f107 0310 	add.w	r3, r7, #16
 8002740:	4619      	mov	r1, r3
 8002742:	4805      	ldr	r0, [pc, #20]	; (8002758 <HAL_UART_MspInit+0x78>)
 8002744:	f001 fa92 	bl	8003c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002748:	bf00      	nop
 800274a:	3720      	adds	r7, #32
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40004400 	.word	0x40004400
 8002754:	40021000 	.word	0x40021000
 8002758:	40010800 	.word	0x40010800

0800275c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <NMI_Handler+0x4>

08002762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002766:	e7fe      	b.n	8002766 <HardFault_Handler+0x4>

08002768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800276c:	e7fe      	b.n	800276c <MemManage_Handler+0x4>

0800276e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002772:	e7fe      	b.n	8002772 <BusFault_Handler+0x4>

08002774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002778:	e7fe      	b.n	8002778 <UsageFault_Handler+0x4>

0800277a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027a2:	f000 f951 	bl	8002a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <DMA1_Channel1_IRQHandler+0x10>)
 80027b2:	f000 ff1d 	bl	80035f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200003bc 	.word	0x200003bc

080027c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <TIM3_IRQHandler+0x10>)
 80027c6:	f003 ffe5 	bl	8006794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000468 	.word	0x20000468

080027d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80027d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027dc:	f001 fbfa 	bl	8003fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
	return 1;
 80027e8:	2301      	movs	r3, #1
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <_kill>:

int _kill(int pid, int sig)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027fc:	f004 fcda 	bl	80071b4 <__errno>
 8002800:	4603      	mov	r3, r0
 8002802:	2216      	movs	r2, #22
 8002804:	601a      	str	r2, [r3, #0]
	return -1;
 8002806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <_exit>:

void _exit (int status)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800281a:	f04f 31ff 	mov.w	r1, #4294967295
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff ffe7 	bl	80027f2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002824:	e7fe      	b.n	8002824 <_exit+0x12>

08002826 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e00a      	b.n	800284e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002838:	f3af 8000 	nop.w
 800283c:	4601      	mov	r1, r0
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	60ba      	str	r2, [r7, #8]
 8002844:	b2ca      	uxtb	r2, r1
 8002846:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3301      	adds	r3, #1
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	429a      	cmp	r2, r3
 8002854:	dbf0      	blt.n	8002838 <_read+0x12>
	}

return len;
 8002856:	687b      	ldr	r3, [r7, #4]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	e009      	b.n	8002886 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	60ba      	str	r2, [r7, #8]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fde8 	bl	8002450 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	3301      	adds	r3, #1
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	429a      	cmp	r2, r3
 800288c:	dbf1      	blt.n	8002872 <_write+0x12>
	}
	return len;
 800288e:	687b      	ldr	r3, [r7, #4]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <_close>:

int _close(int file)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	return -1;
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028be:	605a      	str	r2, [r3, #4]
	return 0;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <_isatty>:

int _isatty(int file)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	return 1;
 80028d4:	2301      	movs	r3, #1
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
	return 0;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002900:	4a14      	ldr	r2, [pc, #80]	; (8002954 <_sbrk+0x5c>)
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <_sbrk+0x60>)
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <_sbrk+0x64>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <_sbrk+0x64>)
 8002916:	4a12      	ldr	r2, [pc, #72]	; (8002960 <_sbrk+0x68>)
 8002918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <_sbrk+0x64>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	429a      	cmp	r2, r3
 8002926:	d207      	bcs.n	8002938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002928:	f004 fc44 	bl	80071b4 <__errno>
 800292c:	4603      	mov	r3, r0
 800292e:	220c      	movs	r2, #12
 8002930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002932:	f04f 33ff 	mov.w	r3, #4294967295
 8002936:	e009      	b.n	800294c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <_sbrk+0x64>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800293e:	4b07      	ldr	r3, [pc, #28]	; (800295c <_sbrk+0x64>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	4a05      	ldr	r2, [pc, #20]	; (800295c <_sbrk+0x64>)
 8002948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800294a:	68fb      	ldr	r3, [r7, #12]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20005000 	.word	0x20005000
 8002958:	00000400 	.word	0x00000400
 800295c:	2000058c 	.word	0x2000058c
 8002960:	200005c8 	.word	0x200005c8

08002964 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002970:	480c      	ldr	r0, [pc, #48]	; (80029a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002972:	490d      	ldr	r1, [pc, #52]	; (80029a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002978:	e002      	b.n	8002980 <LoopCopyDataInit>

0800297a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800297c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297e:	3304      	adds	r3, #4

08002980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002984:	d3f9      	bcc.n	800297a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002988:	4c0a      	ldr	r4, [pc, #40]	; (80029b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800298c:	e001      	b.n	8002992 <LoopFillZerobss>

0800298e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002990:	3204      	adds	r2, #4

08002992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002994:	d3fb      	bcc.n	800298e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002996:	f7ff ffe5 	bl	8002964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800299a:	f004 fc11 	bl	80071c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800299e:	f7fe fe6b 	bl	8001678 <main>
  bx lr
 80029a2:	4770      	bx	lr
  ldr r0, =_sdata
 80029a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a8:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 80029ac:	0800c1fc 	.word	0x0800c1fc
  ldr r2, =_sbss
 80029b0:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 80029b4:	200005c8 	.word	0x200005c8

080029b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029b8:	e7fe      	b.n	80029b8 <ADC1_2_IRQHandler>
	...

080029bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <HAL_Init+0x28>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <HAL_Init+0x28>)
 80029c6:	f043 0310 	orr.w	r3, r3, #16
 80029ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029cc:	2003      	movs	r0, #3
 80029ce:	f000 fd13 	bl	80033f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029d2:	2000      	movs	r0, #0
 80029d4:	f000 f808 	bl	80029e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029d8:	f7ff fd60 	bl	800249c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40022000 	.word	0x40022000

080029e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029f0:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_InitTick+0x54>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_InitTick+0x58>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	4619      	mov	r1, r3
 80029fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fd2b 	bl	8003462 <HAL_SYSTICK_Config>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e00e      	b.n	8002a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b0f      	cmp	r3, #15
 8002a1a:	d80a      	bhi.n	8002a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295
 8002a24:	f000 fcf3 	bl	800340e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a28:	4a06      	ldr	r2, [pc, #24]	; (8002a44 <HAL_InitTick+0x5c>)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e000      	b.n	8002a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000180 	.word	0x20000180
 8002a40:	20000188 	.word	0x20000188
 8002a44:	20000184 	.word	0x20000184

08002a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_IncTick+0x1c>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_IncTick+0x20>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4413      	add	r3, r2
 8002a58:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <HAL_IncTick+0x20>)
 8002a5a:	6013      	str	r3, [r2, #0]
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	20000188 	.word	0x20000188
 8002a68:	20000590 	.word	0x20000590

08002a6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a70:	4b02      	ldr	r3, [pc, #8]	; (8002a7c <HAL_GetTick+0x10>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	20000590 	.word	0x20000590

08002a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a88:	f7ff fff0 	bl	8002a6c <HAL_GetTick>
 8002a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d005      	beq.n	8002aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_Delay+0x44>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aa6:	bf00      	nop
 8002aa8:	f7ff ffe0 	bl	8002a6c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d8f7      	bhi.n	8002aa8 <HAL_Delay+0x28>
  {
  }
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000188 	.word	0x20000188

08002ac8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e0be      	b.n	8002c68 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d109      	bne.n	8002b0c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff fcfa 	bl	8002500 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 faff 	bl	8003110 <ADC_ConversionStop_Disable>
 8002b12:	4603      	mov	r3, r0
 8002b14:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f040 8099 	bne.w	8002c56 <HAL_ADC_Init+0x18e>
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f040 8095 	bne.w	8002c56 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b34:	f023 0302 	bic.w	r3, r3, #2
 8002b38:	f043 0202 	orr.w	r2, r3, #2
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b48:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	7b1b      	ldrb	r3, [r3, #12]
 8002b4e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b50:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b60:	d003      	beq.n	8002b6a <HAL_ADC_Init+0xa2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d102      	bne.n	8002b70 <HAL_ADC_Init+0xa8>
 8002b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b6e:	e000      	b.n	8002b72 <HAL_ADC_Init+0xaa>
 8002b70:	2300      	movs	r3, #0
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	7d1b      	ldrb	r3, [r3, #20]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d119      	bne.n	8002bb4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7b1b      	ldrb	r3, [r3, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d109      	bne.n	8002b9c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	035a      	lsls	r2, r3, #13
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	e00b      	b.n	8002bb4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	f043 0220 	orr.w	r2, r3, #32
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	f043 0201 	orr.w	r2, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	4b28      	ldr	r3, [pc, #160]	; (8002c70 <HAL_ADC_Init+0x1a8>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be4:	d003      	beq.n	8002bee <HAL_ADC_Init+0x126>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d104      	bne.n	8002bf8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	051b      	lsls	r3, r3, #20
 8002bf6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	4b18      	ldr	r3, [pc, #96]	; (8002c74 <HAL_ADC_Init+0x1ac>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d10b      	bne.n	8002c34 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c32:	e018      	b.n	8002c66 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	f023 0312 	bic.w	r3, r3, #18
 8002c3c:	f043 0210 	orr.w	r2, r3, #16
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c54:	e007      	b.n	8002c66 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	f043 0210 	orr.w	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	ffe1f7fd 	.word	0xffe1f7fd
 8002c74:	ff1f0efe 	.word	0xff1f0efe

08002c78 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a64      	ldr	r2, [pc, #400]	; (8002e20 <HAL_ADC_Start_DMA+0x1a8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d004      	beq.n	8002c9c <HAL_ADC_Start_DMA+0x24>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a63      	ldr	r2, [pc, #396]	; (8002e24 <HAL_ADC_Start_DMA+0x1ac>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d106      	bne.n	8002caa <HAL_ADC_Start_DMA+0x32>
 8002c9c:	4b60      	ldr	r3, [pc, #384]	; (8002e20 <HAL_ADC_Start_DMA+0x1a8>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f040 80b3 	bne.w	8002e10 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_Start_DMA+0x40>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e0ae      	b.n	8002e16 <HAL_ADC_Start_DMA+0x19e>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f9cb 	bl	800305c <ADC_Enable>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f040 809a 	bne.w	8002e06 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a4e      	ldr	r2, [pc, #312]	; (8002e24 <HAL_ADC_Start_DMA+0x1ac>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d105      	bne.n	8002cfc <HAL_ADC_Start_DMA+0x84>
 8002cf0:	4b4b      	ldr	r3, [pc, #300]	; (8002e20 <HAL_ADC_Start_DMA+0x1a8>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d115      	bne.n	8002d28 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d026      	beq.n	8002d64 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d26:	e01d      	b.n	8002d64 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a39      	ldr	r2, [pc, #228]	; (8002e20 <HAL_ADC_Start_DMA+0x1a8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d004      	beq.n	8002d48 <HAL_ADC_Start_DMA+0xd0>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a38      	ldr	r2, [pc, #224]	; (8002e24 <HAL_ADC_Start_DMA+0x1ac>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d10d      	bne.n	8002d64 <HAL_ADC_Start_DMA+0xec>
 8002d48:	4b35      	ldr	r3, [pc, #212]	; (8002e20 <HAL_ADC_Start_DMA+0x1a8>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d007      	beq.n	8002d64 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d006      	beq.n	8002d7e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	f023 0206 	bic.w	r2, r3, #6
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d7c:	e002      	b.n	8002d84 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4a25      	ldr	r2, [pc, #148]	; (8002e28 <HAL_ADC_Start_DMA+0x1b0>)
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	4a24      	ldr	r2, [pc, #144]	; (8002e2c <HAL_ADC_Start_DMA+0x1b4>)
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	4a23      	ldr	r2, [pc, #140]	; (8002e30 <HAL_ADC_Start_DMA+0x1b8>)
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0202 	mvn.w	r2, #2
 8002dac:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dbc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a18      	ldr	r0, [r3, #32]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	334c      	adds	r3, #76	; 0x4c
 8002dc8:	4619      	mov	r1, r3
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f000 fbaf 	bl	8003530 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ddc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002de0:	d108      	bne.n	8002df4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002df0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002df2:	e00f      	b.n	8002e14 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e02:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002e04:	e006      	b.n	8002e14 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002e0e:	e001      	b.n	8002e14 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40012400 	.word	0x40012400
 8002e24:	40012800 	.word	0x40012800
 8002e28:	08003193 	.word	0x08003193
 8002e2c:	0800320f 	.word	0x0800320f
 8002e30:	0800322b 	.word	0x0800322b

08002e34 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x20>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e0dc      	b.n	8003046 <HAL_ADC_ConfigChannel+0x1da>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b06      	cmp	r3, #6
 8002e9a:	d81c      	bhi.n	8002ed6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	3b05      	subs	r3, #5
 8002eae:	221f      	movs	r2, #31
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	4019      	ands	r1, r3
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3b05      	subs	r3, #5
 8002ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	635a      	str	r2, [r3, #52]	; 0x34
 8002ed4:	e03c      	b.n	8002f50 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b0c      	cmp	r3, #12
 8002edc:	d81c      	bhi.n	8002f18 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	3b23      	subs	r3, #35	; 0x23
 8002ef0:	221f      	movs	r2, #31
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	4019      	ands	r1, r3
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	3b23      	subs	r3, #35	; 0x23
 8002f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	631a      	str	r2, [r3, #48]	; 0x30
 8002f16:	e01b      	b.n	8002f50 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	3b41      	subs	r3, #65	; 0x41
 8002f2a:	221f      	movs	r2, #31
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	4019      	ands	r1, r3
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	3b41      	subs	r3, #65	; 0x41
 8002f44:	fa00 f203 	lsl.w	r2, r0, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b09      	cmp	r3, #9
 8002f56:	d91c      	bls.n	8002f92 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68d9      	ldr	r1, [r3, #12]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	3b1e      	subs	r3, #30
 8002f6a:	2207      	movs	r2, #7
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	4019      	ands	r1, r3
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6898      	ldr	r0, [r3, #8]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	3b1e      	subs	r3, #30
 8002f84:	fa00 f203 	lsl.w	r2, r0, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	60da      	str	r2, [r3, #12]
 8002f90:	e019      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6919      	ldr	r1, [r3, #16]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	2207      	movs	r2, #7
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	4019      	ands	r1, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6898      	ldr	r0, [r3, #8]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	fa00 f203 	lsl.w	r2, r0, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b10      	cmp	r3, #16
 8002fcc:	d003      	beq.n	8002fd6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002fd2:	2b11      	cmp	r3, #17
 8002fd4:	d132      	bne.n	800303c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a1d      	ldr	r2, [pc, #116]	; (8003050 <HAL_ADC_ConfigChannel+0x1e4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d125      	bne.n	800302c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d126      	bne.n	800303c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ffc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b10      	cmp	r3, #16
 8003004:	d11a      	bne.n	800303c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003006:	4b13      	ldr	r3, [pc, #76]	; (8003054 <HAL_ADC_ConfigChannel+0x1e8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a13      	ldr	r2, [pc, #76]	; (8003058 <HAL_ADC_ConfigChannel+0x1ec>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	0c9a      	lsrs	r2, r3, #18
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800301c:	e002      	b.n	8003024 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	3b01      	subs	r3, #1
 8003022:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f9      	bne.n	800301e <HAL_ADC_ConfigChannel+0x1b2>
 800302a:	e007      	b.n	800303c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003044:	7bfb      	ldrb	r3, [r7, #15]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr
 8003050:	40012400 	.word	0x40012400
 8003054:	20000180 	.word	0x20000180
 8003058:	431bde83 	.word	0x431bde83

0800305c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d040      	beq.n	80030fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800308a:	4b1f      	ldr	r3, [pc, #124]	; (8003108 <ADC_Enable+0xac>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1f      	ldr	r2, [pc, #124]	; (800310c <ADC_Enable+0xb0>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	0c9b      	lsrs	r3, r3, #18
 8003096:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003098:	e002      	b.n	80030a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	3b01      	subs	r3, #1
 800309e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f9      	bne.n	800309a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030a6:	f7ff fce1 	bl	8002a6c <HAL_GetTick>
 80030aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80030ac:	e01f      	b.n	80030ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030ae:	f7ff fcdd 	bl	8002a6c <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d918      	bls.n	80030ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d011      	beq.n	80030ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	f043 0210 	orr.w	r2, r3, #16
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	f043 0201 	orr.w	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e007      	b.n	80030fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d1d8      	bne.n	80030ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000180 	.word	0x20000180
 800310c:	431bde83 	.word	0x431bde83

08003110 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b01      	cmp	r3, #1
 8003128:	d12e      	bne.n	8003188 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0201 	bic.w	r2, r2, #1
 8003138:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800313a:	f7ff fc97 	bl	8002a6c <HAL_GetTick>
 800313e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003140:	e01b      	b.n	800317a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003142:	f7ff fc93 	bl	8002a6c <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d914      	bls.n	800317a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d10d      	bne.n	800317a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	f043 0210 	orr.w	r2, r3, #16
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	f043 0201 	orr.w	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e007      	b.n	800318a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d0dc      	beq.n	8003142 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d127      	bne.n	80031fc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031c6:	d115      	bne.n	80031f4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d111      	bne.n	80031f4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d105      	bne.n	80031f4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	f043 0201 	orr.w	r2, r3, #1
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f7ff fe1d 	bl	8002e34 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80031fa:	e004      	b.n	8003206 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	4798      	blx	r3
}
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b084      	sub	sp, #16
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f7ff fe12 	bl	8002e46 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	f043 0204 	orr.w	r2, r3, #4
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f7ff fe01 	bl	8002e58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800327c:	4013      	ands	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800328c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003292:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	60d3      	str	r3, [r2, #12]
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <__NVIC_GetPriorityGrouping+0x18>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	f003 0307 	and.w	r3, r3, #7
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	db0b      	blt.n	80032ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	f003 021f 	and.w	r2, r3, #31
 80032dc:	4906      	ldr	r1, [pc, #24]	; (80032f8 <__NVIC_EnableIRQ+0x34>)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	2001      	movs	r0, #1
 80032e6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	e000e100 	.word	0xe000e100

080032fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	6039      	str	r1, [r7, #0]
 8003306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330c:	2b00      	cmp	r3, #0
 800330e:	db0a      	blt.n	8003326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	b2da      	uxtb	r2, r3
 8003314:	490c      	ldr	r1, [pc, #48]	; (8003348 <__NVIC_SetPriority+0x4c>)
 8003316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331a:	0112      	lsls	r2, r2, #4
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	440b      	add	r3, r1
 8003320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003324:	e00a      	b.n	800333c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	b2da      	uxtb	r2, r3
 800332a:	4908      	ldr	r1, [pc, #32]	; (800334c <__NVIC_SetPriority+0x50>)
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	3b04      	subs	r3, #4
 8003334:	0112      	lsls	r2, r2, #4
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	440b      	add	r3, r1
 800333a:	761a      	strb	r2, [r3, #24]
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000e100 	.word	0xe000e100
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003350:	b480      	push	{r7}
 8003352:	b089      	sub	sp, #36	; 0x24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f1c3 0307 	rsb	r3, r3, #7
 800336a:	2b04      	cmp	r3, #4
 800336c:	bf28      	it	cs
 800336e:	2304      	movcs	r3, #4
 8003370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	3304      	adds	r3, #4
 8003376:	2b06      	cmp	r3, #6
 8003378:	d902      	bls.n	8003380 <NVIC_EncodePriority+0x30>
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3b03      	subs	r3, #3
 800337e:	e000      	b.n	8003382 <NVIC_EncodePriority+0x32>
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003384:	f04f 32ff 	mov.w	r2, #4294967295
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43da      	mvns	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	401a      	ands	r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003398:	f04f 31ff 	mov.w	r1, #4294967295
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	fa01 f303 	lsl.w	r3, r1, r3
 80033a2:	43d9      	mvns	r1, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a8:	4313      	orrs	r3, r2
         );
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3724      	adds	r7, #36	; 0x24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033c4:	d301      	bcc.n	80033ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033c6:	2301      	movs	r3, #1
 80033c8:	e00f      	b.n	80033ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ca:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <SysTick_Config+0x40>)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033d2:	210f      	movs	r1, #15
 80033d4:	f04f 30ff 	mov.w	r0, #4294967295
 80033d8:	f7ff ff90 	bl	80032fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <SysTick_Config+0x40>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033e2:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <SysTick_Config+0x40>)
 80033e4:	2207      	movs	r2, #7
 80033e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	e000e010 	.word	0xe000e010

080033f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ff2d 	bl	8003260 <__NVIC_SetPriorityGrouping>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	4603      	mov	r3, r0
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003420:	f7ff ff42 	bl	80032a8 <__NVIC_GetPriorityGrouping>
 8003424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	6978      	ldr	r0, [r7, #20]
 800342c:	f7ff ff90 	bl	8003350 <NVIC_EncodePriority>
 8003430:	4602      	mov	r2, r0
 8003432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff5f 	bl	80032fc <__NVIC_SetPriority>
}
 800343e:	bf00      	nop
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	4603      	mov	r3, r0
 800344e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff35 	bl	80032c4 <__NVIC_EnableIRQ>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff ffa2 	bl	80033b4 <SysTick_Config>
 8003470:	4603      	mov	r3, r0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e043      	b.n	800351a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	4b22      	ldr	r3, [pc, #136]	; (8003524 <HAL_DMA_Init+0xa8>)
 800349a:	4413      	add	r3, r2
 800349c:	4a22      	ldr	r2, [pc, #136]	; (8003528 <HAL_DMA_Init+0xac>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	009a      	lsls	r2, r3, #2
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a1f      	ldr	r2, [pc, #124]	; (800352c <HAL_DMA_Init+0xb0>)
 80034ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80034c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80034ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80034d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr
 8003524:	bffdfff8 	.word	0xbffdfff8
 8003528:	cccccccd 	.word	0xcccccccd
 800352c:	40020000 	.word	0x40020000

08003530 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_DMA_Start_IT+0x20>
 800354c:	2302      	movs	r3, #2
 800354e:	e04a      	b.n	80035e6 <HAL_DMA_Start_IT+0xb6>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800355e:	2b01      	cmp	r3, #1
 8003560:	d13a      	bne.n	80035d8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2202      	movs	r2, #2
 8003566:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f938 	bl	80037fc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 020e 	orr.w	r2, r2, #14
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	e00f      	b.n	80035c6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0204 	bic.w	r2, r2, #4
 80035b4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 020a 	orr.w	r2, r2, #10
 80035c4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0201 	orr.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	e005      	b.n	80035e4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80035e0:	2302      	movs	r3, #2
 80035e2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	2204      	movs	r2, #4
 800360e:	409a      	lsls	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d04f      	beq.n	80036b8 <HAL_DMA_IRQHandler+0xc8>
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d04a      	beq.n	80036b8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d107      	bne.n	8003640 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0204 	bic.w	r2, r2, #4
 800363e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a66      	ldr	r2, [pc, #408]	; (80037e0 <HAL_DMA_IRQHandler+0x1f0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d029      	beq.n	800369e <HAL_DMA_IRQHandler+0xae>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a65      	ldr	r2, [pc, #404]	; (80037e4 <HAL_DMA_IRQHandler+0x1f4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d022      	beq.n	800369a <HAL_DMA_IRQHandler+0xaa>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a63      	ldr	r2, [pc, #396]	; (80037e8 <HAL_DMA_IRQHandler+0x1f8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01a      	beq.n	8003694 <HAL_DMA_IRQHandler+0xa4>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a62      	ldr	r2, [pc, #392]	; (80037ec <HAL_DMA_IRQHandler+0x1fc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d012      	beq.n	800368e <HAL_DMA_IRQHandler+0x9e>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a60      	ldr	r2, [pc, #384]	; (80037f0 <HAL_DMA_IRQHandler+0x200>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00a      	beq.n	8003688 <HAL_DMA_IRQHandler+0x98>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a5f      	ldr	r2, [pc, #380]	; (80037f4 <HAL_DMA_IRQHandler+0x204>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d102      	bne.n	8003682 <HAL_DMA_IRQHandler+0x92>
 800367c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003680:	e00e      	b.n	80036a0 <HAL_DMA_IRQHandler+0xb0>
 8003682:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003686:	e00b      	b.n	80036a0 <HAL_DMA_IRQHandler+0xb0>
 8003688:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800368c:	e008      	b.n	80036a0 <HAL_DMA_IRQHandler+0xb0>
 800368e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003692:	e005      	b.n	80036a0 <HAL_DMA_IRQHandler+0xb0>
 8003694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003698:	e002      	b.n	80036a0 <HAL_DMA_IRQHandler+0xb0>
 800369a:	2340      	movs	r3, #64	; 0x40
 800369c:	e000      	b.n	80036a0 <HAL_DMA_IRQHandler+0xb0>
 800369e:	2304      	movs	r3, #4
 80036a0:	4a55      	ldr	r2, [pc, #340]	; (80037f8 <HAL_DMA_IRQHandler+0x208>)
 80036a2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8094 	beq.w	80037d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80036b6:	e08e      	b.n	80037d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	2202      	movs	r2, #2
 80036be:	409a      	lsls	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d056      	beq.n	8003776 <HAL_DMA_IRQHandler+0x186>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d051      	beq.n	8003776 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10b      	bne.n	80036f8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 020a 	bic.w	r2, r2, #10
 80036ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a38      	ldr	r2, [pc, #224]	; (80037e0 <HAL_DMA_IRQHandler+0x1f0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d029      	beq.n	8003756 <HAL_DMA_IRQHandler+0x166>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a37      	ldr	r2, [pc, #220]	; (80037e4 <HAL_DMA_IRQHandler+0x1f4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d022      	beq.n	8003752 <HAL_DMA_IRQHandler+0x162>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a35      	ldr	r2, [pc, #212]	; (80037e8 <HAL_DMA_IRQHandler+0x1f8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01a      	beq.n	800374c <HAL_DMA_IRQHandler+0x15c>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a34      	ldr	r2, [pc, #208]	; (80037ec <HAL_DMA_IRQHandler+0x1fc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d012      	beq.n	8003746 <HAL_DMA_IRQHandler+0x156>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a32      	ldr	r2, [pc, #200]	; (80037f0 <HAL_DMA_IRQHandler+0x200>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00a      	beq.n	8003740 <HAL_DMA_IRQHandler+0x150>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a31      	ldr	r2, [pc, #196]	; (80037f4 <HAL_DMA_IRQHandler+0x204>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d102      	bne.n	800373a <HAL_DMA_IRQHandler+0x14a>
 8003734:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003738:	e00e      	b.n	8003758 <HAL_DMA_IRQHandler+0x168>
 800373a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800373e:	e00b      	b.n	8003758 <HAL_DMA_IRQHandler+0x168>
 8003740:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003744:	e008      	b.n	8003758 <HAL_DMA_IRQHandler+0x168>
 8003746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800374a:	e005      	b.n	8003758 <HAL_DMA_IRQHandler+0x168>
 800374c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003750:	e002      	b.n	8003758 <HAL_DMA_IRQHandler+0x168>
 8003752:	2320      	movs	r3, #32
 8003754:	e000      	b.n	8003758 <HAL_DMA_IRQHandler+0x168>
 8003756:	2302      	movs	r3, #2
 8003758:	4a27      	ldr	r2, [pc, #156]	; (80037f8 <HAL_DMA_IRQHandler+0x208>)
 800375a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	2b00      	cmp	r3, #0
 800376a:	d034      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003774:	e02f      	b.n	80037d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	2208      	movs	r2, #8
 800377c:	409a      	lsls	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4013      	ands	r3, r2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d028      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x1e8>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d023      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 020e 	bic.w	r2, r2, #14
 800379e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a8:	2101      	movs	r1, #1
 80037aa:	fa01 f202 	lsl.w	r2, r1, r2
 80037ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	4798      	blx	r3
    }
  }
  return;
 80037d6:	bf00      	nop
 80037d8:	bf00      	nop
}
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40020008 	.word	0x40020008
 80037e4:	4002001c 	.word	0x4002001c
 80037e8:	40020030 	.word	0x40020030
 80037ec:	40020044 	.word	0x40020044
 80037f0:	40020058 	.word	0x40020058
 80037f4:	4002006c 	.word	0x4002006c
 80037f8:	40020000 	.word	0x40020000

080037fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f202 	lsl.w	r2, r1, r2
 8003818:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b10      	cmp	r3, #16
 8003828:	d108      	bne.n	800383c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800383a:	e007      	b.n	800384c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	60da      	str	r2, [r3, #12]
}
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr
	...

08003858 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003872:	4b2f      	ldr	r3, [pc, #188]	; (8003930 <HAL_FLASH_Program+0xd8>)
 8003874:	7e1b      	ldrb	r3, [r3, #24]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_FLASH_Program+0x26>
 800387a:	2302      	movs	r3, #2
 800387c:	e054      	b.n	8003928 <HAL_FLASH_Program+0xd0>
 800387e:	4b2c      	ldr	r3, [pc, #176]	; (8003930 <HAL_FLASH_Program+0xd8>)
 8003880:	2201      	movs	r2, #1
 8003882:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003884:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003888:	f000 f8b2 	bl	80039f0 <FLASH_WaitForLastOperation>
 800388c:	4603      	mov	r3, r0
 800388e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003890:	7dfb      	ldrb	r3, [r7, #23]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d144      	bne.n	8003920 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d102      	bne.n	80038a2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800389c:	2301      	movs	r3, #1
 800389e:	757b      	strb	r3, [r7, #21]
 80038a0:	e007      	b.n	80038b2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d102      	bne.n	80038ae <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80038a8:	2302      	movs	r3, #2
 80038aa:	757b      	strb	r3, [r7, #21]
 80038ac:	e001      	b.n	80038b2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80038ae:	2304      	movs	r3, #4
 80038b0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80038b2:	2300      	movs	r3, #0
 80038b4:	75bb      	strb	r3, [r7, #22]
 80038b6:	e02d      	b.n	8003914 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80038b8:	7dbb      	ldrb	r3, [r7, #22]
 80038ba:	005a      	lsls	r2, r3, #1
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	eb02 0c03 	add.w	ip, r2, r3
 80038c2:	7dbb      	ldrb	r3, [r7, #22]
 80038c4:	0119      	lsls	r1, r3, #4
 80038c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038ca:	f1c1 0620 	rsb	r6, r1, #32
 80038ce:	f1a1 0020 	sub.w	r0, r1, #32
 80038d2:	fa22 f401 	lsr.w	r4, r2, r1
 80038d6:	fa03 f606 	lsl.w	r6, r3, r6
 80038da:	4334      	orrs	r4, r6
 80038dc:	fa23 f000 	lsr.w	r0, r3, r0
 80038e0:	4304      	orrs	r4, r0
 80038e2:	fa23 f501 	lsr.w	r5, r3, r1
 80038e6:	b2a3      	uxth	r3, r4
 80038e8:	4619      	mov	r1, r3
 80038ea:	4660      	mov	r0, ip
 80038ec:	f000 f864 	bl	80039b8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038f4:	f000 f87c 	bl	80039f0 <FLASH_WaitForLastOperation>
 80038f8:	4603      	mov	r3, r0
 80038fa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80038fc:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <HAL_FLASH_Program+0xdc>)
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	4a0c      	ldr	r2, [pc, #48]	; (8003934 <HAL_FLASH_Program+0xdc>)
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003908:	7dfb      	ldrb	r3, [r7, #23]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d107      	bne.n	800391e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800390e:	7dbb      	ldrb	r3, [r7, #22]
 8003910:	3301      	adds	r3, #1
 8003912:	75bb      	strb	r3, [r7, #22]
 8003914:	7dba      	ldrb	r2, [r7, #22]
 8003916:	7d7b      	ldrb	r3, [r7, #21]
 8003918:	429a      	cmp	r2, r3
 800391a:	d3cd      	bcc.n	80038b8 <HAL_FLASH_Program+0x60>
 800391c:	e000      	b.n	8003920 <HAL_FLASH_Program+0xc8>
      {
        break;
 800391e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003920:	4b03      	ldr	r3, [pc, #12]	; (8003930 <HAL_FLASH_Program+0xd8>)
 8003922:	2200      	movs	r2, #0
 8003924:	761a      	strb	r2, [r3, #24]

  return status;
 8003926:	7dfb      	ldrb	r3, [r7, #23]
}
 8003928:	4618      	mov	r0, r3
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003930:	20000598 	.word	0x20000598
 8003934:	40022000 	.word	0x40022000

08003938 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003942:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <HAL_FLASH_Unlock+0x40>)
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00d      	beq.n	800396a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800394e:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <HAL_FLASH_Unlock+0x40>)
 8003950:	4a0a      	ldr	r2, [pc, #40]	; (800397c <HAL_FLASH_Unlock+0x44>)
 8003952:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003954:	4b08      	ldr	r3, [pc, #32]	; (8003978 <HAL_FLASH_Unlock+0x40>)
 8003956:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <HAL_FLASH_Unlock+0x48>)
 8003958:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800395a:	4b07      	ldr	r3, [pc, #28]	; (8003978 <HAL_FLASH_Unlock+0x40>)
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800396a:	79fb      	ldrb	r3, [r7, #7]
}
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40022000 	.word	0x40022000
 800397c:	45670123 	.word	0x45670123
 8003980:	cdef89ab 	.word	0xcdef89ab

08003984 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <HAL_FLASH_Lock+0x1c>)
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <HAL_FLASH_Lock+0x1c>)
 800398e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003992:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40022000 	.word	0x40022000

080039a4 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80039a8:	4b02      	ldr	r3, [pc, #8]	; (80039b4 <HAL_FLASH_GetError+0x10>)
 80039aa:	69db      	ldr	r3, [r3, #28]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr
 80039b4:	20000598 	.word	0x20000598

080039b8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <FLASH_Program_HalfWord+0x30>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80039ca:	4b08      	ldr	r3, [pc, #32]	; (80039ec <FLASH_Program_HalfWord+0x34>)
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	4a07      	ldr	r2, [pc, #28]	; (80039ec <FLASH_Program_HalfWord+0x34>)
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	887a      	ldrh	r2, [r7, #2]
 80039da:	801a      	strh	r2, [r3, #0]
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20000598 	.word	0x20000598
 80039ec:	40022000 	.word	0x40022000

080039f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80039f8:	f7ff f838 	bl	8002a6c <HAL_GetTick>
 80039fc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80039fe:	e010      	b.n	8003a22 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d00c      	beq.n	8003a22 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <FLASH_WaitForLastOperation+0x2e>
 8003a0e:	f7ff f82d 	bl	8002a6c <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d201      	bcs.n	8003a22 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e025      	b.n	8003a6e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <FLASH_WaitForLastOperation+0x88>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e8      	bne.n	8003a00 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <FLASH_WaitForLastOperation+0x88>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <FLASH_WaitForLastOperation+0x88>)
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a40:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <FLASH_WaitForLastOperation+0x88>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10b      	bne.n	8003a64 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <FLASH_WaitForLastOperation+0x88>)
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d105      	bne.n	8003a64 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003a58:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <FLASH_WaitForLastOperation+0x88>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003a64:	f000 f80a 	bl	8003a7c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40022000 	.word	0x40022000

08003a7c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003a86:	4b23      	ldr	r3, [pc, #140]	; (8003b14 <FLASH_SetErrorCode+0x98>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003a92:	4b21      	ldr	r3, [pc, #132]	; (8003b18 <FLASH_SetErrorCode+0x9c>)
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	f043 0302 	orr.w	r3, r3, #2
 8003a9a:	4a1f      	ldr	r2, [pc, #124]	; (8003b18 <FLASH_SetErrorCode+0x9c>)
 8003a9c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f043 0310 	orr.w	r3, r3, #16
 8003aa4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003aa6:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <FLASH_SetErrorCode+0x98>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d009      	beq.n	8003ac6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003ab2:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <FLASH_SetErrorCode+0x9c>)
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	4a17      	ldr	r2, [pc, #92]	; (8003b18 <FLASH_SetErrorCode+0x9c>)
 8003abc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f043 0304 	orr.w	r3, r3, #4
 8003ac4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <FLASH_SetErrorCode+0x98>)
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003ad2:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <FLASH_SetErrorCode+0x9c>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f043 0304 	orr.w	r3, r3, #4
 8003ada:	4a0f      	ldr	r2, [pc, #60]	; (8003b18 <FLASH_SetErrorCode+0x9c>)
 8003adc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003ade:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <FLASH_SetErrorCode+0x98>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	4a0c      	ldr	r2, [pc, #48]	; (8003b14 <FLASH_SetErrorCode+0x98>)
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f240 1201 	movw	r2, #257	; 0x101
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d106      	bne.n	8003b02 <FLASH_SetErrorCode+0x86>
 8003af4:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <FLASH_SetErrorCode+0x98>)
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	4a06      	ldr	r2, [pc, #24]	; (8003b14 <FLASH_SetErrorCode+0x98>)
 8003afa:	f023 0301 	bic.w	r3, r3, #1
 8003afe:	61d3      	str	r3, [r2, #28]
}  
 8003b00:	e002      	b.n	8003b08 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b02:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <FLASH_SetErrorCode+0x98>)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	60d3      	str	r3, [r2, #12]
}  
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40022000 	.word	0x40022000
 8003b18:	20000598 	.word	0x20000598

08003b1c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b2e:	4b2f      	ldr	r3, [pc, #188]	; (8003bec <HAL_FLASHEx_Erase+0xd0>)
 8003b30:	7e1b      	ldrb	r3, [r3, #24]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_FLASHEx_Erase+0x1e>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e053      	b.n	8003be2 <HAL_FLASHEx_Erase+0xc6>
 8003b3a:	4b2c      	ldr	r3, [pc, #176]	; (8003bec <HAL_FLASHEx_Erase+0xd0>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d116      	bne.n	8003b76 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b4c:	f7ff ff50 	bl	80039f0 <FLASH_WaitForLastOperation>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d141      	bne.n	8003bda <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003b56:	2001      	movs	r0, #1
 8003b58:	f000 f84c 	bl	8003bf4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b60:	f7ff ff46 	bl	80039f0 <FLASH_WaitForLastOperation>
 8003b64:	4603      	mov	r3, r0
 8003b66:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003b68:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <HAL_FLASHEx_Erase+0xd4>)
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	4a20      	ldr	r2, [pc, #128]	; (8003bf0 <HAL_FLASHEx_Erase+0xd4>)
 8003b6e:	f023 0304 	bic.w	r3, r3, #4
 8003b72:	6113      	str	r3, [r2, #16]
 8003b74:	e031      	b.n	8003bda <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b76:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b7a:	f7ff ff39 	bl	80039f0 <FLASH_WaitForLastOperation>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d12a      	bne.n	8003bda <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	f04f 32ff 	mov.w	r2, #4294967295
 8003b8a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	e019      	b.n	8003bc8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003b94:	68b8      	ldr	r0, [r7, #8]
 8003b96:	f000 f849 	bl	8003c2c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b9a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b9e:	f7ff ff27 	bl	80039f0 <FLASH_WaitForLastOperation>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <HAL_FLASHEx_Erase+0xd4>)
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	4a11      	ldr	r2, [pc, #68]	; (8003bf0 <HAL_FLASHEx_Erase+0xd4>)
 8003bac:	f023 0302 	bic.w	r3, r3, #2
 8003bb0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	601a      	str	r2, [r3, #0]
            break;
 8003bbe:	e00c      	b.n	8003bda <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bc6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	029a      	lsls	r2, r3, #10
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d3dc      	bcc.n	8003b94 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003bda:	4b04      	ldr	r3, [pc, #16]	; (8003bec <HAL_FLASHEx_Erase+0xd0>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	761a      	strb	r2, [r3, #24]

  return status;
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000598 	.word	0x20000598
 8003bf0:	40022000 	.word	0x40022000

08003bf4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003bfc:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <FLASH_MassErase+0x30>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <FLASH_MassErase+0x34>)
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	4a08      	ldr	r2, [pc, #32]	; (8003c28 <FLASH_MassErase+0x34>)
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <FLASH_MassErase+0x34>)
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	4a05      	ldr	r2, [pc, #20]	; (8003c28 <FLASH_MassErase+0x34>)
 8003c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c18:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr
 8003c24:	20000598 	.word	0x20000598
 8003c28:	40022000 	.word	0x40022000

08003c2c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <FLASH_PageErase+0x38>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <FLASH_PageErase+0x3c>)
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	4a0a      	ldr	r2, [pc, #40]	; (8003c68 <FLASH_PageErase+0x3c>)
 8003c40:	f043 0302 	orr.w	r3, r3, #2
 8003c44:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003c46:	4a08      	ldr	r2, [pc, #32]	; (8003c68 <FLASH_PageErase+0x3c>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c4c:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <FLASH_PageErase+0x3c>)
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	4a05      	ldr	r2, [pc, #20]	; (8003c68 <FLASH_PageErase+0x3c>)
 8003c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c56:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	20000598 	.word	0x20000598
 8003c68:	40022000 	.word	0x40022000

08003c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b08b      	sub	sp, #44	; 0x2c
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c76:	2300      	movs	r3, #0
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c7e:	e169      	b.n	8003f54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c80:	2201      	movs	r2, #1
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	f040 8158 	bne.w	8003f4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4a9a      	ldr	r2, [pc, #616]	; (8003f0c <HAL_GPIO_Init+0x2a0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d05e      	beq.n	8003d66 <HAL_GPIO_Init+0xfa>
 8003ca8:	4a98      	ldr	r2, [pc, #608]	; (8003f0c <HAL_GPIO_Init+0x2a0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d875      	bhi.n	8003d9a <HAL_GPIO_Init+0x12e>
 8003cae:	4a98      	ldr	r2, [pc, #608]	; (8003f10 <HAL_GPIO_Init+0x2a4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d058      	beq.n	8003d66 <HAL_GPIO_Init+0xfa>
 8003cb4:	4a96      	ldr	r2, [pc, #600]	; (8003f10 <HAL_GPIO_Init+0x2a4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d86f      	bhi.n	8003d9a <HAL_GPIO_Init+0x12e>
 8003cba:	4a96      	ldr	r2, [pc, #600]	; (8003f14 <HAL_GPIO_Init+0x2a8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d052      	beq.n	8003d66 <HAL_GPIO_Init+0xfa>
 8003cc0:	4a94      	ldr	r2, [pc, #592]	; (8003f14 <HAL_GPIO_Init+0x2a8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d869      	bhi.n	8003d9a <HAL_GPIO_Init+0x12e>
 8003cc6:	4a94      	ldr	r2, [pc, #592]	; (8003f18 <HAL_GPIO_Init+0x2ac>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d04c      	beq.n	8003d66 <HAL_GPIO_Init+0xfa>
 8003ccc:	4a92      	ldr	r2, [pc, #584]	; (8003f18 <HAL_GPIO_Init+0x2ac>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d863      	bhi.n	8003d9a <HAL_GPIO_Init+0x12e>
 8003cd2:	4a92      	ldr	r2, [pc, #584]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d046      	beq.n	8003d66 <HAL_GPIO_Init+0xfa>
 8003cd8:	4a90      	ldr	r2, [pc, #576]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d85d      	bhi.n	8003d9a <HAL_GPIO_Init+0x12e>
 8003cde:	2b12      	cmp	r3, #18
 8003ce0:	d82a      	bhi.n	8003d38 <HAL_GPIO_Init+0xcc>
 8003ce2:	2b12      	cmp	r3, #18
 8003ce4:	d859      	bhi.n	8003d9a <HAL_GPIO_Init+0x12e>
 8003ce6:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <HAL_GPIO_Init+0x80>)
 8003ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cec:	08003d67 	.word	0x08003d67
 8003cf0:	08003d41 	.word	0x08003d41
 8003cf4:	08003d53 	.word	0x08003d53
 8003cf8:	08003d95 	.word	0x08003d95
 8003cfc:	08003d9b 	.word	0x08003d9b
 8003d00:	08003d9b 	.word	0x08003d9b
 8003d04:	08003d9b 	.word	0x08003d9b
 8003d08:	08003d9b 	.word	0x08003d9b
 8003d0c:	08003d9b 	.word	0x08003d9b
 8003d10:	08003d9b 	.word	0x08003d9b
 8003d14:	08003d9b 	.word	0x08003d9b
 8003d18:	08003d9b 	.word	0x08003d9b
 8003d1c:	08003d9b 	.word	0x08003d9b
 8003d20:	08003d9b 	.word	0x08003d9b
 8003d24:	08003d9b 	.word	0x08003d9b
 8003d28:	08003d9b 	.word	0x08003d9b
 8003d2c:	08003d9b 	.word	0x08003d9b
 8003d30:	08003d49 	.word	0x08003d49
 8003d34:	08003d5d 	.word	0x08003d5d
 8003d38:	4a79      	ldr	r2, [pc, #484]	; (8003f20 <HAL_GPIO_Init+0x2b4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d3e:	e02c      	b.n	8003d9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	623b      	str	r3, [r7, #32]
          break;
 8003d46:	e029      	b.n	8003d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	623b      	str	r3, [r7, #32]
          break;
 8003d50:	e024      	b.n	8003d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	3308      	adds	r3, #8
 8003d58:	623b      	str	r3, [r7, #32]
          break;
 8003d5a:	e01f      	b.n	8003d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	330c      	adds	r3, #12
 8003d62:	623b      	str	r3, [r7, #32]
          break;
 8003d64:	e01a      	b.n	8003d9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d6e:	2304      	movs	r3, #4
 8003d70:	623b      	str	r3, [r7, #32]
          break;
 8003d72:	e013      	b.n	8003d9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d105      	bne.n	8003d88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d7c:	2308      	movs	r3, #8
 8003d7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	611a      	str	r2, [r3, #16]
          break;
 8003d86:	e009      	b.n	8003d9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d88:	2308      	movs	r3, #8
 8003d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	615a      	str	r2, [r3, #20]
          break;
 8003d92:	e003      	b.n	8003d9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d94:	2300      	movs	r3, #0
 8003d96:	623b      	str	r3, [r7, #32]
          break;
 8003d98:	e000      	b.n	8003d9c <HAL_GPIO_Init+0x130>
          break;
 8003d9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2bff      	cmp	r3, #255	; 0xff
 8003da0:	d801      	bhi.n	8003da6 <HAL_GPIO_Init+0x13a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	e001      	b.n	8003daa <HAL_GPIO_Init+0x13e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3304      	adds	r3, #4
 8003daa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2bff      	cmp	r3, #255	; 0xff
 8003db0:	d802      	bhi.n	8003db8 <HAL_GPIO_Init+0x14c>
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	e002      	b.n	8003dbe <HAL_GPIO_Init+0x152>
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	3b08      	subs	r3, #8
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	210f      	movs	r1, #15
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	401a      	ands	r2, r3
 8003dd0:	6a39      	ldr	r1, [r7, #32]
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80b1 	beq.w	8003f4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003dec:	4b4d      	ldr	r3, [pc, #308]	; (8003f24 <HAL_GPIO_Init+0x2b8>)
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	4a4c      	ldr	r2, [pc, #304]	; (8003f24 <HAL_GPIO_Init+0x2b8>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6193      	str	r3, [r2, #24]
 8003df8:	4b4a      	ldr	r3, [pc, #296]	; (8003f24 <HAL_GPIO_Init+0x2b8>)
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e04:	4a48      	ldr	r2, [pc, #288]	; (8003f28 <HAL_GPIO_Init+0x2bc>)
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	089b      	lsrs	r3, r3, #2
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	220f      	movs	r2, #15
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4013      	ands	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a40      	ldr	r2, [pc, #256]	; (8003f2c <HAL_GPIO_Init+0x2c0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <HAL_GPIO_Init+0x1ec>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a3f      	ldr	r2, [pc, #252]	; (8003f30 <HAL_GPIO_Init+0x2c4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00d      	beq.n	8003e54 <HAL_GPIO_Init+0x1e8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a3e      	ldr	r2, [pc, #248]	; (8003f34 <HAL_GPIO_Init+0x2c8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d007      	beq.n	8003e50 <HAL_GPIO_Init+0x1e4>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3d      	ldr	r2, [pc, #244]	; (8003f38 <HAL_GPIO_Init+0x2cc>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d101      	bne.n	8003e4c <HAL_GPIO_Init+0x1e0>
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e006      	b.n	8003e5a <HAL_GPIO_Init+0x1ee>
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	e004      	b.n	8003e5a <HAL_GPIO_Init+0x1ee>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e002      	b.n	8003e5a <HAL_GPIO_Init+0x1ee>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <HAL_GPIO_Init+0x1ee>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5c:	f002 0203 	and.w	r2, r2, #3
 8003e60:	0092      	lsls	r2, r2, #2
 8003e62:	4093      	lsls	r3, r2
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e6a:	492f      	ldr	r1, [pc, #188]	; (8003f28 <HAL_GPIO_Init+0x2bc>)
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	089b      	lsrs	r3, r3, #2
 8003e70:	3302      	adds	r3, #2
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d006      	beq.n	8003e92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e84:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	492c      	ldr	r1, [pc, #176]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	600b      	str	r3, [r1, #0]
 8003e90:	e006      	b.n	8003ea0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e92:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	4928      	ldr	r1, [pc, #160]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d006      	beq.n	8003eba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003eac:	4b23      	ldr	r3, [pc, #140]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	4922      	ldr	r1, [pc, #136]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	604b      	str	r3, [r1, #4]
 8003eb8:	e006      	b.n	8003ec8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003eba:	4b20      	ldr	r3, [pc, #128]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	491e      	ldr	r1, [pc, #120]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d006      	beq.n	8003ee2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ed4:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	4918      	ldr	r1, [pc, #96]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	608b      	str	r3, [r1, #8]
 8003ee0:	e006      	b.n	8003ef0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	4914      	ldr	r1, [pc, #80]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d021      	beq.n	8003f40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003efc:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	490e      	ldr	r1, [pc, #56]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60cb      	str	r3, [r1, #12]
 8003f08:	e021      	b.n	8003f4e <HAL_GPIO_Init+0x2e2>
 8003f0a:	bf00      	nop
 8003f0c:	10320000 	.word	0x10320000
 8003f10:	10310000 	.word	0x10310000
 8003f14:	10220000 	.word	0x10220000
 8003f18:	10210000 	.word	0x10210000
 8003f1c:	10120000 	.word	0x10120000
 8003f20:	10110000 	.word	0x10110000
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40010000 	.word	0x40010000
 8003f2c:	40010800 	.word	0x40010800
 8003f30:	40010c00 	.word	0x40010c00
 8003f34:	40011000 	.word	0x40011000
 8003f38:	40011400 	.word	0x40011400
 8003f3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_GPIO_Init+0x304>)
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	43db      	mvns	r3, r3
 8003f48:	4909      	ldr	r1, [pc, #36]	; (8003f70 <HAL_GPIO_Init+0x304>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	3301      	adds	r3, #1
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f47f ae8e 	bne.w	8003c80 <HAL_GPIO_Init+0x14>
  }
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	372c      	adds	r7, #44	; 0x2c
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr
 8003f70:	40010400 	.word	0x40010400

08003f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	887b      	ldrh	r3, [r7, #2]
 8003f86:	4013      	ands	r3, r2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
 8003f90:	e001      	b.n	8003f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	460b      	mov	r3, r1
 8003fac:	807b      	strh	r3, [r7, #2]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fb2:	787b      	ldrb	r3, [r7, #1]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fb8:	887a      	ldrh	r2, [r7, #2]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fbe:	e003      	b.n	8003fc8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fc0:	887b      	ldrh	r3, [r7, #2]
 8003fc2:	041a      	lsls	r2, r3, #16
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	611a      	str	r2, [r3, #16]
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr
	...

08003fd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fde:	4b08      	ldr	r3, [pc, #32]	; (8004000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d006      	beq.n	8003ff8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fea:	4a05      	ldr	r2, [pc, #20]	; (8004000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ff0:	88fb      	ldrh	r3, [r7, #6]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 f806 	bl	8004004 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40010400 	.word	0x40010400

08004004 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr

08004018 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e12b      	b.n	8004282 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7fe fac6 	bl	80025d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2224      	movs	r2, #36	; 0x24
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800406a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800407a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800407c:	f001 fb7a 	bl	8005774 <HAL_RCC_GetPCLK1Freq>
 8004080:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4a81      	ldr	r2, [pc, #516]	; (800428c <HAL_I2C_Init+0x274>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d807      	bhi.n	800409c <HAL_I2C_Init+0x84>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4a80      	ldr	r2, [pc, #512]	; (8004290 <HAL_I2C_Init+0x278>)
 8004090:	4293      	cmp	r3, r2
 8004092:	bf94      	ite	ls
 8004094:	2301      	movls	r3, #1
 8004096:	2300      	movhi	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e006      	b.n	80040aa <HAL_I2C_Init+0x92>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4a7d      	ldr	r2, [pc, #500]	; (8004294 <HAL_I2C_Init+0x27c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	bf94      	ite	ls
 80040a4:	2301      	movls	r3, #1
 80040a6:	2300      	movhi	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e0e7      	b.n	8004282 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4a78      	ldr	r2, [pc, #480]	; (8004298 <HAL_I2C_Init+0x280>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	0c9b      	lsrs	r3, r3, #18
 80040bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4a6a      	ldr	r2, [pc, #424]	; (800428c <HAL_I2C_Init+0x274>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d802      	bhi.n	80040ec <HAL_I2C_Init+0xd4>
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	3301      	adds	r3, #1
 80040ea:	e009      	b.n	8004100 <HAL_I2C_Init+0xe8>
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	4a69      	ldr	r2, [pc, #420]	; (800429c <HAL_I2C_Init+0x284>)
 80040f8:	fba2 2303 	umull	r2, r3, r2, r3
 80040fc:	099b      	lsrs	r3, r3, #6
 80040fe:	3301      	adds	r3, #1
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	430b      	orrs	r3, r1
 8004106:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004112:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	495c      	ldr	r1, [pc, #368]	; (800428c <HAL_I2C_Init+0x274>)
 800411c:	428b      	cmp	r3, r1
 800411e:	d819      	bhi.n	8004154 <HAL_I2C_Init+0x13c>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	1e59      	subs	r1, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	fbb1 f3f3 	udiv	r3, r1, r3
 800412e:	1c59      	adds	r1, r3, #1
 8004130:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004134:	400b      	ands	r3, r1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_I2C_Init+0x138>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	1e59      	subs	r1, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	fbb1 f3f3 	udiv	r3, r1, r3
 8004148:	3301      	adds	r3, #1
 800414a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800414e:	e051      	b.n	80041f4 <HAL_I2C_Init+0x1dc>
 8004150:	2304      	movs	r3, #4
 8004152:	e04f      	b.n	80041f4 <HAL_I2C_Init+0x1dc>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d111      	bne.n	8004180 <HAL_I2C_Init+0x168>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	1e58      	subs	r0, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	440b      	add	r3, r1
 800416a:	fbb0 f3f3 	udiv	r3, r0, r3
 800416e:	3301      	adds	r3, #1
 8004170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004174:	2b00      	cmp	r3, #0
 8004176:	bf0c      	ite	eq
 8004178:	2301      	moveq	r3, #1
 800417a:	2300      	movne	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	e012      	b.n	80041a6 <HAL_I2C_Init+0x18e>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	1e58      	subs	r0, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6859      	ldr	r1, [r3, #4]
 8004188:	460b      	mov	r3, r1
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	0099      	lsls	r1, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	fbb0 f3f3 	udiv	r3, r0, r3
 8004196:	3301      	adds	r3, #1
 8004198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419c:	2b00      	cmp	r3, #0
 800419e:	bf0c      	ite	eq
 80041a0:	2301      	moveq	r3, #1
 80041a2:	2300      	movne	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_I2C_Init+0x196>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e022      	b.n	80041f4 <HAL_I2C_Init+0x1dc>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10e      	bne.n	80041d4 <HAL_I2C_Init+0x1bc>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1e58      	subs	r0, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6859      	ldr	r1, [r3, #4]
 80041be:	460b      	mov	r3, r1
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	440b      	add	r3, r1
 80041c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041c8:	3301      	adds	r3, #1
 80041ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d2:	e00f      	b.n	80041f4 <HAL_I2C_Init+0x1dc>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	1e58      	subs	r0, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6859      	ldr	r1, [r3, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	0099      	lsls	r1, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ea:	3301      	adds	r3, #1
 80041ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	6809      	ldr	r1, [r1, #0]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69da      	ldr	r2, [r3, #28]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004222:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6911      	ldr	r1, [r2, #16]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68d2      	ldr	r2, [r2, #12]
 800422e:	4311      	orrs	r1, r2
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	430b      	orrs	r3, r1
 8004236:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	000186a0 	.word	0x000186a0
 8004290:	001e847f 	.word	0x001e847f
 8004294:	003d08ff 	.word	0x003d08ff
 8004298:	431bde83 	.word	0x431bde83
 800429c:	10624dd3 	.word	0x10624dd3

080042a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	461a      	mov	r2, r3
 80042ac:	460b      	mov	r3, r1
 80042ae:	817b      	strh	r3, [r7, #10]
 80042b0:	4613      	mov	r3, r2
 80042b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042b4:	f7fe fbda 	bl	8002a6c <HAL_GetTick>
 80042b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	f040 80e0 	bne.w	8004488 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	2319      	movs	r3, #25
 80042ce:	2201      	movs	r2, #1
 80042d0:	4970      	ldr	r1, [pc, #448]	; (8004494 <HAL_I2C_Master_Transmit+0x1f4>)
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 fc92 	bl	8004bfc <I2C_WaitOnFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042de:	2302      	movs	r3, #2
 80042e0:	e0d3      	b.n	800448a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_I2C_Master_Transmit+0x50>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e0cc      	b.n	800448a <HAL_I2C_Master_Transmit+0x1ea>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b01      	cmp	r3, #1
 8004304:	d007      	beq.n	8004316 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0201 	orr.w	r2, r2, #1
 8004314:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004324:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2221      	movs	r2, #33	; 0x21
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2210      	movs	r2, #16
 8004332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	893a      	ldrh	r2, [r7, #8]
 8004346:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4a50      	ldr	r2, [pc, #320]	; (8004498 <HAL_I2C_Master_Transmit+0x1f8>)
 8004356:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004358:	8979      	ldrh	r1, [r7, #10]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	6a3a      	ldr	r2, [r7, #32]
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 fafc 	bl	800495c <I2C_MasterRequestWrite>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e08d      	b.n	800448a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800436e:	2300      	movs	r3, #0
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004384:	e066      	b.n	8004454 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	6a39      	ldr	r1, [r7, #32]
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 fd0c 	bl	8004da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00d      	beq.n	80043b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	2b04      	cmp	r3, #4
 800439c:	d107      	bne.n	80043ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e06b      	b.n	800448a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	781a      	ldrb	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d11b      	bne.n	8004428 <HAL_I2C_Master_Transmit+0x188>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d017      	beq.n	8004428 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	781a      	ldrb	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	6a39      	ldr	r1, [r7, #32]
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 fcfc 	bl	8004e2a <I2C_WaitOnBTFFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00d      	beq.n	8004454 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	2b04      	cmp	r3, #4
 800443e:	d107      	bne.n	8004450 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800444e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e01a      	b.n	800448a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004458:	2b00      	cmp	r3, #0
 800445a:	d194      	bne.n	8004386 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800446a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	e000      	b.n	800448a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004488:	2302      	movs	r3, #2
  }
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	00100002 	.word	0x00100002
 8004498:	ffff0000 	.word	0xffff0000

0800449c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08c      	sub	sp, #48	; 0x30
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	461a      	mov	r2, r3
 80044a8:	460b      	mov	r3, r1
 80044aa:	817b      	strh	r3, [r7, #10]
 80044ac:	4613      	mov	r3, r2
 80044ae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044b4:	f7fe fada 	bl	8002a6c <HAL_GetTick>
 80044b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	f040 823f 	bne.w	8004946 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	2319      	movs	r3, #25
 80044ce:	2201      	movs	r2, #1
 80044d0:	497f      	ldr	r1, [pc, #508]	; (80046d0 <HAL_I2C_Master_Receive+0x234>)
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 fb92 	bl	8004bfc <I2C_WaitOnFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80044de:	2302      	movs	r3, #2
 80044e0:	e232      	b.n	8004948 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_I2C_Master_Receive+0x54>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e22b      	b.n	8004948 <HAL_I2C_Master_Receive+0x4ac>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b01      	cmp	r3, #1
 8004504:	d007      	beq.n	8004516 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0201 	orr.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004524:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2222      	movs	r2, #34	; 0x22
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2210      	movs	r2, #16
 8004532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	893a      	ldrh	r2, [r7, #8]
 8004546:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4a5f      	ldr	r2, [pc, #380]	; (80046d4 <HAL_I2C_Master_Receive+0x238>)
 8004556:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004558:	8979      	ldrh	r1, [r7, #10]
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 fa7e 	bl	8004a60 <I2C_MasterRequestRead>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e1ec      	b.n	8004948 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004572:	2b00      	cmp	r3, #0
 8004574:	d113      	bne.n	800459e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	61fb      	str	r3, [r7, #28]
 800458a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	e1c0      	b.n	8004920 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d11e      	bne.n	80045e4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045b6:	b672      	cpsid	i
}
 80045b8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ba:	2300      	movs	r3, #0
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	61bb      	str	r3, [r7, #24]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80045e0:	b662      	cpsie	i
}
 80045e2:	e035      	b.n	8004650 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d11e      	bne.n	800462a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045fc:	b672      	cpsid	i
}
 80045fe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004624:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004626:	b662      	cpsie	i
}
 8004628:	e012      	b.n	8004650 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004638:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800463a:	2300      	movs	r3, #0
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004650:	e166      	b.n	8004920 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004656:	2b03      	cmp	r3, #3
 8004658:	f200 811f 	bhi.w	800489a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004660:	2b01      	cmp	r3, #1
 8004662:	d123      	bne.n	80046ac <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004666:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 fc1f 	bl	8004eac <I2C_WaitOnRXNEFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e167      	b.n	8004948 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046aa:	e139      	b.n	8004920 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d152      	bne.n	800475a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	2200      	movs	r2, #0
 80046bc:	4906      	ldr	r1, [pc, #24]	; (80046d8 <HAL_I2C_Master_Receive+0x23c>)
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fa9c 	bl	8004bfc <I2C_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d008      	beq.n	80046dc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e13c      	b.n	8004948 <HAL_I2C_Master_Receive+0x4ac>
 80046ce:	bf00      	nop
 80046d0:	00100002 	.word	0x00100002
 80046d4:	ffff0000 	.word	0xffff0000
 80046d8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80046dc:	b672      	cpsid	i
}
 80046de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004722:	b662      	cpsie	i
}
 8004724:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004742:	3b01      	subs	r3, #1
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004758:	e0e2      	b.n	8004920 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	2200      	movs	r2, #0
 8004762:	497b      	ldr	r1, [pc, #492]	; (8004950 <HAL_I2C_Master_Receive+0x4b4>)
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 fa49 	bl	8004bfc <I2C_WaitOnFlagUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0e9      	b.n	8004948 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004782:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004784:	b672      	cpsid	i
}
 8004786:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80047ba:	4b66      	ldr	r3, [pc, #408]	; (8004954 <HAL_I2C_Master_Receive+0x4b8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	08db      	lsrs	r3, r3, #3
 80047c0:	4a65      	ldr	r2, [pc, #404]	; (8004958 <HAL_I2C_Master_Receive+0x4bc>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	0a1a      	lsrs	r2, r3, #8
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	00da      	lsls	r2, r3, #3
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d118      	bne.n	8004812 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f043 0220 	orr.w	r2, r3, #32
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004802:	b662      	cpsie	i
}
 8004804:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e09a      	b.n	8004948 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b04      	cmp	r3, #4
 800481e:	d1d9      	bne.n	80047d4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004862:	b662      	cpsie	i
}
 8004864:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004898:	e042      	b.n	8004920 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 fb04 	bl	8004eac <I2C_WaitOnRXNEFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e04c      	b.n	8004948 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d118      	bne.n	8004920 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490a:	3b01      	subs	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004924:	2b00      	cmp	r3, #0
 8004926:	f47f ae94 	bne.w	8004652 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2220      	movs	r2, #32
 800492e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	e000      	b.n	8004948 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8004946:	2302      	movs	r3, #2
  }
}
 8004948:	4618      	mov	r0, r3
 800494a:	3728      	adds	r7, #40	; 0x28
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	00010004 	.word	0x00010004
 8004954:	20000180 	.word	0x20000180
 8004958:	14f8b589 	.word	0x14f8b589

0800495c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	607a      	str	r2, [r7, #4]
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	460b      	mov	r3, r1
 800496a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2b08      	cmp	r3, #8
 8004976:	d006      	beq.n	8004986 <I2C_MasterRequestWrite+0x2a>
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d003      	beq.n	8004986 <I2C_MasterRequestWrite+0x2a>
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004984:	d108      	bne.n	8004998 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	e00b      	b.n	80049b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499c:	2b12      	cmp	r3, #18
 800499e:	d107      	bne.n	80049b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f91d 	bl	8004bfc <I2C_WaitOnFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00d      	beq.n	80049e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d6:	d103      	bne.n	80049e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e035      	b.n	8004a50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049ec:	d108      	bne.n	8004a00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049ee:	897b      	ldrh	r3, [r7, #10]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049fc:	611a      	str	r2, [r3, #16]
 80049fe:	e01b      	b.n	8004a38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a00:	897b      	ldrh	r3, [r7, #10]
 8004a02:	11db      	asrs	r3, r3, #7
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	f003 0306 	and.w	r3, r3, #6
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	f063 030f 	orn	r3, r3, #15
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	490e      	ldr	r1, [pc, #56]	; (8004a58 <I2C_MasterRequestWrite+0xfc>)
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f943 	bl	8004caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e010      	b.n	8004a50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a2e:	897b      	ldrh	r3, [r7, #10]
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	4907      	ldr	r1, [pc, #28]	; (8004a5c <I2C_MasterRequestWrite+0x100>)
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 f933 	bl	8004caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e000      	b.n	8004a50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	00010008 	.word	0x00010008
 8004a5c:	00010002 	.word	0x00010002

08004a60 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	607a      	str	r2, [r7, #4]
 8004a6a:	603b      	str	r3, [r7, #0]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a84:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d006      	beq.n	8004a9a <I2C_MasterRequestRead+0x3a>
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d003      	beq.n	8004a9a <I2C_MasterRequestRead+0x3a>
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a98:	d108      	bne.n	8004aac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	e00b      	b.n	8004ac4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	2b11      	cmp	r3, #17
 8004ab2:	d107      	bne.n	8004ac4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ac2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f893 	bl	8004bfc <I2C_WaitOnFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00d      	beq.n	8004af8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aea:	d103      	bne.n	8004af4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004af2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e079      	b.n	8004bec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b00:	d108      	bne.n	8004b14 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b02:	897b      	ldrh	r3, [r7, #10]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	611a      	str	r2, [r3, #16]
 8004b12:	e05f      	b.n	8004bd4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b14:	897b      	ldrh	r3, [r7, #10]
 8004b16:	11db      	asrs	r3, r3, #7
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	f003 0306 	and.w	r3, r3, #6
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f063 030f 	orn	r3, r3, #15
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	4930      	ldr	r1, [pc, #192]	; (8004bf4 <I2C_MasterRequestRead+0x194>)
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f8b9 	bl	8004caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e054      	b.n	8004bec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b42:	897b      	ldrh	r3, [r7, #10]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	4929      	ldr	r1, [pc, #164]	; (8004bf8 <I2C_MasterRequestRead+0x198>)
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f8a9 	bl	8004caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e044      	b.n	8004bec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	613b      	str	r3, [r7, #16]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b86:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f831 	bl	8004bfc <I2C_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00d      	beq.n	8004bbc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bae:	d103      	bne.n	8004bb8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e017      	b.n	8004bec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004bbc:	897b      	ldrh	r3, [r7, #10]
 8004bbe:	11db      	asrs	r3, r3, #7
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	f003 0306 	and.w	r3, r3, #6
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	f063 030e 	orn	r3, r3, #14
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	4907      	ldr	r1, [pc, #28]	; (8004bf8 <I2C_MasterRequestRead+0x198>)
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 f865 	bl	8004caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	00010008 	.word	0x00010008
 8004bf8:	00010002 	.word	0x00010002

08004bfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c0c:	e025      	b.n	8004c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c14:	d021      	beq.n	8004c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c16:	f7fd ff29 	bl	8002a6c <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d302      	bcc.n	8004c2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d116      	bne.n	8004c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	f043 0220 	orr.w	r2, r3, #32
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e023      	b.n	8004ca2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	0c1b      	lsrs	r3, r3, #16
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d10d      	bne.n	8004c80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	43da      	mvns	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	bf0c      	ite	eq
 8004c76:	2301      	moveq	r3, #1
 8004c78:	2300      	movne	r3, #0
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	e00c      	b.n	8004c9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	43da      	mvns	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	bf0c      	ite	eq
 8004c92:	2301      	moveq	r3, #1
 8004c94:	2300      	movne	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d0b6      	beq.n	8004c0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
 8004cb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cb8:	e051      	b.n	8004d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc8:	d123      	bne.n	8004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ce2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f043 0204 	orr.w	r2, r3, #4
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e046      	b.n	8004da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d18:	d021      	beq.n	8004d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1a:	f7fd fea7 	bl	8002a6c <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d302      	bcc.n	8004d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d116      	bne.n	8004d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f043 0220 	orr.w	r2, r3, #32
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e020      	b.n	8004da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	0c1b      	lsrs	r3, r3, #16
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d10c      	bne.n	8004d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	43da      	mvns	r2, r3
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4013      	ands	r3, r2
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	bf14      	ite	ne
 8004d7a:	2301      	movne	r3, #1
 8004d7c:	2300      	moveq	r3, #0
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	e00b      	b.n	8004d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	43da      	mvns	r2, r3
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	bf14      	ite	ne
 8004d94:	2301      	movne	r3, #1
 8004d96:	2300      	moveq	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d18d      	bne.n	8004cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004db4:	e02d      	b.n	8004e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 f8ce 	bl	8004f58 <I2C_IsAcknowledgeFailed>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e02d      	b.n	8004e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dcc:	d021      	beq.n	8004e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dce:	f7fd fe4d 	bl	8002a6c <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d302      	bcc.n	8004de4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d116      	bne.n	8004e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	f043 0220 	orr.w	r2, r3, #32
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e007      	b.n	8004e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1c:	2b80      	cmp	r3, #128	; 0x80
 8004e1e:	d1ca      	bne.n	8004db6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e36:	e02d      	b.n	8004e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f88d 	bl	8004f58 <I2C_IsAcknowledgeFailed>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e02d      	b.n	8004ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4e:	d021      	beq.n	8004e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e50:	f7fd fe0c 	bl	8002a6c <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d302      	bcc.n	8004e66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d116      	bne.n	8004e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	f043 0220 	orr.w	r2, r3, #32
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e007      	b.n	8004ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d1ca      	bne.n	8004e38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004eb8:	e042      	b.n	8004f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b10      	cmp	r3, #16
 8004ec6:	d119      	bne.n	8004efc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f06f 0210 	mvn.w	r2, #16
 8004ed0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e029      	b.n	8004f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004efc:	f7fd fdb6 	bl	8002a6c <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d302      	bcc.n	8004f12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d116      	bne.n	8004f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e007      	b.n	8004f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4a:	2b40      	cmp	r3, #64	; 0x40
 8004f4c:	d1b5      	bne.n	8004eba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f6e:	d11b      	bne.n	8004fa8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	f043 0204 	orr.w	r2, r3, #4
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004fb8:	4b03      	ldr	r3, [pc, #12]	; (8004fc8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
}
 8004fbe:	bf00      	nop
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	420e0020 	.word	0x420e0020

08004fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e272      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 8087 	beq.w	80050fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fec:	4b92      	ldr	r3, [pc, #584]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f003 030c 	and.w	r3, r3, #12
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d00c      	beq.n	8005012 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ff8:	4b8f      	ldr	r3, [pc, #572]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 030c 	and.w	r3, r3, #12
 8005000:	2b08      	cmp	r3, #8
 8005002:	d112      	bne.n	800502a <HAL_RCC_OscConfig+0x5e>
 8005004:	4b8c      	ldr	r3, [pc, #560]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005010:	d10b      	bne.n	800502a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005012:	4b89      	ldr	r3, [pc, #548]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d06c      	beq.n	80050f8 <HAL_RCC_OscConfig+0x12c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d168      	bne.n	80050f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e24c      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005032:	d106      	bne.n	8005042 <HAL_RCC_OscConfig+0x76>
 8005034:	4b80      	ldr	r3, [pc, #512]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a7f      	ldr	r2, [pc, #508]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800503a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	e02e      	b.n	80050a0 <HAL_RCC_OscConfig+0xd4>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10c      	bne.n	8005064 <HAL_RCC_OscConfig+0x98>
 800504a:	4b7b      	ldr	r3, [pc, #492]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a7a      	ldr	r2, [pc, #488]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	4b78      	ldr	r3, [pc, #480]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a77      	ldr	r2, [pc, #476]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800505c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e01d      	b.n	80050a0 <HAL_RCC_OscConfig+0xd4>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800506c:	d10c      	bne.n	8005088 <HAL_RCC_OscConfig+0xbc>
 800506e:	4b72      	ldr	r3, [pc, #456]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a71      	ldr	r2, [pc, #452]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	4b6f      	ldr	r3, [pc, #444]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a6e      	ldr	r2, [pc, #440]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	e00b      	b.n	80050a0 <HAL_RCC_OscConfig+0xd4>
 8005088:	4b6b      	ldr	r3, [pc, #428]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a6a      	ldr	r2, [pc, #424]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800508e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	4b68      	ldr	r3, [pc, #416]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a67      	ldr	r2, [pc, #412]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800509a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800509e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d013      	beq.n	80050d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a8:	f7fd fce0 	bl	8002a6c <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b0:	f7fd fcdc 	bl	8002a6c <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	; 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e200      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c2:	4b5d      	ldr	r3, [pc, #372]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCC_OscConfig+0xe4>
 80050ce:	e014      	b.n	80050fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d0:	f7fd fccc 	bl	8002a6c <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d8:	f7fd fcc8 	bl	8002a6c <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b64      	cmp	r3, #100	; 0x64
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e1ec      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ea:	4b53      	ldr	r3, [pc, #332]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0x10c>
 80050f6:	e000      	b.n	80050fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d063      	beq.n	80051ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005106:	4b4c      	ldr	r3, [pc, #304]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f003 030c 	and.w	r3, r3, #12
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00b      	beq.n	800512a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005112:	4b49      	ldr	r3, [pc, #292]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b08      	cmp	r3, #8
 800511c:	d11c      	bne.n	8005158 <HAL_RCC_OscConfig+0x18c>
 800511e:	4b46      	ldr	r3, [pc, #280]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d116      	bne.n	8005158 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800512a:	4b43      	ldr	r3, [pc, #268]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d005      	beq.n	8005142 <HAL_RCC_OscConfig+0x176>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d001      	beq.n	8005142 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e1c0      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005142:	4b3d      	ldr	r3, [pc, #244]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	4939      	ldr	r1, [pc, #228]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005156:	e03a      	b.n	80051ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d020      	beq.n	80051a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005160:	4b36      	ldr	r3, [pc, #216]	; (800523c <HAL_RCC_OscConfig+0x270>)
 8005162:	2201      	movs	r2, #1
 8005164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005166:	f7fd fc81 	bl	8002a6c <HAL_GetTick>
 800516a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800516c:	e008      	b.n	8005180 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800516e:	f7fd fc7d 	bl	8002a6c <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e1a1      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005180:	4b2d      	ldr	r3, [pc, #180]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0f0      	beq.n	800516e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518c:	4b2a      	ldr	r3, [pc, #168]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	4927      	ldr	r1, [pc, #156]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800519c:	4313      	orrs	r3, r2
 800519e:	600b      	str	r3, [r1, #0]
 80051a0:	e015      	b.n	80051ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051a2:	4b26      	ldr	r3, [pc, #152]	; (800523c <HAL_RCC_OscConfig+0x270>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a8:	f7fd fc60 	bl	8002a6c <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b0:	f7fd fc5c 	bl	8002a6c <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e180      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051c2:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d03a      	beq.n	8005250 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d019      	beq.n	8005216 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051e2:	4b17      	ldr	r3, [pc, #92]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e8:	f7fd fc40 	bl	8002a6c <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f0:	f7fd fc3c 	bl	8002a6c <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e160      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005202:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800520e:	2001      	movs	r0, #1
 8005210:	f000 fad8 	bl	80057c4 <RCC_Delay>
 8005214:	e01c      	b.n	8005250 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005216:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800521c:	f7fd fc26 	bl	8002a6c <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005222:	e00f      	b.n	8005244 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005224:	f7fd fc22 	bl	8002a6c <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d908      	bls.n	8005244 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e146      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
 8005236:	bf00      	nop
 8005238:	40021000 	.word	0x40021000
 800523c:	42420000 	.word	0x42420000
 8005240:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005244:	4b92      	ldr	r3, [pc, #584]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e9      	bne.n	8005224 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 80a6 	beq.w	80053aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800525e:	2300      	movs	r3, #0
 8005260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005262:	4b8b      	ldr	r3, [pc, #556]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10d      	bne.n	800528a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800526e:	4b88      	ldr	r3, [pc, #544]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	4a87      	ldr	r2, [pc, #540]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005278:	61d3      	str	r3, [r2, #28]
 800527a:	4b85      	ldr	r3, [pc, #532]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005282:	60bb      	str	r3, [r7, #8]
 8005284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528a:	4b82      	ldr	r3, [pc, #520]	; (8005494 <HAL_RCC_OscConfig+0x4c8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d118      	bne.n	80052c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005296:	4b7f      	ldr	r3, [pc, #508]	; (8005494 <HAL_RCC_OscConfig+0x4c8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a7e      	ldr	r2, [pc, #504]	; (8005494 <HAL_RCC_OscConfig+0x4c8>)
 800529c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a2:	f7fd fbe3 	bl	8002a6c <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052aa:	f7fd fbdf 	bl	8002a6c <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b64      	cmp	r3, #100	; 0x64
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e103      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052bc:	4b75      	ldr	r3, [pc, #468]	; (8005494 <HAL_RCC_OscConfig+0x4c8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d106      	bne.n	80052de <HAL_RCC_OscConfig+0x312>
 80052d0:	4b6f      	ldr	r3, [pc, #444]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	4a6e      	ldr	r2, [pc, #440]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80052d6:	f043 0301 	orr.w	r3, r3, #1
 80052da:	6213      	str	r3, [r2, #32]
 80052dc:	e02d      	b.n	800533a <HAL_RCC_OscConfig+0x36e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10c      	bne.n	8005300 <HAL_RCC_OscConfig+0x334>
 80052e6:	4b6a      	ldr	r3, [pc, #424]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	4a69      	ldr	r2, [pc, #420]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80052ec:	f023 0301 	bic.w	r3, r3, #1
 80052f0:	6213      	str	r3, [r2, #32]
 80052f2:	4b67      	ldr	r3, [pc, #412]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	4a66      	ldr	r2, [pc, #408]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80052f8:	f023 0304 	bic.w	r3, r3, #4
 80052fc:	6213      	str	r3, [r2, #32]
 80052fe:	e01c      	b.n	800533a <HAL_RCC_OscConfig+0x36e>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	2b05      	cmp	r3, #5
 8005306:	d10c      	bne.n	8005322 <HAL_RCC_OscConfig+0x356>
 8005308:	4b61      	ldr	r3, [pc, #388]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	4a60      	ldr	r2, [pc, #384]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 800530e:	f043 0304 	orr.w	r3, r3, #4
 8005312:	6213      	str	r3, [r2, #32]
 8005314:	4b5e      	ldr	r3, [pc, #376]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	4a5d      	ldr	r2, [pc, #372]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	6213      	str	r3, [r2, #32]
 8005320:	e00b      	b.n	800533a <HAL_RCC_OscConfig+0x36e>
 8005322:	4b5b      	ldr	r3, [pc, #364]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	4a5a      	ldr	r2, [pc, #360]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005328:	f023 0301 	bic.w	r3, r3, #1
 800532c:	6213      	str	r3, [r2, #32]
 800532e:	4b58      	ldr	r3, [pc, #352]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	4a57      	ldr	r2, [pc, #348]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005334:	f023 0304 	bic.w	r3, r3, #4
 8005338:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d015      	beq.n	800536e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005342:	f7fd fb93 	bl	8002a6c <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005348:	e00a      	b.n	8005360 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800534a:	f7fd fb8f 	bl	8002a6c <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	f241 3288 	movw	r2, #5000	; 0x1388
 8005358:	4293      	cmp	r3, r2
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e0b1      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005360:	4b4b      	ldr	r3, [pc, #300]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0ee      	beq.n	800534a <HAL_RCC_OscConfig+0x37e>
 800536c:	e014      	b.n	8005398 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800536e:	f7fd fb7d 	bl	8002a6c <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005374:	e00a      	b.n	800538c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005376:	f7fd fb79 	bl	8002a6c <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f241 3288 	movw	r2, #5000	; 0x1388
 8005384:	4293      	cmp	r3, r2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e09b      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800538c:	4b40      	ldr	r3, [pc, #256]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1ee      	bne.n	8005376 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005398:	7dfb      	ldrb	r3, [r7, #23]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d105      	bne.n	80053aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539e:	4b3c      	ldr	r3, [pc, #240]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	4a3b      	ldr	r2, [pc, #236]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80053a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 8087 	beq.w	80054c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053b4:	4b36      	ldr	r3, [pc, #216]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f003 030c 	and.w	r3, r3, #12
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d061      	beq.n	8005484 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d146      	bne.n	8005456 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c8:	4b33      	ldr	r3, [pc, #204]	; (8005498 <HAL_RCC_OscConfig+0x4cc>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ce:	f7fd fb4d 	bl	8002a6c <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d6:	f7fd fb49 	bl	8002a6c <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e06d      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053e8:	4b29      	ldr	r3, [pc, #164]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f0      	bne.n	80053d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fc:	d108      	bne.n	8005410 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053fe:	4b24      	ldr	r3, [pc, #144]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	4921      	ldr	r1, [pc, #132]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 800540c:	4313      	orrs	r3, r2
 800540e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005410:	4b1f      	ldr	r3, [pc, #124]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a19      	ldr	r1, [r3, #32]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	430b      	orrs	r3, r1
 8005422:	491b      	ldr	r1, [pc, #108]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005424:	4313      	orrs	r3, r2
 8005426:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005428:	4b1b      	ldr	r3, [pc, #108]	; (8005498 <HAL_RCC_OscConfig+0x4cc>)
 800542a:	2201      	movs	r2, #1
 800542c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542e:	f7fd fb1d 	bl	8002a6c <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005436:	f7fd fb19 	bl	8002a6c <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e03d      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005448:	4b11      	ldr	r3, [pc, #68]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0f0      	beq.n	8005436 <HAL_RCC_OscConfig+0x46a>
 8005454:	e035      	b.n	80054c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005456:	4b10      	ldr	r3, [pc, #64]	; (8005498 <HAL_RCC_OscConfig+0x4cc>)
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800545c:	f7fd fb06 	bl	8002a6c <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005464:	f7fd fb02 	bl	8002a6c <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e026      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005476:	4b06      	ldr	r3, [pc, #24]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1f0      	bne.n	8005464 <HAL_RCC_OscConfig+0x498>
 8005482:	e01e      	b.n	80054c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d107      	bne.n	800549c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e019      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
 8005490:	40021000 	.word	0x40021000
 8005494:	40007000 	.word	0x40007000
 8005498:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <HAL_RCC_OscConfig+0x500>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d106      	bne.n	80054be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d001      	beq.n	80054c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40021000 	.word	0x40021000

080054d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e0d0      	b.n	8005686 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054e4:	4b6a      	ldr	r3, [pc, #424]	; (8005690 <HAL_RCC_ClockConfig+0x1c0>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d910      	bls.n	8005514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054f2:	4b67      	ldr	r3, [pc, #412]	; (8005690 <HAL_RCC_ClockConfig+0x1c0>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f023 0207 	bic.w	r2, r3, #7
 80054fa:	4965      	ldr	r1, [pc, #404]	; (8005690 <HAL_RCC_ClockConfig+0x1c0>)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	4313      	orrs	r3, r2
 8005500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005502:	4b63      	ldr	r3, [pc, #396]	; (8005690 <HAL_RCC_ClockConfig+0x1c0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	429a      	cmp	r2, r3
 800550e:	d001      	beq.n	8005514 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e0b8      	b.n	8005686 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d020      	beq.n	8005562 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d005      	beq.n	8005538 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800552c:	4b59      	ldr	r3, [pc, #356]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4a58      	ldr	r2, [pc, #352]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 8005532:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005536:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005544:	4b53      	ldr	r3, [pc, #332]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	4a52      	ldr	r2, [pc, #328]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 800554a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800554e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005550:	4b50      	ldr	r3, [pc, #320]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	494d      	ldr	r1, [pc, #308]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 800555e:	4313      	orrs	r3, r2
 8005560:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d040      	beq.n	80055f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d107      	bne.n	8005586 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005576:	4b47      	ldr	r3, [pc, #284]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d115      	bne.n	80055ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e07f      	b.n	8005686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d107      	bne.n	800559e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800558e:	4b41      	ldr	r3, [pc, #260]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d109      	bne.n	80055ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e073      	b.n	8005686 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800559e:	4b3d      	ldr	r3, [pc, #244]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e06b      	b.n	8005686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ae:	4b39      	ldr	r3, [pc, #228]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f023 0203 	bic.w	r2, r3, #3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	4936      	ldr	r1, [pc, #216]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055c0:	f7fd fa54 	bl	8002a6c <HAL_GetTick>
 80055c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c6:	e00a      	b.n	80055de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c8:	f7fd fa50 	bl	8002a6c <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e053      	b.n	8005686 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055de:	4b2d      	ldr	r3, [pc, #180]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f003 020c 	and.w	r2, r3, #12
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d1eb      	bne.n	80055c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055f0:	4b27      	ldr	r3, [pc, #156]	; (8005690 <HAL_RCC_ClockConfig+0x1c0>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d210      	bcs.n	8005620 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fe:	4b24      	ldr	r3, [pc, #144]	; (8005690 <HAL_RCC_ClockConfig+0x1c0>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f023 0207 	bic.w	r2, r3, #7
 8005606:	4922      	ldr	r1, [pc, #136]	; (8005690 <HAL_RCC_ClockConfig+0x1c0>)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	4313      	orrs	r3, r2
 800560c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800560e:	4b20      	ldr	r3, [pc, #128]	; (8005690 <HAL_RCC_ClockConfig+0x1c0>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d001      	beq.n	8005620 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e032      	b.n	8005686 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d008      	beq.n	800563e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800562c:	4b19      	ldr	r3, [pc, #100]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	4916      	ldr	r1, [pc, #88]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 800563a:	4313      	orrs	r3, r2
 800563c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d009      	beq.n	800565e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800564a:	4b12      	ldr	r3, [pc, #72]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	490e      	ldr	r1, [pc, #56]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 800565a:	4313      	orrs	r3, r2
 800565c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800565e:	f000 f821 	bl	80056a4 <HAL_RCC_GetSysClockFreq>
 8005662:	4602      	mov	r2, r0
 8005664:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	091b      	lsrs	r3, r3, #4
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	490a      	ldr	r1, [pc, #40]	; (8005698 <HAL_RCC_ClockConfig+0x1c8>)
 8005670:	5ccb      	ldrb	r3, [r1, r3]
 8005672:	fa22 f303 	lsr.w	r3, r2, r3
 8005676:	4a09      	ldr	r2, [pc, #36]	; (800569c <HAL_RCC_ClockConfig+0x1cc>)
 8005678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800567a:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <HAL_RCC_ClockConfig+0x1d0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f7fd f9b2 	bl	80029e8 <HAL_InitTick>

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	40022000 	.word	0x40022000
 8005694:	40021000 	.word	0x40021000
 8005698:	0800bd2c 	.word	0x0800bd2c
 800569c:	20000180 	.word	0x20000180
 80056a0:	20000184 	.word	0x20000184

080056a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056a4:	b490      	push	{r4, r7}
 80056a6:	b08a      	sub	sp, #40	; 0x28
 80056a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80056aa:	4b29      	ldr	r3, [pc, #164]	; (8005750 <HAL_RCC_GetSysClockFreq+0xac>)
 80056ac:	1d3c      	adds	r4, r7, #4
 80056ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80056b4:	f240 2301 	movw	r3, #513	; 0x201
 80056b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	2300      	movs	r3, #0
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	2300      	movs	r3, #0
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80056ce:	4b21      	ldr	r3, [pc, #132]	; (8005754 <HAL_RCC_GetSysClockFreq+0xb0>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f003 030c 	and.w	r3, r3, #12
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d002      	beq.n	80056e4 <HAL_RCC_GetSysClockFreq+0x40>
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d003      	beq.n	80056ea <HAL_RCC_GetSysClockFreq+0x46>
 80056e2:	e02b      	b.n	800573c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056e4:	4b1c      	ldr	r3, [pc, #112]	; (8005758 <HAL_RCC_GetSysClockFreq+0xb4>)
 80056e6:	623b      	str	r3, [r7, #32]
      break;
 80056e8:	e02b      	b.n	8005742 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	0c9b      	lsrs	r3, r3, #18
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	3328      	adds	r3, #40	; 0x28
 80056f4:	443b      	add	r3, r7
 80056f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80056fa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d012      	beq.n	800572c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005706:	4b13      	ldr	r3, [pc, #76]	; (8005754 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	0c5b      	lsrs	r3, r3, #17
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	3328      	adds	r3, #40	; 0x28
 8005712:	443b      	add	r3, r7
 8005714:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005718:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	4a0e      	ldr	r2, [pc, #56]	; (8005758 <HAL_RCC_GetSysClockFreq+0xb4>)
 800571e:	fb03 f202 	mul.w	r2, r3, r2
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
 800572a:	e004      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	4a0b      	ldr	r2, [pc, #44]	; (800575c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005730:	fb02 f303 	mul.w	r3, r2, r3
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	623b      	str	r3, [r7, #32]
      break;
 800573a:	e002      	b.n	8005742 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800573c:	4b06      	ldr	r3, [pc, #24]	; (8005758 <HAL_RCC_GetSysClockFreq+0xb4>)
 800573e:	623b      	str	r3, [r7, #32]
      break;
 8005740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005742:	6a3b      	ldr	r3, [r7, #32]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3728      	adds	r7, #40	; 0x28
 8005748:	46bd      	mov	sp, r7
 800574a:	bc90      	pop	{r4, r7}
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	0800bd0c 	.word	0x0800bd0c
 8005754:	40021000 	.word	0x40021000
 8005758:	007a1200 	.word	0x007a1200
 800575c:	003d0900 	.word	0x003d0900

08005760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005764:	4b02      	ldr	r3, [pc, #8]	; (8005770 <HAL_RCC_GetHCLKFreq+0x10>)
 8005766:	681b      	ldr	r3, [r3, #0]
}
 8005768:	4618      	mov	r0, r3
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr
 8005770:	20000180 	.word	0x20000180

08005774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005778:	f7ff fff2 	bl	8005760 <HAL_RCC_GetHCLKFreq>
 800577c:	4602      	mov	r2, r0
 800577e:	4b05      	ldr	r3, [pc, #20]	; (8005794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	4903      	ldr	r1, [pc, #12]	; (8005798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800578a:	5ccb      	ldrb	r3, [r1, r3]
 800578c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005790:	4618      	mov	r0, r3
 8005792:	bd80      	pop	{r7, pc}
 8005794:	40021000 	.word	0x40021000
 8005798:	0800bd3c 	.word	0x0800bd3c

0800579c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057a0:	f7ff ffde 	bl	8005760 <HAL_RCC_GetHCLKFreq>
 80057a4:	4602      	mov	r2, r0
 80057a6:	4b05      	ldr	r3, [pc, #20]	; (80057bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	0adb      	lsrs	r3, r3, #11
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	4903      	ldr	r1, [pc, #12]	; (80057c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057b2:	5ccb      	ldrb	r3, [r1, r3]
 80057b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40021000 	.word	0x40021000
 80057c0:	0800bd3c 	.word	0x0800bd3c

080057c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057cc:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <RCC_Delay+0x34>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a0a      	ldr	r2, [pc, #40]	; (80057fc <RCC_Delay+0x38>)
 80057d2:	fba2 2303 	umull	r2, r3, r2, r3
 80057d6:	0a5b      	lsrs	r3, r3, #9
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	fb02 f303 	mul.w	r3, r2, r3
 80057de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057e0:	bf00      	nop
  }
  while (Delay --);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	1e5a      	subs	r2, r3, #1
 80057e6:	60fa      	str	r2, [r7, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1f9      	bne.n	80057e0 <RCC_Delay+0x1c>
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr
 80057f8:	20000180 	.word	0x20000180
 80057fc:	10624dd3 	.word	0x10624dd3

08005800 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	613b      	str	r3, [r7, #16]
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d07d      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800581c:	2300      	movs	r3, #0
 800581e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005820:	4b4f      	ldr	r3, [pc, #316]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10d      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800582c:	4b4c      	ldr	r3, [pc, #304]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	4a4b      	ldr	r2, [pc, #300]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005836:	61d3      	str	r3, [r2, #28]
 8005838:	4b49      	ldr	r3, [pc, #292]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005844:	2301      	movs	r3, #1
 8005846:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005848:	4b46      	ldr	r3, [pc, #280]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005850:	2b00      	cmp	r3, #0
 8005852:	d118      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005854:	4b43      	ldr	r3, [pc, #268]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a42      	ldr	r2, [pc, #264]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800585a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005860:	f7fd f904 	bl	8002a6c <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005866:	e008      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005868:	f7fd f900 	bl	8002a6c <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b64      	cmp	r3, #100	; 0x64
 8005874:	d901      	bls.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e06d      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800587a:	4b3a      	ldr	r3, [pc, #232]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0f0      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005886:	4b36      	ldr	r3, [pc, #216]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800588e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d02e      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d027      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058a4:	4b2e      	ldr	r3, [pc, #184]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058ae:	4b2e      	ldr	r3, [pc, #184]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058b0:	2201      	movs	r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058b4:	4b2c      	ldr	r3, [pc, #176]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80058ba:	4a29      	ldr	r2, [pc, #164]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d014      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ca:	f7fd f8cf 	bl	8002a6c <HAL_GetTick>
 80058ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d0:	e00a      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d2:	f7fd f8cb 	bl	8002a6c <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e036      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e8:	4b1d      	ldr	r3, [pc, #116]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0ee      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058f4:	4b1a      	ldr	r3, [pc, #104]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	4917      	ldr	r1, [pc, #92]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005902:	4313      	orrs	r3, r2
 8005904:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005906:	7dfb      	ldrb	r3, [r7, #23]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d105      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800590c:	4b14      	ldr	r3, [pc, #80]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	4a13      	ldr	r2, [pc, #76]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005916:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005924:	4b0e      	ldr	r3, [pc, #56]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	490b      	ldr	r1, [pc, #44]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005932:	4313      	orrs	r3, r2
 8005934:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0310 	and.w	r3, r3, #16
 800593e:	2b00      	cmp	r3, #0
 8005940:	d008      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005942:	4b07      	ldr	r3, [pc, #28]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	4904      	ldr	r1, [pc, #16]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005950:	4313      	orrs	r3, r2
 8005952:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	40021000 	.word	0x40021000
 8005964:	40007000 	.word	0x40007000
 8005968:	42420440 	.word	0x42420440

0800596c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800596c:	b590      	push	{r4, r7, lr}
 800596e:	b08d      	sub	sp, #52	; 0x34
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005974:	4b58      	ldr	r3, [pc, #352]	; (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8005976:	f107 040c 	add.w	r4, r7, #12
 800597a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800597c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005980:	f240 2301 	movw	r3, #513	; 0x201
 8005984:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
 800598a:	2300      	movs	r3, #0
 800598c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800598e:	2300      	movs	r3, #0
 8005990:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	61fb      	str	r3, [r7, #28]
 8005996:	2300      	movs	r3, #0
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b10      	cmp	r3, #16
 800599e:	d00a      	beq.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b10      	cmp	r3, #16
 80059a4:	f200 808e 	bhi.w	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d049      	beq.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d079      	beq.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80059b4:	e086      	b.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80059b6:	4b49      	ldr	r3, [pc, #292]	; (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80059bc:	4b47      	ldr	r3, [pc, #284]	; (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d07f      	beq.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	0c9b      	lsrs	r3, r3, #18
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	3330      	adds	r3, #48	; 0x30
 80059d2:	443b      	add	r3, r7
 80059d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80059d8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d017      	beq.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80059e4:	4b3d      	ldr	r3, [pc, #244]	; (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	0c5b      	lsrs	r3, r3, #17
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	3330      	adds	r3, #48	; 0x30
 80059f0:	443b      	add	r3, r7
 80059f2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00d      	beq.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005a02:	4a37      	ldr	r2, [pc, #220]	; (8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	fb02 f303 	mul.w	r3, r2, r3
 8005a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a12:	e004      	b.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	4a33      	ldr	r2, [pc, #204]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005a18:	fb02 f303 	mul.w	r3, r2, r3
 8005a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005a1e:	4b2f      	ldr	r3, [pc, #188]	; (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a2a:	d102      	bne.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8005a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005a30:	e04a      	b.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	4a2c      	ldr	r2, [pc, #176]	; (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8005a38:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3c:	085b      	lsrs	r3, r3, #1
 8005a3e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005a40:	e042      	b.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8005a42:	4b26      	ldr	r3, [pc, #152]	; (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a52:	d108      	bne.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8005a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a64:	e01f      	b.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a70:	d109      	bne.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8005a72:	4b1a      	ldr	r3, [pc, #104]	; (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8005a7e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a84:	e00f      	b.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a90:	d11c      	bne.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005a92:	4b12      	ldr	r3, [pc, #72]	; (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d016      	beq.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8005a9e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005aa2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005aa4:	e012      	b.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005aa6:	e011      	b.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005aa8:	f7ff fe78 	bl	800579c <HAL_RCC_GetPCLK2Freq>
 8005aac:	4602      	mov	r2, r0
 8005aae:	4b0b      	ldr	r3, [pc, #44]	; (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	0b9b      	lsrs	r3, r3, #14
 8005ab4:	f003 0303 	and.w	r3, r3, #3
 8005ab8:	3301      	adds	r3, #1
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005ac2:	e004      	b.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005ac4:	bf00      	nop
 8005ac6:	e002      	b.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005ac8:	bf00      	nop
 8005aca:	e000      	b.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005acc:	bf00      	nop
    }
  }
  return (frequency);
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3734      	adds	r7, #52	; 0x34
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd90      	pop	{r4, r7, pc}
 8005ad8:	0800bd1c 	.word	0x0800bd1c
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	007a1200 	.word	0x007a1200
 8005ae4:	003d0900 	.word	0x003d0900
 8005ae8:	aaaaaaab 	.word	0xaaaaaaab

08005aec <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e084      	b.n	8005c0c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	7c5b      	ldrb	r3, [r3, #17]
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d105      	bne.n	8005b18 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fc fd9a 	bl	800264c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 faf4 	bl	800610c <HAL_RTC_WaitForSynchro>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d004      	beq.n	8005b34 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2204      	movs	r2, #4
 8005b2e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e06b      	b.n	8005c0c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fbad 	bl	8006294 <RTC_EnterInitMode>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d004      	beq.n	8005b4a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2204      	movs	r2, #4
 8005b44:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e060      	b.n	8005c0c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0207 	bic.w	r2, r2, #7
 8005b58:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d005      	beq.n	8005b6e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005b62:	4b2c      	ldr	r3, [pc, #176]	; (8005c14 <HAL_RTC_Init+0x128>)
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	4a2b      	ldr	r2, [pc, #172]	; (8005c14 <HAL_RTC_Init+0x128>)
 8005b68:	f023 0301 	bic.w	r3, r3, #1
 8005b6c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005b6e:	4b29      	ldr	r3, [pc, #164]	; (8005c14 <HAL_RTC_Init+0x128>)
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	4926      	ldr	r1, [pc, #152]	; (8005c14 <HAL_RTC_Init+0x128>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d003      	beq.n	8005b92 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	e00e      	b.n	8005bb0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005b92:	2001      	movs	r0, #1
 8005b94:	f7ff feea 	bl	800596c <HAL_RCCEx_GetPeriphCLKFreq>
 8005b98:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d104      	bne.n	8005baa <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2204      	movs	r2, #4
 8005ba4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e030      	b.n	8005c0c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f023 010f 	bic.w	r1, r3, #15
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	0c1a      	lsrs	r2, r3, #16
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	0c1b      	lsrs	r3, r3, #16
 8005bce:	041b      	lsls	r3, r3, #16
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	b291      	uxth	r1, r2
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6812      	ldr	r2, [r2, #0]
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fb81 	bl	80062e4 <RTC_ExitInitMode>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d004      	beq.n	8005bf2 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2204      	movs	r2, #4
 8005bec:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e00c      	b.n	8005c0c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
  }
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40006c00 	.word	0x40006c00

08005c18 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c18:	b590      	push	{r4, r7, lr}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	2300      	movs	r3, #0
 8005c2a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <HAL_RTC_SetTime+0x20>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e080      	b.n	8005d3e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	7c1b      	ldrb	r3, [r3, #16]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_RTC_SetTime+0x30>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e07a      	b.n	8005d3e <HAL_RTC_SetTime+0x126>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2202      	movs	r2, #2
 8005c52:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d113      	bne.n	8005c82 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005c64:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	460b      	mov	r3, r1
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	1a5b      	subs	r3, r3, r1
 8005c74:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005c76:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005c7c:	4413      	add	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	e01e      	b.n	8005cc0 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fb71 	bl	800636e <RTC_Bcd2ToByte>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005c94:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	785b      	ldrb	r3, [r3, #1]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fb66 	bl	800636e <RTC_Bcd2ToByte>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	1a9b      	subs	r3, r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005cae:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	789b      	ldrb	r3, [r3, #2]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fb5a 	bl	800636e <RTC_Bcd2ToByte>
 8005cba:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005cbc:	4423      	add	r3, r4
 8005cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005cc0:	6979      	ldr	r1, [r7, #20]
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 fa7f 	bl	80061c6 <RTC_WriteTimeCounter>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d007      	beq.n	8005cde <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e02f      	b.n	8005d3e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0205 	bic.w	r2, r2, #5
 8005cec:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fa90 	bl	8006214 <RTC_ReadAlarmCounter>
 8005cf4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfc:	d018      	beq.n	8005d30 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d214      	bcs.n	8005d30 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005d0c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005d10:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005d12:	6939      	ldr	r1, [r7, #16]
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 fa96 	bl	8006246 <RTC_WriteAlarmCounter>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d007      	beq.n	8005d30 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2204      	movs	r2, #4
 8005d24:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e006      	b.n	8005d3e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
  }
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd90      	pop	{r4, r7, pc}
	...

08005d48 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	61bb      	str	r3, [r7, #24]
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	2300      	movs	r3, #0
 8005d62:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <HAL_RTC_GetTime+0x28>
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e0b5      	b.n	8005ee0 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f003 0304 	and.w	r3, r3, #4
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e0ac      	b.n	8005ee0 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f9ed 	bl	8006166 <RTC_ReadTimeCounter>
 8005d8c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	4a55      	ldr	r2, [pc, #340]	; (8005ee8 <HAL_RTC_GetTime+0x1a0>)
 8005d92:	fba2 2303 	umull	r2, r3, r2, r3
 8005d96:	0adb      	lsrs	r3, r3, #11
 8005d98:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	4b52      	ldr	r3, [pc, #328]	; (8005ee8 <HAL_RTC_GetTime+0x1a0>)
 8005d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8005da2:	0adb      	lsrs	r3, r3, #11
 8005da4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005da8:	fb01 f303 	mul.w	r3, r1, r3
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	4a4f      	ldr	r2, [pc, #316]	; (8005eec <HAL_RTC_GetTime+0x1a4>)
 8005db0:	fba2 2303 	umull	r2, r3, r2, r3
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	4a4a      	ldr	r2, [pc, #296]	; (8005ee8 <HAL_RTC_GetTime+0x1a0>)
 8005dc0:	fba2 1203 	umull	r1, r2, r2, r3
 8005dc4:	0ad2      	lsrs	r2, r2, #11
 8005dc6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005dca:	fb01 f202 	mul.w	r2, r1, r2
 8005dce:	1a9a      	subs	r2, r3, r2
 8005dd0:	4b46      	ldr	r3, [pc, #280]	; (8005eec <HAL_RTC_GetTime+0x1a4>)
 8005dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd6:	0959      	lsrs	r1, r3, #5
 8005dd8:	460b      	mov	r3, r1
 8005dda:	011b      	lsls	r3, r3, #4
 8005ddc:	1a5b      	subs	r3, r3, r1
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	1ad1      	subs	r1, r2, r3
 8005de2:	b2ca      	uxtb	r2, r1
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	2b17      	cmp	r3, #23
 8005dec:	d955      	bls.n	8005e9a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4a3f      	ldr	r2, [pc, #252]	; (8005ef0 <HAL_RTC_GetTime+0x1a8>)
 8005df2:	fba2 2303 	umull	r2, r3, r2, r3
 8005df6:	091b      	lsrs	r3, r3, #4
 8005df8:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005dfa:	6939      	ldr	r1, [r7, #16]
 8005dfc:	4b3c      	ldr	r3, [pc, #240]	; (8005ef0 <HAL_RTC_GetTime+0x1a8>)
 8005dfe:	fba3 2301 	umull	r2, r3, r3, r1
 8005e02:	091a      	lsrs	r2, r3, #4
 8005e04:	4613      	mov	r3, r2
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	4413      	add	r3, r2
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	1aca      	subs	r2, r1, r3
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f9fd 	bl	8006214 <RTC_ReadAlarmCounter>
 8005e1a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e22:	d008      	beq.n	8005e36 <HAL_RTC_GetTime+0xee>
 8005e24:	69fa      	ldr	r2, [r7, #28]
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d904      	bls.n	8005e36 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	e002      	b.n	8005e3c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005e36:	f04f 33ff 	mov.w	r3, #4294967295
 8005e3a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	4a2d      	ldr	r2, [pc, #180]	; (8005ef4 <HAL_RTC_GetTime+0x1ac>)
 8005e40:	fb02 f303 	mul.w	r3, r2, r3
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005e4a:	69b9      	ldr	r1, [r7, #24]
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 f9ba 	bl	80061c6 <RTC_WriteTimeCounter>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e041      	b.n	8005ee0 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e62:	d00c      	beq.n	8005e7e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005e64:	69fa      	ldr	r2, [r7, #28]
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	4413      	add	r3, r2
 8005e6a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005e6c:	69f9      	ldr	r1, [r7, #28]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 f9e9 	bl	8006246 <RTC_WriteAlarmCounter>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e030      	b.n	8005ee0 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005e7e:	69f9      	ldr	r1, [r7, #28]
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 f9e0 	bl	8006246 <RTC_WriteAlarmCounter>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e027      	b.n	8005ee0 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005e90:	6979      	ldr	r1, [r7, #20]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 fa88 	bl	80063a8 <RTC_DateUpdate>
 8005e98:	e003      	b.n	8005ea2 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01a      	beq.n	8005ede <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 fa41 	bl	8006334 <RTC_ByteToBcd2>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	785b      	ldrb	r3, [r3, #1]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fa38 	bl	8006334 <RTC_ByteToBcd2>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	789b      	ldrb	r3, [r3, #2]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 fa2f 	bl	8006334 <RTC_ByteToBcd2>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	461a      	mov	r2, r3
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3720      	adds	r7, #32
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	91a2b3c5 	.word	0x91a2b3c5
 8005eec:	88888889 	.word	0x88888889
 8005ef0:	aaaaaaab 	.word	0xaaaaaaab
 8005ef4:	00015180 	.word	0x00015180

08005ef8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	61fb      	str	r3, [r7, #28]
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61bb      	str	r3, [r7, #24]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <HAL_RTC_SetDate+0x24>
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e097      	b.n	8006050 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	7c1b      	ldrb	r3, [r3, #16]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_RTC_SetDate+0x34>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e091      	b.n	8006050 <HAL_RTC_SetDate+0x158>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2202      	movs	r2, #2
 8005f36:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10c      	bne.n	8005f58 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	78da      	ldrb	r2, [r3, #3]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	785a      	ldrb	r2, [r3, #1]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	789a      	ldrb	r2, [r3, #2]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	739a      	strb	r2, [r3, #14]
 8005f56:	e01a      	b.n	8005f8e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	78db      	ldrb	r3, [r3, #3]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fa06 	bl	800636e <RTC_Bcd2ToByte>
 8005f62:	4603      	mov	r3, r0
 8005f64:	461a      	mov	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 f9fd 	bl	800636e <RTC_Bcd2ToByte>
 8005f74:	4603      	mov	r3, r0
 8005f76:	461a      	mov	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	789b      	ldrb	r3, [r3, #2]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 f9f4 	bl	800636e <RTC_Bcd2ToByte>
 8005f86:	4603      	mov	r3, r0
 8005f88:	461a      	mov	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	7bdb      	ldrb	r3, [r3, #15]
 8005f92:	4618      	mov	r0, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	7b59      	ldrb	r1, [r3, #13]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	7b9b      	ldrb	r3, [r3, #14]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	f000 fadf 	bl	8006560 <RTC_WeekDayNum>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	7b1a      	ldrb	r2, [r3, #12]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 f8d7 	bl	8006166 <RTC_ReadTimeCounter>
 8005fb8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	4a26      	ldr	r2, [pc, #152]	; (8006058 <HAL_RTC_SetDate+0x160>)
 8005fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc2:	0adb      	lsrs	r3, r3, #11
 8005fc4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b18      	cmp	r3, #24
 8005fca:	d93a      	bls.n	8006042 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	4a23      	ldr	r2, [pc, #140]	; (800605c <HAL_RTC_SetDate+0x164>)
 8005fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd4:	091b      	lsrs	r3, r3, #4
 8005fd6:	4a22      	ldr	r2, [pc, #136]	; (8006060 <HAL_RTC_SetDate+0x168>)
 8005fd8:	fb02 f303 	mul.w	r3, r2, r3
 8005fdc:	69fa      	ldr	r2, [r7, #28]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005fe2:	69f9      	ldr	r1, [r7, #28]
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 f8ee 	bl	80061c6 <RTC_WriteTimeCounter>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d007      	beq.n	8006000 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2204      	movs	r2, #4
 8005ff4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e027      	b.n	8006050 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 f907 	bl	8006214 <RTC_ReadAlarmCounter>
 8006006:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600e:	d018      	beq.n	8006042 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	429a      	cmp	r2, r3
 8006016:	d214      	bcs.n	8006042 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800601e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006022:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006024:	69b9      	ldr	r1, [r7, #24]
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 f90d 	bl	8006246 <RTC_WriteAlarmCounter>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d007      	beq.n	8006042 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2204      	movs	r2, #4
 8006036:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e006      	b.n	8006050 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2201      	movs	r2, #1
 8006046:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3720      	adds	r7, #32
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	91a2b3c5 	.word	0x91a2b3c5
 800605c:	aaaaaaab 	.word	0xaaaaaaab
 8006060:	00015180 	.word	0x00015180

08006064 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8006070:	f107 0314 	add.w	r3, r7, #20
 8006074:	2100      	movs	r1, #0
 8006076:	460a      	mov	r2, r1
 8006078:	801a      	strh	r2, [r3, #0]
 800607a:	460a      	mov	r2, r1
 800607c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <HAL_RTC_GetDate+0x26>
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e03a      	b.n	8006104 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800608e:	f107 0314 	add.w	r3, r7, #20
 8006092:	2200      	movs	r2, #0
 8006094:	4619      	mov	r1, r3
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f7ff fe56 	bl	8005d48 <HAL_RTC_GetTime>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e02e      	b.n	8006104 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	7b1a      	ldrb	r2, [r3, #12]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	7bda      	ldrb	r2, [r3, #15]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	7b5a      	ldrb	r2, [r3, #13]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	7b9a      	ldrb	r2, [r3, #14]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d01a      	beq.n	8006102 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	78db      	ldrb	r3, [r3, #3]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 f92f 	bl	8006334 <RTC_ByteToBcd2>
 80060d6:	4603      	mov	r3, r0
 80060d8:	461a      	mov	r2, r3
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	785b      	ldrb	r3, [r3, #1]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 f926 	bl	8006334 <RTC_ByteToBcd2>
 80060e8:	4603      	mov	r3, r0
 80060ea:	461a      	mov	r2, r3
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	789b      	ldrb	r3, [r3, #2]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 f91d 	bl	8006334 <RTC_ByteToBcd2>
 80060fa:	4603      	mov	r3, r0
 80060fc:	461a      	mov	r2, r3
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e01d      	b.n	800615e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0208 	bic.w	r2, r2, #8
 8006130:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006132:	f7fc fc9b 	bl	8002a6c <HAL_GetTick>
 8006136:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006138:	e009      	b.n	800614e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800613a:	f7fc fc97 	bl	8002a6c <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006148:	d901      	bls.n	800614e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e007      	b.n	800615e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f003 0308 	and.w	r3, r3, #8
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0ee      	beq.n	800613a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8006166:	b480      	push	{r7}
 8006168:	b087      	sub	sp, #28
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	827b      	strh	r3, [r7, #18]
 8006172:	2300      	movs	r3, #0
 8006174:	823b      	strh	r3, [r7, #16]
 8006176:	2300      	movs	r3, #0
 8006178:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8006196:	8a7a      	ldrh	r2, [r7, #18]
 8006198:	8a3b      	ldrh	r3, [r7, #16]
 800619a:	429a      	cmp	r2, r3
 800619c:	d008      	beq.n	80061b0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800619e:	8a3b      	ldrh	r3, [r7, #16]
 80061a0:	041a      	lsls	r2, r3, #16
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]
 80061ae:	e004      	b.n	80061ba <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80061b0:	8a7b      	ldrh	r3, [r7, #18]
 80061b2:	041a      	lsls	r2, r3, #16
 80061b4:	89fb      	ldrh	r3, [r7, #14]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80061ba:	697b      	ldr	r3, [r7, #20]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	371c      	adds	r7, #28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr

080061c6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b084      	sub	sp, #16
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f85d 	bl	8006294 <RTC_EnterInitMode>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	73fb      	strb	r3, [r7, #15]
 80061e4:	e011      	b.n	800620a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	0c12      	lsrs	r2, r2, #16
 80061ee:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	b292      	uxth	r2, r2
 80061f8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f872 	bl	80062e4 <RTC_ExitInitMode>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800620a:	7bfb      	ldrb	r3, [r7, #15]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	81fb      	strh	r3, [r7, #14]
 8006220:	2300      	movs	r3, #0
 8006222:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006234:	89fb      	ldrh	r3, [r7, #14]
 8006236:	041a      	lsls	r2, r3, #16
 8006238:	89bb      	ldrh	r3, [r7, #12]
 800623a:	4313      	orrs	r3, r2
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	bc80      	pop	{r7}
 8006244:	4770      	bx	lr

08006246 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b084      	sub	sp, #16
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f81d 	bl	8006294 <RTC_EnterInitMode>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	73fb      	strb	r3, [r7, #15]
 8006264:	e011      	b.n	800628a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	0c12      	lsrs	r2, r2, #16
 800626e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	b292      	uxth	r2, r2
 8006278:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f832 	bl	80062e4 <RTC_ExitInitMode>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800628a:	7bfb      	ldrb	r3, [r7, #15]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80062a0:	f7fc fbe4 	bl	8002a6c <HAL_GetTick>
 80062a4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80062a6:	e009      	b.n	80062bc <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80062a8:	f7fc fbe0 	bl	8002a6c <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062b6:	d901      	bls.n	80062bc <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e00f      	b.n	80062dc <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f003 0320 	and.w	r3, r3, #32
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0ee      	beq.n	80062a8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f042 0210 	orr.w	r2, r2, #16
 80062d8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0210 	bic.w	r2, r2, #16
 80062fe:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006300:	f7fc fbb4 	bl	8002a6c <HAL_GetTick>
 8006304:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006306:	e009      	b.n	800631c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006308:	f7fc fbb0 	bl	8002a6c <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006316:	d901      	bls.n	800631c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e007      	b.n	800632c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0ee      	beq.n	8006308 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	4603      	mov	r3, r0
 800633c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8006342:	e005      	b.n	8006350 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3301      	adds	r3, #1
 8006348:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	3b0a      	subs	r3, #10
 800634e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8006350:	79fb      	ldrb	r3, [r7, #7]
 8006352:	2b09      	cmp	r3, #9
 8006354:	d8f6      	bhi.n	8006344 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	b2db      	uxtb	r3, r3
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	b2da      	uxtb	r2, r3
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	4313      	orrs	r3, r2
 8006362:	b2db      	uxtb	r3, r3
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	bc80      	pop	{r7}
 800636c:	4770      	bx	lr

0800636e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800636e:	b480      	push	{r7}
 8006370:	b085      	sub	sp, #20
 8006372:	af00      	add	r7, sp, #0
 8006374:	4603      	mov	r3, r0
 8006376:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	091b      	lsrs	r3, r3, #4
 8006380:	b2db      	uxtb	r3, r3
 8006382:	461a      	mov	r2, r3
 8006384:	4613      	mov	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800638e:	79fb      	ldrb	r3, [r7, #7]
 8006390:	f003 030f 	and.w	r3, r3, #15
 8006394:	b2da      	uxtb	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	b2db      	uxtb	r3, r3
 800639a:	4413      	add	r3, r2
 800639c:	b2db      	uxtb	r3, r3
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr

080063a8 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	617b      	str	r3, [r7, #20]
 80063b6:	2300      	movs	r3, #0
 80063b8:	613b      	str	r3, [r7, #16]
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	7bdb      	ldrb	r3, [r3, #15]
 80063c6:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	7b5b      	ldrb	r3, [r3, #13]
 80063cc:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	7b9b      	ldrb	r3, [r3, #14]
 80063d2:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80063d4:	2300      	movs	r3, #0
 80063d6:	60bb      	str	r3, [r7, #8]
 80063d8:	e06f      	b.n	80064ba <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d011      	beq.n	8006404 <RTC_DateUpdate+0x5c>
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d00e      	beq.n	8006404 <RTC_DateUpdate+0x5c>
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b05      	cmp	r3, #5
 80063ea:	d00b      	beq.n	8006404 <RTC_DateUpdate+0x5c>
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	2b07      	cmp	r3, #7
 80063f0:	d008      	beq.n	8006404 <RTC_DateUpdate+0x5c>
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d005      	beq.n	8006404 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	2b0a      	cmp	r3, #10
 80063fc:	d002      	beq.n	8006404 <RTC_DateUpdate+0x5c>
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b0c      	cmp	r3, #12
 8006402:	d117      	bne.n	8006434 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b1e      	cmp	r3, #30
 8006408:	d803      	bhi.n	8006412 <RTC_DateUpdate+0x6a>
      {
        day++;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3301      	adds	r3, #1
 800640e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006410:	e050      	b.n	80064b4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	2b0c      	cmp	r3, #12
 8006416:	d005      	beq.n	8006424 <RTC_DateUpdate+0x7c>
        {
          month++;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	3301      	adds	r3, #1
 800641c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800641e:	2301      	movs	r3, #1
 8006420:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006422:	e047      	b.n	80064b4 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8006424:	2301      	movs	r3, #1
 8006426:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006428:	2301      	movs	r3, #1
 800642a:	60fb      	str	r3, [r7, #12]
          year++;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	3301      	adds	r3, #1
 8006430:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8006432:	e03f      	b.n	80064b4 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	2b04      	cmp	r3, #4
 8006438:	d008      	beq.n	800644c <RTC_DateUpdate+0xa4>
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b06      	cmp	r3, #6
 800643e:	d005      	beq.n	800644c <RTC_DateUpdate+0xa4>
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2b09      	cmp	r3, #9
 8006444:	d002      	beq.n	800644c <RTC_DateUpdate+0xa4>
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2b0b      	cmp	r3, #11
 800644a:	d10c      	bne.n	8006466 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b1d      	cmp	r3, #29
 8006450:	d803      	bhi.n	800645a <RTC_DateUpdate+0xb2>
      {
        day++;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3301      	adds	r3, #1
 8006456:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006458:	e02c      	b.n	80064b4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	3301      	adds	r3, #1
 800645e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006460:	2301      	movs	r3, #1
 8006462:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006464:	e026      	b.n	80064b4 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	2b02      	cmp	r3, #2
 800646a:	d123      	bne.n	80064b4 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b1b      	cmp	r3, #27
 8006470:	d803      	bhi.n	800647a <RTC_DateUpdate+0xd2>
      {
        day++;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3301      	adds	r3, #1
 8006476:	60fb      	str	r3, [r7, #12]
 8006478:	e01c      	b.n	80064b4 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b1c      	cmp	r3, #28
 800647e:	d111      	bne.n	80064a4 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	b29b      	uxth	r3, r3
 8006484:	4618      	mov	r0, r3
 8006486:	f000 f839 	bl	80064fc <RTC_IsLeapYear>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <RTC_DateUpdate+0xf0>
        {
          day++;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	3301      	adds	r3, #1
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	e00d      	b.n	80064b4 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	3301      	adds	r3, #1
 800649c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800649e:	2301      	movs	r3, #1
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	e007      	b.n	80064b4 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b1d      	cmp	r3, #29
 80064a8:	d104      	bne.n	80064b4 <RTC_DateUpdate+0x10c>
      {
        month++;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	3301      	adds	r3, #1
 80064ae:	613b      	str	r3, [r7, #16]
        day = 1U;
 80064b0:	2301      	movs	r3, #1
 80064b2:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	3301      	adds	r3, #1
 80064b8:	60bb      	str	r3, [r7, #8]
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d38b      	bcc.n	80063da <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	b2d2      	uxtb	r2, r2
 80064e2:	4619      	mov	r1, r3
 80064e4:	6978      	ldr	r0, [r7, #20]
 80064e6:	f000 f83b 	bl	8006560 <RTC_WeekDayNum>
 80064ea:	4603      	mov	r3, r0
 80064ec:	461a      	mov	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	731a      	strb	r2, [r3, #12]
}
 80064f2:	bf00      	nop
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	4603      	mov	r3, r0
 8006504:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8006506:	88fb      	ldrh	r3, [r7, #6]
 8006508:	f003 0303 	and.w	r3, r3, #3
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	e01d      	b.n	8006552 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8006516:	88fb      	ldrh	r3, [r7, #6]
 8006518:	4a10      	ldr	r2, [pc, #64]	; (800655c <RTC_IsLeapYear+0x60>)
 800651a:	fba2 1203 	umull	r1, r2, r2, r3
 800651e:	0952      	lsrs	r2, r2, #5
 8006520:	2164      	movs	r1, #100	; 0x64
 8006522:	fb01 f202 	mul.w	r2, r1, r2
 8006526:	1a9b      	subs	r3, r3, r2
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800652e:	2301      	movs	r3, #1
 8006530:	e00f      	b.n	8006552 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8006532:	88fb      	ldrh	r3, [r7, #6]
 8006534:	4a09      	ldr	r2, [pc, #36]	; (800655c <RTC_IsLeapYear+0x60>)
 8006536:	fba2 1203 	umull	r1, r2, r2, r3
 800653a:	09d2      	lsrs	r2, r2, #7
 800653c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006540:	fb01 f202 	mul.w	r2, r1, r2
 8006544:	1a9b      	subs	r3, r3, r2
 8006546:	b29b      	uxth	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800654c:	2301      	movs	r3, #1
 800654e:	e000      	b.n	8006552 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8006550:	2300      	movs	r3, #0
  }
}
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	bc80      	pop	{r7}
 800655a:	4770      	bx	lr
 800655c:	51eb851f 	.word	0x51eb851f

08006560 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	70fb      	strb	r3, [r7, #3]
 800656c:	4613      	mov	r3, r2
 800656e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006570:	2300      	movs	r3, #0
 8006572:	60bb      	str	r3, [r7, #8]
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800657e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d82d      	bhi.n	80065e2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006586:	78fa      	ldrb	r2, [r7, #3]
 8006588:	4613      	mov	r3, r2
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	4413      	add	r3, r2
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	1a9b      	subs	r3, r3, r2
 8006592:	4a2c      	ldr	r2, [pc, #176]	; (8006644 <RTC_WeekDayNum+0xe4>)
 8006594:	fba2 2303 	umull	r2, r3, r2, r3
 8006598:	085a      	lsrs	r2, r3, #1
 800659a:	78bb      	ldrb	r3, [r7, #2]
 800659c:	441a      	add	r2, r3
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	441a      	add	r2, r3
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	089b      	lsrs	r3, r3, #2
 80065a8:	441a      	add	r2, r3
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	3b01      	subs	r3, #1
 80065ae:	4926      	ldr	r1, [pc, #152]	; (8006648 <RTC_WeekDayNum+0xe8>)
 80065b0:	fba1 1303 	umull	r1, r3, r1, r3
 80065b4:	095b      	lsrs	r3, r3, #5
 80065b6:	1ad2      	subs	r2, r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	4922      	ldr	r1, [pc, #136]	; (8006648 <RTC_WeekDayNum+0xe8>)
 80065be:	fba1 1303 	umull	r1, r3, r1, r3
 80065c2:	09db      	lsrs	r3, r3, #7
 80065c4:	4413      	add	r3, r2
 80065c6:	1d1a      	adds	r2, r3, #4
 80065c8:	4b20      	ldr	r3, [pc, #128]	; (800664c <RTC_WeekDayNum+0xec>)
 80065ca:	fba3 1302 	umull	r1, r3, r3, r2
 80065ce:	1ad1      	subs	r1, r2, r3
 80065d0:	0849      	lsrs	r1, r1, #1
 80065d2:	440b      	add	r3, r1
 80065d4:	0899      	lsrs	r1, r3, #2
 80065d6:	460b      	mov	r3, r1
 80065d8:	00db      	lsls	r3, r3, #3
 80065da:	1a5b      	subs	r3, r3, r1
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	e029      	b.n	8006636 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80065e2:	78fa      	ldrb	r2, [r7, #3]
 80065e4:	4613      	mov	r3, r2
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	4413      	add	r3, r2
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	1a9b      	subs	r3, r3, r2
 80065ee:	4a15      	ldr	r2, [pc, #84]	; (8006644 <RTC_WeekDayNum+0xe4>)
 80065f0:	fba2 2303 	umull	r2, r3, r2, r3
 80065f4:	085a      	lsrs	r2, r3, #1
 80065f6:	78bb      	ldrb	r3, [r7, #2]
 80065f8:	441a      	add	r2, r3
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	441a      	add	r2, r3
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	089b      	lsrs	r3, r3, #2
 8006602:	441a      	add	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4910      	ldr	r1, [pc, #64]	; (8006648 <RTC_WeekDayNum+0xe8>)
 8006608:	fba1 1303 	umull	r1, r3, r1, r3
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	1ad2      	subs	r2, r2, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	490d      	ldr	r1, [pc, #52]	; (8006648 <RTC_WeekDayNum+0xe8>)
 8006614:	fba1 1303 	umull	r1, r3, r1, r3
 8006618:	09db      	lsrs	r3, r3, #7
 800661a:	4413      	add	r3, r2
 800661c:	1c9a      	adds	r2, r3, #2
 800661e:	4b0b      	ldr	r3, [pc, #44]	; (800664c <RTC_WeekDayNum+0xec>)
 8006620:	fba3 1302 	umull	r1, r3, r3, r2
 8006624:	1ad1      	subs	r1, r2, r3
 8006626:	0849      	lsrs	r1, r1, #1
 8006628:	440b      	add	r3, r1
 800662a:	0899      	lsrs	r1, r3, #2
 800662c:	460b      	mov	r3, r1
 800662e:	00db      	lsls	r3, r3, #3
 8006630:	1a5b      	subs	r3, r3, r1
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	b2db      	uxtb	r3, r3
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	bc80      	pop	{r7}
 8006642:	4770      	bx	lr
 8006644:	38e38e39 	.word	0x38e38e39
 8006648:	51eb851f 	.word	0x51eb851f
 800664c:	24924925 	.word	0x24924925

08006650 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e041      	b.n	80066e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d106      	bne.n	800667c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7fc f80c 	bl	8002694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3304      	adds	r3, #4
 800668c:	4619      	mov	r1, r3
 800668e:	4610      	mov	r0, r2
 8006690:	f000 fa70 	bl	8006b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b01      	cmp	r3, #1
 8006702:	d001      	beq.n	8006708 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e03a      	b.n	800677e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68da      	ldr	r2, [r3, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0201 	orr.w	r2, r2, #1
 800671e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a18      	ldr	r2, [pc, #96]	; (8006788 <HAL_TIM_Base_Start_IT+0x98>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00e      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x58>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006732:	d009      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x58>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a14      	ldr	r2, [pc, #80]	; (800678c <HAL_TIM_Base_Start_IT+0x9c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d004      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x58>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a13      	ldr	r2, [pc, #76]	; (8006790 <HAL_TIM_Base_Start_IT+0xa0>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d111      	bne.n	800676c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b06      	cmp	r3, #6
 8006758:	d010      	beq.n	800677c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f042 0201 	orr.w	r2, r2, #1
 8006768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800676a:	e007      	b.n	800677c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0201 	orr.w	r2, r2, #1
 800677a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr
 8006788:	40012c00 	.word	0x40012c00
 800678c:	40000400 	.word	0x40000400
 8006790:	40000800 	.word	0x40000800

08006794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d122      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d11b      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f06f 0202 	mvn.w	r2, #2
 80067c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f9b1 	bl	8006b3e <HAL_TIM_IC_CaptureCallback>
 80067dc:	e005      	b.n	80067ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f9a4 	bl	8006b2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f9b3 	bl	8006b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f003 0304 	and.w	r3, r3, #4
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d122      	bne.n	8006844 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b04      	cmp	r3, #4
 800680a:	d11b      	bne.n	8006844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f06f 0204 	mvn.w	r2, #4
 8006814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2202      	movs	r2, #2
 800681a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f987 	bl	8006b3e <HAL_TIM_IC_CaptureCallback>
 8006830:	e005      	b.n	800683e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f97a 	bl	8006b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f989 	bl	8006b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b08      	cmp	r3, #8
 8006850:	d122      	bne.n	8006898 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b08      	cmp	r3, #8
 800685e:	d11b      	bne.n	8006898 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f06f 0208 	mvn.w	r2, #8
 8006868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2204      	movs	r2, #4
 800686e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	f003 0303 	and.w	r3, r3, #3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f95d 	bl	8006b3e <HAL_TIM_IC_CaptureCallback>
 8006884:	e005      	b.n	8006892 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f950 	bl	8006b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f95f 	bl	8006b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f003 0310 	and.w	r3, r3, #16
 80068a2:	2b10      	cmp	r3, #16
 80068a4:	d122      	bne.n	80068ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f003 0310 	and.w	r3, r3, #16
 80068b0:	2b10      	cmp	r3, #16
 80068b2:	d11b      	bne.n	80068ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f06f 0210 	mvn.w	r2, #16
 80068bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2208      	movs	r2, #8
 80068c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f933 	bl	8006b3e <HAL_TIM_IC_CaptureCallback>
 80068d8:	e005      	b.n	80068e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f926 	bl	8006b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f935 	bl	8006b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d10e      	bne.n	8006918 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b01      	cmp	r3, #1
 8006906:	d107      	bne.n	8006918 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f06f 0201 	mvn.w	r2, #1
 8006910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7fb fdae 	bl	8002474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006922:	2b80      	cmp	r3, #128	; 0x80
 8006924:	d10e      	bne.n	8006944 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006930:	2b80      	cmp	r3, #128	; 0x80
 8006932:	d107      	bne.n	8006944 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800693c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fa77 	bl	8006e32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694e:	2b40      	cmp	r3, #64	; 0x40
 8006950:	d10e      	bne.n	8006970 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695c:	2b40      	cmp	r3, #64	; 0x40
 800695e:	d107      	bne.n	8006970 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f8f9 	bl	8006b62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b20      	cmp	r3, #32
 800697c:	d10e      	bne.n	800699c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b20      	cmp	r3, #32
 800698a:	d107      	bne.n	800699c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0220 	mvn.w	r2, #32
 8006994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fa42 	bl	8006e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800699c:	bf00      	nop
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_TIM_ConfigClockSource+0x18>
 80069b8:	2302      	movs	r3, #2
 80069ba:	e0b3      	b.n	8006b24 <HAL_TIM_ConfigClockSource+0x180>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f4:	d03e      	beq.n	8006a74 <HAL_TIM_ConfigClockSource+0xd0>
 80069f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069fa:	f200 8087 	bhi.w	8006b0c <HAL_TIM_ConfigClockSource+0x168>
 80069fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a02:	f000 8085 	beq.w	8006b10 <HAL_TIM_ConfigClockSource+0x16c>
 8006a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a0a:	d87f      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x168>
 8006a0c:	2b70      	cmp	r3, #112	; 0x70
 8006a0e:	d01a      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0xa2>
 8006a10:	2b70      	cmp	r3, #112	; 0x70
 8006a12:	d87b      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x168>
 8006a14:	2b60      	cmp	r3, #96	; 0x60
 8006a16:	d050      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x116>
 8006a18:	2b60      	cmp	r3, #96	; 0x60
 8006a1a:	d877      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x168>
 8006a1c:	2b50      	cmp	r3, #80	; 0x50
 8006a1e:	d03c      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0xf6>
 8006a20:	2b50      	cmp	r3, #80	; 0x50
 8006a22:	d873      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x168>
 8006a24:	2b40      	cmp	r3, #64	; 0x40
 8006a26:	d058      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x136>
 8006a28:	2b40      	cmp	r3, #64	; 0x40
 8006a2a:	d86f      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x168>
 8006a2c:	2b30      	cmp	r3, #48	; 0x30
 8006a2e:	d064      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x156>
 8006a30:	2b30      	cmp	r3, #48	; 0x30
 8006a32:	d86b      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x168>
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d060      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x156>
 8006a38:	2b20      	cmp	r3, #32
 8006a3a:	d867      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x168>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d05c      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x156>
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	d05a      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006a44:	e062      	b.n	8006b0c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	6899      	ldr	r1, [r3, #8]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f000 f966 	bl	8006d26 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a68:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	609a      	str	r2, [r3, #8]
      break;
 8006a72:	e04e      	b.n	8006b12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6818      	ldr	r0, [r3, #0]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	6899      	ldr	r1, [r3, #8]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f000 f94f 	bl	8006d26 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a96:	609a      	str	r2, [r3, #8]
      break;
 8006a98:	e03b      	b.n	8006b12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	6859      	ldr	r1, [r3, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f000 f8c6 	bl	8006c38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2150      	movs	r1, #80	; 0x50
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 f91d 	bl	8006cf2 <TIM_ITRx_SetConfig>
      break;
 8006ab8:	e02b      	b.n	8006b12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6859      	ldr	r1, [r3, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f000 f8e4 	bl	8006c94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2160      	movs	r1, #96	; 0x60
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 f90d 	bl	8006cf2 <TIM_ITRx_SetConfig>
      break;
 8006ad8:	e01b      	b.n	8006b12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	6859      	ldr	r1, [r3, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f000 f8a6 	bl	8006c38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2140      	movs	r1, #64	; 0x40
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 f8fd 	bl	8006cf2 <TIM_ITRx_SetConfig>
      break;
 8006af8:	e00b      	b.n	8006b12 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4619      	mov	r1, r3
 8006b04:	4610      	mov	r0, r2
 8006b06:	f000 f8f4 	bl	8006cf2 <TIM_ITRx_SetConfig>
        break;
 8006b0a:	e002      	b.n	8006b12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b0c:	bf00      	nop
 8006b0e:	e000      	b.n	8006b12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bc80      	pop	{r7}
 8006b3c:	4770      	bx	lr

08006b3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b46:	bf00      	nop
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bc80      	pop	{r7}
 8006b4e:	4770      	bx	lr

08006b50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr

08006b62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b6a:	bf00      	nop
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bc80      	pop	{r7}
 8006b72:	4770      	bx	lr

08006b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a29      	ldr	r2, [pc, #164]	; (8006c2c <TIM_Base_SetConfig+0xb8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d00b      	beq.n	8006ba4 <TIM_Base_SetConfig+0x30>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b92:	d007      	beq.n	8006ba4 <TIM_Base_SetConfig+0x30>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a26      	ldr	r2, [pc, #152]	; (8006c30 <TIM_Base_SetConfig+0xbc>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d003      	beq.n	8006ba4 <TIM_Base_SetConfig+0x30>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a25      	ldr	r2, [pc, #148]	; (8006c34 <TIM_Base_SetConfig+0xc0>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d108      	bne.n	8006bb6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a1c      	ldr	r2, [pc, #112]	; (8006c2c <TIM_Base_SetConfig+0xb8>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d00b      	beq.n	8006bd6 <TIM_Base_SetConfig+0x62>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bc4:	d007      	beq.n	8006bd6 <TIM_Base_SetConfig+0x62>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a19      	ldr	r2, [pc, #100]	; (8006c30 <TIM_Base_SetConfig+0xbc>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d003      	beq.n	8006bd6 <TIM_Base_SetConfig+0x62>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a18      	ldr	r2, [pc, #96]	; (8006c34 <TIM_Base_SetConfig+0xc0>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d108      	bne.n	8006be8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a07      	ldr	r2, [pc, #28]	; (8006c2c <TIM_Base_SetConfig+0xb8>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d103      	bne.n	8006c1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	691a      	ldr	r2, [r3, #16]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	615a      	str	r2, [r3, #20]
}
 8006c22:	bf00      	nop
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bc80      	pop	{r7}
 8006c2a:	4770      	bx	lr
 8006c2c:	40012c00 	.word	0x40012c00
 8006c30:	40000400 	.word	0x40000400
 8006c34:	40000800 	.word	0x40000800

08006c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	f023 0201 	bic.w	r2, r3, #1
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	011b      	lsls	r3, r3, #4
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f023 030a 	bic.w	r3, r3, #10
 8006c74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	621a      	str	r2, [r3, #32]
}
 8006c8a:	bf00      	nop
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bc80      	pop	{r7}
 8006c92:	4770      	bx	lr

08006c94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	f023 0210 	bic.w	r2, r3, #16
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	031b      	lsls	r3, r3, #12
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	011b      	lsls	r3, r3, #4
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	621a      	str	r2, [r3, #32]
}
 8006ce8:	bf00      	nop
 8006cea:	371c      	adds	r7, #28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bc80      	pop	{r7}
 8006cf0:	4770      	bx	lr

08006cf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	f043 0307 	orr.w	r3, r3, #7
 8006d14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	609a      	str	r2, [r3, #8]
}
 8006d1c:	bf00      	nop
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr

08006d26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b087      	sub	sp, #28
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	607a      	str	r2, [r7, #4]
 8006d32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	021a      	lsls	r2, r3, #8
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	609a      	str	r2, [r3, #8]
}
 8006d5a:	bf00      	nop
 8006d5c:	371c      	adds	r7, #28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bc80      	pop	{r7}
 8006d62:	4770      	bx	lr

08006d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e046      	b.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a16      	ldr	r2, [pc, #88]	; (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00e      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc8:	d009      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a12      	ldr	r2, [pc, #72]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d004      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a10      	ldr	r2, [pc, #64]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d10c      	bne.n	8006df8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr
 8006e14:	40012c00 	.word	0x40012c00
 8006e18:	40000400 	.word	0x40000400
 8006e1c:	40000800 	.word	0x40000800

08006e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bc80      	pop	{r7}
 8006e30:	4770      	bx	lr

08006e32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bc80      	pop	{r7}
 8006e42:	4770      	bx	lr

08006e44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e03f      	b.n	8006ed6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7fb fc38 	bl	80026e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2224      	movs	r2, #36	; 0x24
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68da      	ldr	r2, [r3, #12]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f905 	bl	8007098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	691a      	ldr	r2, [r3, #16]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	695a      	ldr	r2, [r3, #20]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68da      	ldr	r2, [r3, #12]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ebc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b08a      	sub	sp, #40	; 0x28
 8006ee2:	af02      	add	r7, sp, #8
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	60b9      	str	r1, [r7, #8]
 8006ee8:	603b      	str	r3, [r7, #0]
 8006eea:	4613      	mov	r3, r2
 8006eec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b20      	cmp	r3, #32
 8006efc:	d17c      	bne.n	8006ff8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <HAL_UART_Transmit+0x2c>
 8006f04:	88fb      	ldrh	r3, [r7, #6]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e075      	b.n	8006ffa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d101      	bne.n	8006f1c <HAL_UART_Transmit+0x3e>
 8006f18:	2302      	movs	r3, #2
 8006f1a:	e06e      	b.n	8006ffa <HAL_UART_Transmit+0x11c>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2221      	movs	r2, #33	; 0x21
 8006f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f32:	f7fb fd9b 	bl	8002a6c <HAL_GetTick>
 8006f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	88fa      	ldrh	r2, [r7, #6]
 8006f3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	88fa      	ldrh	r2, [r7, #6]
 8006f42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f4c:	d108      	bne.n	8006f60 <HAL_UART_Transmit+0x82>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d104      	bne.n	8006f60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	61bb      	str	r3, [r7, #24]
 8006f5e:	e003      	b.n	8006f68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f64:	2300      	movs	r3, #0
 8006f66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006f70:	e02a      	b.n	8006fc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2180      	movs	r1, #128	; 0x80
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 f840 	bl	8007002 <UART_WaitOnFlagUntilTimeout>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e036      	b.n	8006ffa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10b      	bne.n	8006faa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	3302      	adds	r3, #2
 8006fa6:	61bb      	str	r3, [r7, #24]
 8006fa8:	e007      	b.n	8006fba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	781a      	ldrb	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1cf      	bne.n	8006f72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2140      	movs	r1, #64	; 0x40
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 f810 	bl	8007002 <UART_WaitOnFlagUntilTimeout>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e006      	b.n	8006ffa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	e000      	b.n	8006ffa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ff8:	2302      	movs	r3, #2
  }
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3720      	adds	r7, #32
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b084      	sub	sp, #16
 8007006:	af00      	add	r7, sp, #0
 8007008:	60f8      	str	r0, [r7, #12]
 800700a:	60b9      	str	r1, [r7, #8]
 800700c:	603b      	str	r3, [r7, #0]
 800700e:	4613      	mov	r3, r2
 8007010:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007012:	e02c      	b.n	800706e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701a:	d028      	beq.n	800706e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d007      	beq.n	8007032 <UART_WaitOnFlagUntilTimeout+0x30>
 8007022:	f7fb fd23 	bl	8002a6c <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	429a      	cmp	r2, r3
 8007030:	d21d      	bcs.n	800706e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68da      	ldr	r2, [r3, #12]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007040:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	695a      	ldr	r2, [r3, #20]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0201 	bic.w	r2, r2, #1
 8007050:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2220      	movs	r2, #32
 8007056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2220      	movs	r2, #32
 800705e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e00f      	b.n	800708e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	4013      	ands	r3, r2
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	429a      	cmp	r2, r3
 800707c:	bf0c      	ite	eq
 800707e:	2301      	moveq	r3, #1
 8007080:	2300      	movne	r3, #0
 8007082:	b2db      	uxtb	r3, r3
 8007084:	461a      	mov	r2, r3
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	429a      	cmp	r2, r3
 800708a:	d0c3      	beq.n	8007014 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
	...

08007098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68da      	ldr	r2, [r3, #12]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	431a      	orrs	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80070d2:	f023 030c 	bic.w	r3, r3, #12
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	6812      	ldr	r2, [r2, #0]
 80070da:	68b9      	ldr	r1, [r7, #8]
 80070dc:	430b      	orrs	r3, r1
 80070de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a2c      	ldr	r2, [pc, #176]	; (80071ac <UART_SetConfig+0x114>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d103      	bne.n	8007108 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007100:	f7fe fb4c 	bl	800579c <HAL_RCC_GetPCLK2Freq>
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	e002      	b.n	800710e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007108:	f7fe fb34 	bl	8005774 <HAL_RCC_GetPCLK1Freq>
 800710c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	009a      	lsls	r2, r3, #2
 8007118:	441a      	add	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	fbb2 f3f3 	udiv	r3, r2, r3
 8007124:	4a22      	ldr	r2, [pc, #136]	; (80071b0 <UART_SetConfig+0x118>)
 8007126:	fba2 2303 	umull	r2, r3, r2, r3
 800712a:	095b      	lsrs	r3, r3, #5
 800712c:	0119      	lsls	r1, r3, #4
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4613      	mov	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	009a      	lsls	r2, r3, #2
 8007138:	441a      	add	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	fbb2 f2f3 	udiv	r2, r2, r3
 8007144:	4b1a      	ldr	r3, [pc, #104]	; (80071b0 <UART_SetConfig+0x118>)
 8007146:	fba3 0302 	umull	r0, r3, r3, r2
 800714a:	095b      	lsrs	r3, r3, #5
 800714c:	2064      	movs	r0, #100	; 0x64
 800714e:	fb00 f303 	mul.w	r3, r0, r3
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	3332      	adds	r3, #50	; 0x32
 8007158:	4a15      	ldr	r2, [pc, #84]	; (80071b0 <UART_SetConfig+0x118>)
 800715a:	fba2 2303 	umull	r2, r3, r2, r3
 800715e:	095b      	lsrs	r3, r3, #5
 8007160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007164:	4419      	add	r1, r3
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	009a      	lsls	r2, r3, #2
 8007170:	441a      	add	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	fbb2 f2f3 	udiv	r2, r2, r3
 800717c:	4b0c      	ldr	r3, [pc, #48]	; (80071b0 <UART_SetConfig+0x118>)
 800717e:	fba3 0302 	umull	r0, r3, r3, r2
 8007182:	095b      	lsrs	r3, r3, #5
 8007184:	2064      	movs	r0, #100	; 0x64
 8007186:	fb00 f303 	mul.w	r3, r0, r3
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	011b      	lsls	r3, r3, #4
 800718e:	3332      	adds	r3, #50	; 0x32
 8007190:	4a07      	ldr	r2, [pc, #28]	; (80071b0 <UART_SetConfig+0x118>)
 8007192:	fba2 2303 	umull	r2, r3, r2, r3
 8007196:	095b      	lsrs	r3, r3, #5
 8007198:	f003 020f 	and.w	r2, r3, #15
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	440a      	add	r2, r1
 80071a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80071a4:	bf00      	nop
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	40013800 	.word	0x40013800
 80071b0:	51eb851f 	.word	0x51eb851f

080071b4 <__errno>:
 80071b4:	4b01      	ldr	r3, [pc, #4]	; (80071bc <__errno+0x8>)
 80071b6:	6818      	ldr	r0, [r3, #0]
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	2000018c 	.word	0x2000018c

080071c0 <__libc_init_array>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	2600      	movs	r6, #0
 80071c4:	4d0c      	ldr	r5, [pc, #48]	; (80071f8 <__libc_init_array+0x38>)
 80071c6:	4c0d      	ldr	r4, [pc, #52]	; (80071fc <__libc_init_array+0x3c>)
 80071c8:	1b64      	subs	r4, r4, r5
 80071ca:	10a4      	asrs	r4, r4, #2
 80071cc:	42a6      	cmp	r6, r4
 80071ce:	d109      	bne.n	80071e4 <__libc_init_array+0x24>
 80071d0:	f004 fce0 	bl	800bb94 <_init>
 80071d4:	2600      	movs	r6, #0
 80071d6:	4d0a      	ldr	r5, [pc, #40]	; (8007200 <__libc_init_array+0x40>)
 80071d8:	4c0a      	ldr	r4, [pc, #40]	; (8007204 <__libc_init_array+0x44>)
 80071da:	1b64      	subs	r4, r4, r5
 80071dc:	10a4      	asrs	r4, r4, #2
 80071de:	42a6      	cmp	r6, r4
 80071e0:	d105      	bne.n	80071ee <__libc_init_array+0x2e>
 80071e2:	bd70      	pop	{r4, r5, r6, pc}
 80071e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071e8:	4798      	blx	r3
 80071ea:	3601      	adds	r6, #1
 80071ec:	e7ee      	b.n	80071cc <__libc_init_array+0xc>
 80071ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f2:	4798      	blx	r3
 80071f4:	3601      	adds	r6, #1
 80071f6:	e7f2      	b.n	80071de <__libc_init_array+0x1e>
 80071f8:	0800c1f4 	.word	0x0800c1f4
 80071fc:	0800c1f4 	.word	0x0800c1f4
 8007200:	0800c1f4 	.word	0x0800c1f4
 8007204:	0800c1f8 	.word	0x0800c1f8

08007208 <memset>:
 8007208:	4603      	mov	r3, r0
 800720a:	4402      	add	r2, r0
 800720c:	4293      	cmp	r3, r2
 800720e:	d100      	bne.n	8007212 <memset+0xa>
 8007210:	4770      	bx	lr
 8007212:	f803 1b01 	strb.w	r1, [r3], #1
 8007216:	e7f9      	b.n	800720c <memset+0x4>

08007218 <__cvt>:
 8007218:	2b00      	cmp	r3, #0
 800721a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800721e:	461f      	mov	r7, r3
 8007220:	bfbb      	ittet	lt
 8007222:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007226:	461f      	movlt	r7, r3
 8007228:	2300      	movge	r3, #0
 800722a:	232d      	movlt	r3, #45	; 0x2d
 800722c:	b088      	sub	sp, #32
 800722e:	4614      	mov	r4, r2
 8007230:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007232:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007234:	7013      	strb	r3, [r2, #0]
 8007236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007238:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800723c:	f023 0820 	bic.w	r8, r3, #32
 8007240:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007244:	d005      	beq.n	8007252 <__cvt+0x3a>
 8007246:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800724a:	d100      	bne.n	800724e <__cvt+0x36>
 800724c:	3501      	adds	r5, #1
 800724e:	2302      	movs	r3, #2
 8007250:	e000      	b.n	8007254 <__cvt+0x3c>
 8007252:	2303      	movs	r3, #3
 8007254:	aa07      	add	r2, sp, #28
 8007256:	9204      	str	r2, [sp, #16]
 8007258:	aa06      	add	r2, sp, #24
 800725a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800725e:	e9cd 3500 	strd	r3, r5, [sp]
 8007262:	4622      	mov	r2, r4
 8007264:	463b      	mov	r3, r7
 8007266:	f001 fed3 	bl	8009010 <_dtoa_r>
 800726a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800726e:	4606      	mov	r6, r0
 8007270:	d102      	bne.n	8007278 <__cvt+0x60>
 8007272:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007274:	07db      	lsls	r3, r3, #31
 8007276:	d522      	bpl.n	80072be <__cvt+0xa6>
 8007278:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800727c:	eb06 0905 	add.w	r9, r6, r5
 8007280:	d110      	bne.n	80072a4 <__cvt+0x8c>
 8007282:	7833      	ldrb	r3, [r6, #0]
 8007284:	2b30      	cmp	r3, #48	; 0x30
 8007286:	d10a      	bne.n	800729e <__cvt+0x86>
 8007288:	2200      	movs	r2, #0
 800728a:	2300      	movs	r3, #0
 800728c:	4620      	mov	r0, r4
 800728e:	4639      	mov	r1, r7
 8007290:	f7f9 fb8a 	bl	80009a8 <__aeabi_dcmpeq>
 8007294:	b918      	cbnz	r0, 800729e <__cvt+0x86>
 8007296:	f1c5 0501 	rsb	r5, r5, #1
 800729a:	f8ca 5000 	str.w	r5, [sl]
 800729e:	f8da 3000 	ldr.w	r3, [sl]
 80072a2:	4499      	add	r9, r3
 80072a4:	2200      	movs	r2, #0
 80072a6:	2300      	movs	r3, #0
 80072a8:	4620      	mov	r0, r4
 80072aa:	4639      	mov	r1, r7
 80072ac:	f7f9 fb7c 	bl	80009a8 <__aeabi_dcmpeq>
 80072b0:	b108      	cbz	r0, 80072b6 <__cvt+0x9e>
 80072b2:	f8cd 901c 	str.w	r9, [sp, #28]
 80072b6:	2230      	movs	r2, #48	; 0x30
 80072b8:	9b07      	ldr	r3, [sp, #28]
 80072ba:	454b      	cmp	r3, r9
 80072bc:	d307      	bcc.n	80072ce <__cvt+0xb6>
 80072be:	4630      	mov	r0, r6
 80072c0:	9b07      	ldr	r3, [sp, #28]
 80072c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80072c4:	1b9b      	subs	r3, r3, r6
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	b008      	add	sp, #32
 80072ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ce:	1c59      	adds	r1, r3, #1
 80072d0:	9107      	str	r1, [sp, #28]
 80072d2:	701a      	strb	r2, [r3, #0]
 80072d4:	e7f0      	b.n	80072b8 <__cvt+0xa0>

080072d6 <__exponent>:
 80072d6:	4603      	mov	r3, r0
 80072d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072da:	2900      	cmp	r1, #0
 80072dc:	f803 2b02 	strb.w	r2, [r3], #2
 80072e0:	bfb6      	itet	lt
 80072e2:	222d      	movlt	r2, #45	; 0x2d
 80072e4:	222b      	movge	r2, #43	; 0x2b
 80072e6:	4249      	neglt	r1, r1
 80072e8:	2909      	cmp	r1, #9
 80072ea:	7042      	strb	r2, [r0, #1]
 80072ec:	dd2b      	ble.n	8007346 <__exponent+0x70>
 80072ee:	f10d 0407 	add.w	r4, sp, #7
 80072f2:	46a4      	mov	ip, r4
 80072f4:	270a      	movs	r7, #10
 80072f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80072fa:	460a      	mov	r2, r1
 80072fc:	46a6      	mov	lr, r4
 80072fe:	fb07 1516 	mls	r5, r7, r6, r1
 8007302:	2a63      	cmp	r2, #99	; 0x63
 8007304:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007308:	4631      	mov	r1, r6
 800730a:	f104 34ff 	add.w	r4, r4, #4294967295
 800730e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007312:	dcf0      	bgt.n	80072f6 <__exponent+0x20>
 8007314:	3130      	adds	r1, #48	; 0x30
 8007316:	f1ae 0502 	sub.w	r5, lr, #2
 800731a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800731e:	4629      	mov	r1, r5
 8007320:	1c44      	adds	r4, r0, #1
 8007322:	4561      	cmp	r1, ip
 8007324:	d30a      	bcc.n	800733c <__exponent+0x66>
 8007326:	f10d 0209 	add.w	r2, sp, #9
 800732a:	eba2 020e 	sub.w	r2, r2, lr
 800732e:	4565      	cmp	r5, ip
 8007330:	bf88      	it	hi
 8007332:	2200      	movhi	r2, #0
 8007334:	4413      	add	r3, r2
 8007336:	1a18      	subs	r0, r3, r0
 8007338:	b003      	add	sp, #12
 800733a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800733c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007340:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007344:	e7ed      	b.n	8007322 <__exponent+0x4c>
 8007346:	2330      	movs	r3, #48	; 0x30
 8007348:	3130      	adds	r1, #48	; 0x30
 800734a:	7083      	strb	r3, [r0, #2]
 800734c:	70c1      	strb	r1, [r0, #3]
 800734e:	1d03      	adds	r3, r0, #4
 8007350:	e7f1      	b.n	8007336 <__exponent+0x60>
	...

08007354 <_printf_float>:
 8007354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007358:	b091      	sub	sp, #68	; 0x44
 800735a:	460c      	mov	r4, r1
 800735c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007360:	4616      	mov	r6, r2
 8007362:	461f      	mov	r7, r3
 8007364:	4605      	mov	r5, r0
 8007366:	f003 f95b 	bl	800a620 <_localeconv_r>
 800736a:	6803      	ldr	r3, [r0, #0]
 800736c:	4618      	mov	r0, r3
 800736e:	9309      	str	r3, [sp, #36]	; 0x24
 8007370:	f7f8 feee 	bl	8000150 <strlen>
 8007374:	2300      	movs	r3, #0
 8007376:	930e      	str	r3, [sp, #56]	; 0x38
 8007378:	f8d8 3000 	ldr.w	r3, [r8]
 800737c:	900a      	str	r0, [sp, #40]	; 0x28
 800737e:	3307      	adds	r3, #7
 8007380:	f023 0307 	bic.w	r3, r3, #7
 8007384:	f103 0208 	add.w	r2, r3, #8
 8007388:	f894 9018 	ldrb.w	r9, [r4, #24]
 800738c:	f8d4 b000 	ldr.w	fp, [r4]
 8007390:	f8c8 2000 	str.w	r2, [r8]
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800739c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80073a0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80073a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80073a6:	f04f 32ff 	mov.w	r2, #4294967295
 80073aa:	4640      	mov	r0, r8
 80073ac:	4b9c      	ldr	r3, [pc, #624]	; (8007620 <_printf_float+0x2cc>)
 80073ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073b0:	f7f9 fb2c 	bl	8000a0c <__aeabi_dcmpun>
 80073b4:	bb70      	cbnz	r0, 8007414 <_printf_float+0xc0>
 80073b6:	f04f 32ff 	mov.w	r2, #4294967295
 80073ba:	4640      	mov	r0, r8
 80073bc:	4b98      	ldr	r3, [pc, #608]	; (8007620 <_printf_float+0x2cc>)
 80073be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073c0:	f7f9 fb06 	bl	80009d0 <__aeabi_dcmple>
 80073c4:	bb30      	cbnz	r0, 8007414 <_printf_float+0xc0>
 80073c6:	2200      	movs	r2, #0
 80073c8:	2300      	movs	r3, #0
 80073ca:	4640      	mov	r0, r8
 80073cc:	4651      	mov	r1, sl
 80073ce:	f7f9 faf5 	bl	80009bc <__aeabi_dcmplt>
 80073d2:	b110      	cbz	r0, 80073da <_printf_float+0x86>
 80073d4:	232d      	movs	r3, #45	; 0x2d
 80073d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073da:	4b92      	ldr	r3, [pc, #584]	; (8007624 <_printf_float+0x2d0>)
 80073dc:	4892      	ldr	r0, [pc, #584]	; (8007628 <_printf_float+0x2d4>)
 80073de:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80073e2:	bf94      	ite	ls
 80073e4:	4698      	movls	r8, r3
 80073e6:	4680      	movhi	r8, r0
 80073e8:	2303      	movs	r3, #3
 80073ea:	f04f 0a00 	mov.w	sl, #0
 80073ee:	6123      	str	r3, [r4, #16]
 80073f0:	f02b 0304 	bic.w	r3, fp, #4
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	4633      	mov	r3, r6
 80073f8:	4621      	mov	r1, r4
 80073fa:	4628      	mov	r0, r5
 80073fc:	9700      	str	r7, [sp, #0]
 80073fe:	aa0f      	add	r2, sp, #60	; 0x3c
 8007400:	f000 f9d4 	bl	80077ac <_printf_common>
 8007404:	3001      	adds	r0, #1
 8007406:	f040 8090 	bne.w	800752a <_printf_float+0x1d6>
 800740a:	f04f 30ff 	mov.w	r0, #4294967295
 800740e:	b011      	add	sp, #68	; 0x44
 8007410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007414:	4642      	mov	r2, r8
 8007416:	4653      	mov	r3, sl
 8007418:	4640      	mov	r0, r8
 800741a:	4651      	mov	r1, sl
 800741c:	f7f9 faf6 	bl	8000a0c <__aeabi_dcmpun>
 8007420:	b148      	cbz	r0, 8007436 <_printf_float+0xe2>
 8007422:	f1ba 0f00 	cmp.w	sl, #0
 8007426:	bfb8      	it	lt
 8007428:	232d      	movlt	r3, #45	; 0x2d
 800742a:	4880      	ldr	r0, [pc, #512]	; (800762c <_printf_float+0x2d8>)
 800742c:	bfb8      	it	lt
 800742e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007432:	4b7f      	ldr	r3, [pc, #508]	; (8007630 <_printf_float+0x2dc>)
 8007434:	e7d3      	b.n	80073de <_printf_float+0x8a>
 8007436:	6863      	ldr	r3, [r4, #4]
 8007438:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800743c:	1c5a      	adds	r2, r3, #1
 800743e:	d142      	bne.n	80074c6 <_printf_float+0x172>
 8007440:	2306      	movs	r3, #6
 8007442:	6063      	str	r3, [r4, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	9206      	str	r2, [sp, #24]
 8007448:	aa0e      	add	r2, sp, #56	; 0x38
 800744a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800744e:	aa0d      	add	r2, sp, #52	; 0x34
 8007450:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007454:	9203      	str	r2, [sp, #12]
 8007456:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800745a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800745e:	6023      	str	r3, [r4, #0]
 8007460:	6863      	ldr	r3, [r4, #4]
 8007462:	4642      	mov	r2, r8
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	4628      	mov	r0, r5
 8007468:	4653      	mov	r3, sl
 800746a:	910b      	str	r1, [sp, #44]	; 0x2c
 800746c:	f7ff fed4 	bl	8007218 <__cvt>
 8007470:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007472:	4680      	mov	r8, r0
 8007474:	2947      	cmp	r1, #71	; 0x47
 8007476:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007478:	d108      	bne.n	800748c <_printf_float+0x138>
 800747a:	1cc8      	adds	r0, r1, #3
 800747c:	db02      	blt.n	8007484 <_printf_float+0x130>
 800747e:	6863      	ldr	r3, [r4, #4]
 8007480:	4299      	cmp	r1, r3
 8007482:	dd40      	ble.n	8007506 <_printf_float+0x1b2>
 8007484:	f1a9 0902 	sub.w	r9, r9, #2
 8007488:	fa5f f989 	uxtb.w	r9, r9
 800748c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007490:	d81f      	bhi.n	80074d2 <_printf_float+0x17e>
 8007492:	464a      	mov	r2, r9
 8007494:	3901      	subs	r1, #1
 8007496:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800749a:	910d      	str	r1, [sp, #52]	; 0x34
 800749c:	f7ff ff1b 	bl	80072d6 <__exponent>
 80074a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074a2:	4682      	mov	sl, r0
 80074a4:	1813      	adds	r3, r2, r0
 80074a6:	2a01      	cmp	r2, #1
 80074a8:	6123      	str	r3, [r4, #16]
 80074aa:	dc02      	bgt.n	80074b2 <_printf_float+0x15e>
 80074ac:	6822      	ldr	r2, [r4, #0]
 80074ae:	07d2      	lsls	r2, r2, #31
 80074b0:	d501      	bpl.n	80074b6 <_printf_float+0x162>
 80074b2:	3301      	adds	r3, #1
 80074b4:	6123      	str	r3, [r4, #16]
 80074b6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d09b      	beq.n	80073f6 <_printf_float+0xa2>
 80074be:	232d      	movs	r3, #45	; 0x2d
 80074c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074c4:	e797      	b.n	80073f6 <_printf_float+0xa2>
 80074c6:	2947      	cmp	r1, #71	; 0x47
 80074c8:	d1bc      	bne.n	8007444 <_printf_float+0xf0>
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1ba      	bne.n	8007444 <_printf_float+0xf0>
 80074ce:	2301      	movs	r3, #1
 80074d0:	e7b7      	b.n	8007442 <_printf_float+0xee>
 80074d2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80074d6:	d118      	bne.n	800750a <_printf_float+0x1b6>
 80074d8:	2900      	cmp	r1, #0
 80074da:	6863      	ldr	r3, [r4, #4]
 80074dc:	dd0b      	ble.n	80074f6 <_printf_float+0x1a2>
 80074de:	6121      	str	r1, [r4, #16]
 80074e0:	b913      	cbnz	r3, 80074e8 <_printf_float+0x194>
 80074e2:	6822      	ldr	r2, [r4, #0]
 80074e4:	07d0      	lsls	r0, r2, #31
 80074e6:	d502      	bpl.n	80074ee <_printf_float+0x19a>
 80074e8:	3301      	adds	r3, #1
 80074ea:	440b      	add	r3, r1
 80074ec:	6123      	str	r3, [r4, #16]
 80074ee:	f04f 0a00 	mov.w	sl, #0
 80074f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80074f4:	e7df      	b.n	80074b6 <_printf_float+0x162>
 80074f6:	b913      	cbnz	r3, 80074fe <_printf_float+0x1aa>
 80074f8:	6822      	ldr	r2, [r4, #0]
 80074fa:	07d2      	lsls	r2, r2, #31
 80074fc:	d501      	bpl.n	8007502 <_printf_float+0x1ae>
 80074fe:	3302      	adds	r3, #2
 8007500:	e7f4      	b.n	80074ec <_printf_float+0x198>
 8007502:	2301      	movs	r3, #1
 8007504:	e7f2      	b.n	80074ec <_printf_float+0x198>
 8007506:	f04f 0967 	mov.w	r9, #103	; 0x67
 800750a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800750c:	4299      	cmp	r1, r3
 800750e:	db05      	blt.n	800751c <_printf_float+0x1c8>
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	6121      	str	r1, [r4, #16]
 8007514:	07d8      	lsls	r0, r3, #31
 8007516:	d5ea      	bpl.n	80074ee <_printf_float+0x19a>
 8007518:	1c4b      	adds	r3, r1, #1
 800751a:	e7e7      	b.n	80074ec <_printf_float+0x198>
 800751c:	2900      	cmp	r1, #0
 800751e:	bfcc      	ite	gt
 8007520:	2201      	movgt	r2, #1
 8007522:	f1c1 0202 	rsble	r2, r1, #2
 8007526:	4413      	add	r3, r2
 8007528:	e7e0      	b.n	80074ec <_printf_float+0x198>
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	055a      	lsls	r2, r3, #21
 800752e:	d407      	bmi.n	8007540 <_printf_float+0x1ec>
 8007530:	6923      	ldr	r3, [r4, #16]
 8007532:	4642      	mov	r2, r8
 8007534:	4631      	mov	r1, r6
 8007536:	4628      	mov	r0, r5
 8007538:	47b8      	blx	r7
 800753a:	3001      	adds	r0, #1
 800753c:	d12b      	bne.n	8007596 <_printf_float+0x242>
 800753e:	e764      	b.n	800740a <_printf_float+0xb6>
 8007540:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007544:	f240 80dd 	bls.w	8007702 <_printf_float+0x3ae>
 8007548:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800754c:	2200      	movs	r2, #0
 800754e:	2300      	movs	r3, #0
 8007550:	f7f9 fa2a 	bl	80009a8 <__aeabi_dcmpeq>
 8007554:	2800      	cmp	r0, #0
 8007556:	d033      	beq.n	80075c0 <_printf_float+0x26c>
 8007558:	2301      	movs	r3, #1
 800755a:	4631      	mov	r1, r6
 800755c:	4628      	mov	r0, r5
 800755e:	4a35      	ldr	r2, [pc, #212]	; (8007634 <_printf_float+0x2e0>)
 8007560:	47b8      	blx	r7
 8007562:	3001      	adds	r0, #1
 8007564:	f43f af51 	beq.w	800740a <_printf_float+0xb6>
 8007568:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800756c:	429a      	cmp	r2, r3
 800756e:	db02      	blt.n	8007576 <_printf_float+0x222>
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	07d8      	lsls	r0, r3, #31
 8007574:	d50f      	bpl.n	8007596 <_printf_float+0x242>
 8007576:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800757a:	4631      	mov	r1, r6
 800757c:	4628      	mov	r0, r5
 800757e:	47b8      	blx	r7
 8007580:	3001      	adds	r0, #1
 8007582:	f43f af42 	beq.w	800740a <_printf_float+0xb6>
 8007586:	f04f 0800 	mov.w	r8, #0
 800758a:	f104 091a 	add.w	r9, r4, #26
 800758e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007590:	3b01      	subs	r3, #1
 8007592:	4543      	cmp	r3, r8
 8007594:	dc09      	bgt.n	80075aa <_printf_float+0x256>
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	079b      	lsls	r3, r3, #30
 800759a:	f100 8102 	bmi.w	80077a2 <_printf_float+0x44e>
 800759e:	68e0      	ldr	r0, [r4, #12]
 80075a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075a2:	4298      	cmp	r0, r3
 80075a4:	bfb8      	it	lt
 80075a6:	4618      	movlt	r0, r3
 80075a8:	e731      	b.n	800740e <_printf_float+0xba>
 80075aa:	2301      	movs	r3, #1
 80075ac:	464a      	mov	r2, r9
 80075ae:	4631      	mov	r1, r6
 80075b0:	4628      	mov	r0, r5
 80075b2:	47b8      	blx	r7
 80075b4:	3001      	adds	r0, #1
 80075b6:	f43f af28 	beq.w	800740a <_printf_float+0xb6>
 80075ba:	f108 0801 	add.w	r8, r8, #1
 80075be:	e7e6      	b.n	800758e <_printf_float+0x23a>
 80075c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	dc38      	bgt.n	8007638 <_printf_float+0x2e4>
 80075c6:	2301      	movs	r3, #1
 80075c8:	4631      	mov	r1, r6
 80075ca:	4628      	mov	r0, r5
 80075cc:	4a19      	ldr	r2, [pc, #100]	; (8007634 <_printf_float+0x2e0>)
 80075ce:	47b8      	blx	r7
 80075d0:	3001      	adds	r0, #1
 80075d2:	f43f af1a 	beq.w	800740a <_printf_float+0xb6>
 80075d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80075da:	4313      	orrs	r3, r2
 80075dc:	d102      	bne.n	80075e4 <_printf_float+0x290>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	07d9      	lsls	r1, r3, #31
 80075e2:	d5d8      	bpl.n	8007596 <_printf_float+0x242>
 80075e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075e8:	4631      	mov	r1, r6
 80075ea:	4628      	mov	r0, r5
 80075ec:	47b8      	blx	r7
 80075ee:	3001      	adds	r0, #1
 80075f0:	f43f af0b 	beq.w	800740a <_printf_float+0xb6>
 80075f4:	f04f 0900 	mov.w	r9, #0
 80075f8:	f104 0a1a 	add.w	sl, r4, #26
 80075fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075fe:	425b      	negs	r3, r3
 8007600:	454b      	cmp	r3, r9
 8007602:	dc01      	bgt.n	8007608 <_printf_float+0x2b4>
 8007604:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007606:	e794      	b.n	8007532 <_printf_float+0x1de>
 8007608:	2301      	movs	r3, #1
 800760a:	4652      	mov	r2, sl
 800760c:	4631      	mov	r1, r6
 800760e:	4628      	mov	r0, r5
 8007610:	47b8      	blx	r7
 8007612:	3001      	adds	r0, #1
 8007614:	f43f aef9 	beq.w	800740a <_printf_float+0xb6>
 8007618:	f109 0901 	add.w	r9, r9, #1
 800761c:	e7ee      	b.n	80075fc <_printf_float+0x2a8>
 800761e:	bf00      	nop
 8007620:	7fefffff 	.word	0x7fefffff
 8007624:	0800bd48 	.word	0x0800bd48
 8007628:	0800bd4c 	.word	0x0800bd4c
 800762c:	0800bd54 	.word	0x0800bd54
 8007630:	0800bd50 	.word	0x0800bd50
 8007634:	0800bd58 	.word	0x0800bd58
 8007638:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800763a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800763c:	429a      	cmp	r2, r3
 800763e:	bfa8      	it	ge
 8007640:	461a      	movge	r2, r3
 8007642:	2a00      	cmp	r2, #0
 8007644:	4691      	mov	r9, r2
 8007646:	dc37      	bgt.n	80076b8 <_printf_float+0x364>
 8007648:	f04f 0b00 	mov.w	fp, #0
 800764c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007650:	f104 021a 	add.w	r2, r4, #26
 8007654:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007658:	ebaa 0309 	sub.w	r3, sl, r9
 800765c:	455b      	cmp	r3, fp
 800765e:	dc33      	bgt.n	80076c8 <_printf_float+0x374>
 8007660:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007664:	429a      	cmp	r2, r3
 8007666:	db3b      	blt.n	80076e0 <_printf_float+0x38c>
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	07da      	lsls	r2, r3, #31
 800766c:	d438      	bmi.n	80076e0 <_printf_float+0x38c>
 800766e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007670:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007672:	eba3 020a 	sub.w	r2, r3, sl
 8007676:	eba3 0901 	sub.w	r9, r3, r1
 800767a:	4591      	cmp	r9, r2
 800767c:	bfa8      	it	ge
 800767e:	4691      	movge	r9, r2
 8007680:	f1b9 0f00 	cmp.w	r9, #0
 8007684:	dc34      	bgt.n	80076f0 <_printf_float+0x39c>
 8007686:	f04f 0800 	mov.w	r8, #0
 800768a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800768e:	f104 0a1a 	add.w	sl, r4, #26
 8007692:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007696:	1a9b      	subs	r3, r3, r2
 8007698:	eba3 0309 	sub.w	r3, r3, r9
 800769c:	4543      	cmp	r3, r8
 800769e:	f77f af7a 	ble.w	8007596 <_printf_float+0x242>
 80076a2:	2301      	movs	r3, #1
 80076a4:	4652      	mov	r2, sl
 80076a6:	4631      	mov	r1, r6
 80076a8:	4628      	mov	r0, r5
 80076aa:	47b8      	blx	r7
 80076ac:	3001      	adds	r0, #1
 80076ae:	f43f aeac 	beq.w	800740a <_printf_float+0xb6>
 80076b2:	f108 0801 	add.w	r8, r8, #1
 80076b6:	e7ec      	b.n	8007692 <_printf_float+0x33e>
 80076b8:	4613      	mov	r3, r2
 80076ba:	4631      	mov	r1, r6
 80076bc:	4642      	mov	r2, r8
 80076be:	4628      	mov	r0, r5
 80076c0:	47b8      	blx	r7
 80076c2:	3001      	adds	r0, #1
 80076c4:	d1c0      	bne.n	8007648 <_printf_float+0x2f4>
 80076c6:	e6a0      	b.n	800740a <_printf_float+0xb6>
 80076c8:	2301      	movs	r3, #1
 80076ca:	4631      	mov	r1, r6
 80076cc:	4628      	mov	r0, r5
 80076ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80076d0:	47b8      	blx	r7
 80076d2:	3001      	adds	r0, #1
 80076d4:	f43f ae99 	beq.w	800740a <_printf_float+0xb6>
 80076d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076da:	f10b 0b01 	add.w	fp, fp, #1
 80076de:	e7b9      	b.n	8007654 <_printf_float+0x300>
 80076e0:	4631      	mov	r1, r6
 80076e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076e6:	4628      	mov	r0, r5
 80076e8:	47b8      	blx	r7
 80076ea:	3001      	adds	r0, #1
 80076ec:	d1bf      	bne.n	800766e <_printf_float+0x31a>
 80076ee:	e68c      	b.n	800740a <_printf_float+0xb6>
 80076f0:	464b      	mov	r3, r9
 80076f2:	4631      	mov	r1, r6
 80076f4:	4628      	mov	r0, r5
 80076f6:	eb08 020a 	add.w	r2, r8, sl
 80076fa:	47b8      	blx	r7
 80076fc:	3001      	adds	r0, #1
 80076fe:	d1c2      	bne.n	8007686 <_printf_float+0x332>
 8007700:	e683      	b.n	800740a <_printf_float+0xb6>
 8007702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007704:	2a01      	cmp	r2, #1
 8007706:	dc01      	bgt.n	800770c <_printf_float+0x3b8>
 8007708:	07db      	lsls	r3, r3, #31
 800770a:	d537      	bpl.n	800777c <_printf_float+0x428>
 800770c:	2301      	movs	r3, #1
 800770e:	4642      	mov	r2, r8
 8007710:	4631      	mov	r1, r6
 8007712:	4628      	mov	r0, r5
 8007714:	47b8      	blx	r7
 8007716:	3001      	adds	r0, #1
 8007718:	f43f ae77 	beq.w	800740a <_printf_float+0xb6>
 800771c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007720:	4631      	mov	r1, r6
 8007722:	4628      	mov	r0, r5
 8007724:	47b8      	blx	r7
 8007726:	3001      	adds	r0, #1
 8007728:	f43f ae6f 	beq.w	800740a <_printf_float+0xb6>
 800772c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007730:	2200      	movs	r2, #0
 8007732:	2300      	movs	r3, #0
 8007734:	f7f9 f938 	bl	80009a8 <__aeabi_dcmpeq>
 8007738:	b9d8      	cbnz	r0, 8007772 <_printf_float+0x41e>
 800773a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800773c:	f108 0201 	add.w	r2, r8, #1
 8007740:	3b01      	subs	r3, #1
 8007742:	4631      	mov	r1, r6
 8007744:	4628      	mov	r0, r5
 8007746:	47b8      	blx	r7
 8007748:	3001      	adds	r0, #1
 800774a:	d10e      	bne.n	800776a <_printf_float+0x416>
 800774c:	e65d      	b.n	800740a <_printf_float+0xb6>
 800774e:	2301      	movs	r3, #1
 8007750:	464a      	mov	r2, r9
 8007752:	4631      	mov	r1, r6
 8007754:	4628      	mov	r0, r5
 8007756:	47b8      	blx	r7
 8007758:	3001      	adds	r0, #1
 800775a:	f43f ae56 	beq.w	800740a <_printf_float+0xb6>
 800775e:	f108 0801 	add.w	r8, r8, #1
 8007762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007764:	3b01      	subs	r3, #1
 8007766:	4543      	cmp	r3, r8
 8007768:	dcf1      	bgt.n	800774e <_printf_float+0x3fa>
 800776a:	4653      	mov	r3, sl
 800776c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007770:	e6e0      	b.n	8007534 <_printf_float+0x1e0>
 8007772:	f04f 0800 	mov.w	r8, #0
 8007776:	f104 091a 	add.w	r9, r4, #26
 800777a:	e7f2      	b.n	8007762 <_printf_float+0x40e>
 800777c:	2301      	movs	r3, #1
 800777e:	4642      	mov	r2, r8
 8007780:	e7df      	b.n	8007742 <_printf_float+0x3ee>
 8007782:	2301      	movs	r3, #1
 8007784:	464a      	mov	r2, r9
 8007786:	4631      	mov	r1, r6
 8007788:	4628      	mov	r0, r5
 800778a:	47b8      	blx	r7
 800778c:	3001      	adds	r0, #1
 800778e:	f43f ae3c 	beq.w	800740a <_printf_float+0xb6>
 8007792:	f108 0801 	add.w	r8, r8, #1
 8007796:	68e3      	ldr	r3, [r4, #12]
 8007798:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800779a:	1a5b      	subs	r3, r3, r1
 800779c:	4543      	cmp	r3, r8
 800779e:	dcf0      	bgt.n	8007782 <_printf_float+0x42e>
 80077a0:	e6fd      	b.n	800759e <_printf_float+0x24a>
 80077a2:	f04f 0800 	mov.w	r8, #0
 80077a6:	f104 0919 	add.w	r9, r4, #25
 80077aa:	e7f4      	b.n	8007796 <_printf_float+0x442>

080077ac <_printf_common>:
 80077ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b0:	4616      	mov	r6, r2
 80077b2:	4699      	mov	r9, r3
 80077b4:	688a      	ldr	r2, [r1, #8]
 80077b6:	690b      	ldr	r3, [r1, #16]
 80077b8:	4607      	mov	r7, r0
 80077ba:	4293      	cmp	r3, r2
 80077bc:	bfb8      	it	lt
 80077be:	4613      	movlt	r3, r2
 80077c0:	6033      	str	r3, [r6, #0]
 80077c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077c6:	460c      	mov	r4, r1
 80077c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077cc:	b10a      	cbz	r2, 80077d2 <_printf_common+0x26>
 80077ce:	3301      	adds	r3, #1
 80077d0:	6033      	str	r3, [r6, #0]
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	0699      	lsls	r1, r3, #26
 80077d6:	bf42      	ittt	mi
 80077d8:	6833      	ldrmi	r3, [r6, #0]
 80077da:	3302      	addmi	r3, #2
 80077dc:	6033      	strmi	r3, [r6, #0]
 80077de:	6825      	ldr	r5, [r4, #0]
 80077e0:	f015 0506 	ands.w	r5, r5, #6
 80077e4:	d106      	bne.n	80077f4 <_printf_common+0x48>
 80077e6:	f104 0a19 	add.w	sl, r4, #25
 80077ea:	68e3      	ldr	r3, [r4, #12]
 80077ec:	6832      	ldr	r2, [r6, #0]
 80077ee:	1a9b      	subs	r3, r3, r2
 80077f0:	42ab      	cmp	r3, r5
 80077f2:	dc28      	bgt.n	8007846 <_printf_common+0x9a>
 80077f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077f8:	1e13      	subs	r3, r2, #0
 80077fa:	6822      	ldr	r2, [r4, #0]
 80077fc:	bf18      	it	ne
 80077fe:	2301      	movne	r3, #1
 8007800:	0692      	lsls	r2, r2, #26
 8007802:	d42d      	bmi.n	8007860 <_printf_common+0xb4>
 8007804:	4649      	mov	r1, r9
 8007806:	4638      	mov	r0, r7
 8007808:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800780c:	47c0      	blx	r8
 800780e:	3001      	adds	r0, #1
 8007810:	d020      	beq.n	8007854 <_printf_common+0xa8>
 8007812:	6823      	ldr	r3, [r4, #0]
 8007814:	68e5      	ldr	r5, [r4, #12]
 8007816:	f003 0306 	and.w	r3, r3, #6
 800781a:	2b04      	cmp	r3, #4
 800781c:	bf18      	it	ne
 800781e:	2500      	movne	r5, #0
 8007820:	6832      	ldr	r2, [r6, #0]
 8007822:	f04f 0600 	mov.w	r6, #0
 8007826:	68a3      	ldr	r3, [r4, #8]
 8007828:	bf08      	it	eq
 800782a:	1aad      	subeq	r5, r5, r2
 800782c:	6922      	ldr	r2, [r4, #16]
 800782e:	bf08      	it	eq
 8007830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007834:	4293      	cmp	r3, r2
 8007836:	bfc4      	itt	gt
 8007838:	1a9b      	subgt	r3, r3, r2
 800783a:	18ed      	addgt	r5, r5, r3
 800783c:	341a      	adds	r4, #26
 800783e:	42b5      	cmp	r5, r6
 8007840:	d11a      	bne.n	8007878 <_printf_common+0xcc>
 8007842:	2000      	movs	r0, #0
 8007844:	e008      	b.n	8007858 <_printf_common+0xac>
 8007846:	2301      	movs	r3, #1
 8007848:	4652      	mov	r2, sl
 800784a:	4649      	mov	r1, r9
 800784c:	4638      	mov	r0, r7
 800784e:	47c0      	blx	r8
 8007850:	3001      	adds	r0, #1
 8007852:	d103      	bne.n	800785c <_printf_common+0xb0>
 8007854:	f04f 30ff 	mov.w	r0, #4294967295
 8007858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800785c:	3501      	adds	r5, #1
 800785e:	e7c4      	b.n	80077ea <_printf_common+0x3e>
 8007860:	2030      	movs	r0, #48	; 0x30
 8007862:	18e1      	adds	r1, r4, r3
 8007864:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800786e:	4422      	add	r2, r4
 8007870:	3302      	adds	r3, #2
 8007872:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007876:	e7c5      	b.n	8007804 <_printf_common+0x58>
 8007878:	2301      	movs	r3, #1
 800787a:	4622      	mov	r2, r4
 800787c:	4649      	mov	r1, r9
 800787e:	4638      	mov	r0, r7
 8007880:	47c0      	blx	r8
 8007882:	3001      	adds	r0, #1
 8007884:	d0e6      	beq.n	8007854 <_printf_common+0xa8>
 8007886:	3601      	adds	r6, #1
 8007888:	e7d9      	b.n	800783e <_printf_common+0x92>
	...

0800788c <_printf_i>:
 800788c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007890:	7e0f      	ldrb	r7, [r1, #24]
 8007892:	4691      	mov	r9, r2
 8007894:	2f78      	cmp	r7, #120	; 0x78
 8007896:	4680      	mov	r8, r0
 8007898:	460c      	mov	r4, r1
 800789a:	469a      	mov	sl, r3
 800789c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800789e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80078a2:	d807      	bhi.n	80078b4 <_printf_i+0x28>
 80078a4:	2f62      	cmp	r7, #98	; 0x62
 80078a6:	d80a      	bhi.n	80078be <_printf_i+0x32>
 80078a8:	2f00      	cmp	r7, #0
 80078aa:	f000 80d9 	beq.w	8007a60 <_printf_i+0x1d4>
 80078ae:	2f58      	cmp	r7, #88	; 0x58
 80078b0:	f000 80a4 	beq.w	80079fc <_printf_i+0x170>
 80078b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078bc:	e03a      	b.n	8007934 <_printf_i+0xa8>
 80078be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078c2:	2b15      	cmp	r3, #21
 80078c4:	d8f6      	bhi.n	80078b4 <_printf_i+0x28>
 80078c6:	a101      	add	r1, pc, #4	; (adr r1, 80078cc <_printf_i+0x40>)
 80078c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078cc:	08007925 	.word	0x08007925
 80078d0:	08007939 	.word	0x08007939
 80078d4:	080078b5 	.word	0x080078b5
 80078d8:	080078b5 	.word	0x080078b5
 80078dc:	080078b5 	.word	0x080078b5
 80078e0:	080078b5 	.word	0x080078b5
 80078e4:	08007939 	.word	0x08007939
 80078e8:	080078b5 	.word	0x080078b5
 80078ec:	080078b5 	.word	0x080078b5
 80078f0:	080078b5 	.word	0x080078b5
 80078f4:	080078b5 	.word	0x080078b5
 80078f8:	08007a47 	.word	0x08007a47
 80078fc:	08007969 	.word	0x08007969
 8007900:	08007a29 	.word	0x08007a29
 8007904:	080078b5 	.word	0x080078b5
 8007908:	080078b5 	.word	0x080078b5
 800790c:	08007a69 	.word	0x08007a69
 8007910:	080078b5 	.word	0x080078b5
 8007914:	08007969 	.word	0x08007969
 8007918:	080078b5 	.word	0x080078b5
 800791c:	080078b5 	.word	0x080078b5
 8007920:	08007a31 	.word	0x08007a31
 8007924:	682b      	ldr	r3, [r5, #0]
 8007926:	1d1a      	adds	r2, r3, #4
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	602a      	str	r2, [r5, #0]
 800792c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007934:	2301      	movs	r3, #1
 8007936:	e0a4      	b.n	8007a82 <_printf_i+0x1f6>
 8007938:	6820      	ldr	r0, [r4, #0]
 800793a:	6829      	ldr	r1, [r5, #0]
 800793c:	0606      	lsls	r6, r0, #24
 800793e:	f101 0304 	add.w	r3, r1, #4
 8007942:	d50a      	bpl.n	800795a <_printf_i+0xce>
 8007944:	680e      	ldr	r6, [r1, #0]
 8007946:	602b      	str	r3, [r5, #0]
 8007948:	2e00      	cmp	r6, #0
 800794a:	da03      	bge.n	8007954 <_printf_i+0xc8>
 800794c:	232d      	movs	r3, #45	; 0x2d
 800794e:	4276      	negs	r6, r6
 8007950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007954:	230a      	movs	r3, #10
 8007956:	485e      	ldr	r0, [pc, #376]	; (8007ad0 <_printf_i+0x244>)
 8007958:	e019      	b.n	800798e <_printf_i+0x102>
 800795a:	680e      	ldr	r6, [r1, #0]
 800795c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007960:	602b      	str	r3, [r5, #0]
 8007962:	bf18      	it	ne
 8007964:	b236      	sxthne	r6, r6
 8007966:	e7ef      	b.n	8007948 <_printf_i+0xbc>
 8007968:	682b      	ldr	r3, [r5, #0]
 800796a:	6820      	ldr	r0, [r4, #0]
 800796c:	1d19      	adds	r1, r3, #4
 800796e:	6029      	str	r1, [r5, #0]
 8007970:	0601      	lsls	r1, r0, #24
 8007972:	d501      	bpl.n	8007978 <_printf_i+0xec>
 8007974:	681e      	ldr	r6, [r3, #0]
 8007976:	e002      	b.n	800797e <_printf_i+0xf2>
 8007978:	0646      	lsls	r6, r0, #25
 800797a:	d5fb      	bpl.n	8007974 <_printf_i+0xe8>
 800797c:	881e      	ldrh	r6, [r3, #0]
 800797e:	2f6f      	cmp	r7, #111	; 0x6f
 8007980:	bf0c      	ite	eq
 8007982:	2308      	moveq	r3, #8
 8007984:	230a      	movne	r3, #10
 8007986:	4852      	ldr	r0, [pc, #328]	; (8007ad0 <_printf_i+0x244>)
 8007988:	2100      	movs	r1, #0
 800798a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800798e:	6865      	ldr	r5, [r4, #4]
 8007990:	2d00      	cmp	r5, #0
 8007992:	bfa8      	it	ge
 8007994:	6821      	ldrge	r1, [r4, #0]
 8007996:	60a5      	str	r5, [r4, #8]
 8007998:	bfa4      	itt	ge
 800799a:	f021 0104 	bicge.w	r1, r1, #4
 800799e:	6021      	strge	r1, [r4, #0]
 80079a0:	b90e      	cbnz	r6, 80079a6 <_printf_i+0x11a>
 80079a2:	2d00      	cmp	r5, #0
 80079a4:	d04d      	beq.n	8007a42 <_printf_i+0x1b6>
 80079a6:	4615      	mov	r5, r2
 80079a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80079ac:	fb03 6711 	mls	r7, r3, r1, r6
 80079b0:	5dc7      	ldrb	r7, [r0, r7]
 80079b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80079b6:	4637      	mov	r7, r6
 80079b8:	42bb      	cmp	r3, r7
 80079ba:	460e      	mov	r6, r1
 80079bc:	d9f4      	bls.n	80079a8 <_printf_i+0x11c>
 80079be:	2b08      	cmp	r3, #8
 80079c0:	d10b      	bne.n	80079da <_printf_i+0x14e>
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	07de      	lsls	r6, r3, #31
 80079c6:	d508      	bpl.n	80079da <_printf_i+0x14e>
 80079c8:	6923      	ldr	r3, [r4, #16]
 80079ca:	6861      	ldr	r1, [r4, #4]
 80079cc:	4299      	cmp	r1, r3
 80079ce:	bfde      	ittt	le
 80079d0:	2330      	movle	r3, #48	; 0x30
 80079d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079da:	1b52      	subs	r2, r2, r5
 80079dc:	6122      	str	r2, [r4, #16]
 80079de:	464b      	mov	r3, r9
 80079e0:	4621      	mov	r1, r4
 80079e2:	4640      	mov	r0, r8
 80079e4:	f8cd a000 	str.w	sl, [sp]
 80079e8:	aa03      	add	r2, sp, #12
 80079ea:	f7ff fedf 	bl	80077ac <_printf_common>
 80079ee:	3001      	adds	r0, #1
 80079f0:	d14c      	bne.n	8007a8c <_printf_i+0x200>
 80079f2:	f04f 30ff 	mov.w	r0, #4294967295
 80079f6:	b004      	add	sp, #16
 80079f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079fc:	4834      	ldr	r0, [pc, #208]	; (8007ad0 <_printf_i+0x244>)
 80079fe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a02:	6829      	ldr	r1, [r5, #0]
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a0a:	6029      	str	r1, [r5, #0]
 8007a0c:	061d      	lsls	r5, r3, #24
 8007a0e:	d514      	bpl.n	8007a3a <_printf_i+0x1ae>
 8007a10:	07df      	lsls	r7, r3, #31
 8007a12:	bf44      	itt	mi
 8007a14:	f043 0320 	orrmi.w	r3, r3, #32
 8007a18:	6023      	strmi	r3, [r4, #0]
 8007a1a:	b91e      	cbnz	r6, 8007a24 <_printf_i+0x198>
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	f023 0320 	bic.w	r3, r3, #32
 8007a22:	6023      	str	r3, [r4, #0]
 8007a24:	2310      	movs	r3, #16
 8007a26:	e7af      	b.n	8007988 <_printf_i+0xfc>
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	f043 0320 	orr.w	r3, r3, #32
 8007a2e:	6023      	str	r3, [r4, #0]
 8007a30:	2378      	movs	r3, #120	; 0x78
 8007a32:	4828      	ldr	r0, [pc, #160]	; (8007ad4 <_printf_i+0x248>)
 8007a34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a38:	e7e3      	b.n	8007a02 <_printf_i+0x176>
 8007a3a:	0659      	lsls	r1, r3, #25
 8007a3c:	bf48      	it	mi
 8007a3e:	b2b6      	uxthmi	r6, r6
 8007a40:	e7e6      	b.n	8007a10 <_printf_i+0x184>
 8007a42:	4615      	mov	r5, r2
 8007a44:	e7bb      	b.n	80079be <_printf_i+0x132>
 8007a46:	682b      	ldr	r3, [r5, #0]
 8007a48:	6826      	ldr	r6, [r4, #0]
 8007a4a:	1d18      	adds	r0, r3, #4
 8007a4c:	6961      	ldr	r1, [r4, #20]
 8007a4e:	6028      	str	r0, [r5, #0]
 8007a50:	0635      	lsls	r5, r6, #24
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	d501      	bpl.n	8007a5a <_printf_i+0x1ce>
 8007a56:	6019      	str	r1, [r3, #0]
 8007a58:	e002      	b.n	8007a60 <_printf_i+0x1d4>
 8007a5a:	0670      	lsls	r0, r6, #25
 8007a5c:	d5fb      	bpl.n	8007a56 <_printf_i+0x1ca>
 8007a5e:	8019      	strh	r1, [r3, #0]
 8007a60:	2300      	movs	r3, #0
 8007a62:	4615      	mov	r5, r2
 8007a64:	6123      	str	r3, [r4, #16]
 8007a66:	e7ba      	b.n	80079de <_printf_i+0x152>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	1d1a      	adds	r2, r3, #4
 8007a6e:	602a      	str	r2, [r5, #0]
 8007a70:	681d      	ldr	r5, [r3, #0]
 8007a72:	6862      	ldr	r2, [r4, #4]
 8007a74:	4628      	mov	r0, r5
 8007a76:	f002 fe59 	bl	800a72c <memchr>
 8007a7a:	b108      	cbz	r0, 8007a80 <_printf_i+0x1f4>
 8007a7c:	1b40      	subs	r0, r0, r5
 8007a7e:	6060      	str	r0, [r4, #4]
 8007a80:	6863      	ldr	r3, [r4, #4]
 8007a82:	6123      	str	r3, [r4, #16]
 8007a84:	2300      	movs	r3, #0
 8007a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a8a:	e7a8      	b.n	80079de <_printf_i+0x152>
 8007a8c:	462a      	mov	r2, r5
 8007a8e:	4649      	mov	r1, r9
 8007a90:	4640      	mov	r0, r8
 8007a92:	6923      	ldr	r3, [r4, #16]
 8007a94:	47d0      	blx	sl
 8007a96:	3001      	adds	r0, #1
 8007a98:	d0ab      	beq.n	80079f2 <_printf_i+0x166>
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	079b      	lsls	r3, r3, #30
 8007a9e:	d413      	bmi.n	8007ac8 <_printf_i+0x23c>
 8007aa0:	68e0      	ldr	r0, [r4, #12]
 8007aa2:	9b03      	ldr	r3, [sp, #12]
 8007aa4:	4298      	cmp	r0, r3
 8007aa6:	bfb8      	it	lt
 8007aa8:	4618      	movlt	r0, r3
 8007aaa:	e7a4      	b.n	80079f6 <_printf_i+0x16a>
 8007aac:	2301      	movs	r3, #1
 8007aae:	4632      	mov	r2, r6
 8007ab0:	4649      	mov	r1, r9
 8007ab2:	4640      	mov	r0, r8
 8007ab4:	47d0      	blx	sl
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	d09b      	beq.n	80079f2 <_printf_i+0x166>
 8007aba:	3501      	adds	r5, #1
 8007abc:	68e3      	ldr	r3, [r4, #12]
 8007abe:	9903      	ldr	r1, [sp, #12]
 8007ac0:	1a5b      	subs	r3, r3, r1
 8007ac2:	42ab      	cmp	r3, r5
 8007ac4:	dcf2      	bgt.n	8007aac <_printf_i+0x220>
 8007ac6:	e7eb      	b.n	8007aa0 <_printf_i+0x214>
 8007ac8:	2500      	movs	r5, #0
 8007aca:	f104 0619 	add.w	r6, r4, #25
 8007ace:	e7f5      	b.n	8007abc <_printf_i+0x230>
 8007ad0:	0800bd5a 	.word	0x0800bd5a
 8007ad4:	0800bd6b 	.word	0x0800bd6b

08007ad8 <_scanf_float>:
 8007ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	b087      	sub	sp, #28
 8007ade:	9303      	str	r3, [sp, #12]
 8007ae0:	688b      	ldr	r3, [r1, #8]
 8007ae2:	4617      	mov	r7, r2
 8007ae4:	1e5a      	subs	r2, r3, #1
 8007ae6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007aea:	bf85      	ittet	hi
 8007aec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007af0:	195b      	addhi	r3, r3, r5
 8007af2:	2300      	movls	r3, #0
 8007af4:	9302      	strhi	r3, [sp, #8]
 8007af6:	bf88      	it	hi
 8007af8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007afc:	468b      	mov	fp, r1
 8007afe:	f04f 0500 	mov.w	r5, #0
 8007b02:	bf8c      	ite	hi
 8007b04:	608b      	strhi	r3, [r1, #8]
 8007b06:	9302      	strls	r3, [sp, #8]
 8007b08:	680b      	ldr	r3, [r1, #0]
 8007b0a:	4680      	mov	r8, r0
 8007b0c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007b10:	f84b 3b1c 	str.w	r3, [fp], #28
 8007b14:	460c      	mov	r4, r1
 8007b16:	465e      	mov	r6, fp
 8007b18:	46aa      	mov	sl, r5
 8007b1a:	46a9      	mov	r9, r5
 8007b1c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007b20:	9501      	str	r5, [sp, #4]
 8007b22:	68a2      	ldr	r2, [r4, #8]
 8007b24:	b152      	cbz	r2, 8007b3c <_scanf_float+0x64>
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b4e      	cmp	r3, #78	; 0x4e
 8007b2c:	d864      	bhi.n	8007bf8 <_scanf_float+0x120>
 8007b2e:	2b40      	cmp	r3, #64	; 0x40
 8007b30:	d83c      	bhi.n	8007bac <_scanf_float+0xd4>
 8007b32:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007b36:	b2c8      	uxtb	r0, r1
 8007b38:	280e      	cmp	r0, #14
 8007b3a:	d93a      	bls.n	8007bb2 <_scanf_float+0xda>
 8007b3c:	f1b9 0f00 	cmp.w	r9, #0
 8007b40:	d003      	beq.n	8007b4a <_scanf_float+0x72>
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b4e:	f1ba 0f01 	cmp.w	sl, #1
 8007b52:	f200 8113 	bhi.w	8007d7c <_scanf_float+0x2a4>
 8007b56:	455e      	cmp	r6, fp
 8007b58:	f200 8105 	bhi.w	8007d66 <_scanf_float+0x28e>
 8007b5c:	2501      	movs	r5, #1
 8007b5e:	4628      	mov	r0, r5
 8007b60:	b007      	add	sp, #28
 8007b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b66:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007b6a:	2a0d      	cmp	r2, #13
 8007b6c:	d8e6      	bhi.n	8007b3c <_scanf_float+0x64>
 8007b6e:	a101      	add	r1, pc, #4	; (adr r1, 8007b74 <_scanf_float+0x9c>)
 8007b70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007b74:	08007cb3 	.word	0x08007cb3
 8007b78:	08007b3d 	.word	0x08007b3d
 8007b7c:	08007b3d 	.word	0x08007b3d
 8007b80:	08007b3d 	.word	0x08007b3d
 8007b84:	08007d13 	.word	0x08007d13
 8007b88:	08007ceb 	.word	0x08007ceb
 8007b8c:	08007b3d 	.word	0x08007b3d
 8007b90:	08007b3d 	.word	0x08007b3d
 8007b94:	08007cc1 	.word	0x08007cc1
 8007b98:	08007b3d 	.word	0x08007b3d
 8007b9c:	08007b3d 	.word	0x08007b3d
 8007ba0:	08007b3d 	.word	0x08007b3d
 8007ba4:	08007b3d 	.word	0x08007b3d
 8007ba8:	08007c79 	.word	0x08007c79
 8007bac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007bb0:	e7db      	b.n	8007b6a <_scanf_float+0x92>
 8007bb2:	290e      	cmp	r1, #14
 8007bb4:	d8c2      	bhi.n	8007b3c <_scanf_float+0x64>
 8007bb6:	a001      	add	r0, pc, #4	; (adr r0, 8007bbc <_scanf_float+0xe4>)
 8007bb8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007bbc:	08007c6b 	.word	0x08007c6b
 8007bc0:	08007b3d 	.word	0x08007b3d
 8007bc4:	08007c6b 	.word	0x08007c6b
 8007bc8:	08007cff 	.word	0x08007cff
 8007bcc:	08007b3d 	.word	0x08007b3d
 8007bd0:	08007c19 	.word	0x08007c19
 8007bd4:	08007c55 	.word	0x08007c55
 8007bd8:	08007c55 	.word	0x08007c55
 8007bdc:	08007c55 	.word	0x08007c55
 8007be0:	08007c55 	.word	0x08007c55
 8007be4:	08007c55 	.word	0x08007c55
 8007be8:	08007c55 	.word	0x08007c55
 8007bec:	08007c55 	.word	0x08007c55
 8007bf0:	08007c55 	.word	0x08007c55
 8007bf4:	08007c55 	.word	0x08007c55
 8007bf8:	2b6e      	cmp	r3, #110	; 0x6e
 8007bfa:	d809      	bhi.n	8007c10 <_scanf_float+0x138>
 8007bfc:	2b60      	cmp	r3, #96	; 0x60
 8007bfe:	d8b2      	bhi.n	8007b66 <_scanf_float+0x8e>
 8007c00:	2b54      	cmp	r3, #84	; 0x54
 8007c02:	d077      	beq.n	8007cf4 <_scanf_float+0x21c>
 8007c04:	2b59      	cmp	r3, #89	; 0x59
 8007c06:	d199      	bne.n	8007b3c <_scanf_float+0x64>
 8007c08:	2d07      	cmp	r5, #7
 8007c0a:	d197      	bne.n	8007b3c <_scanf_float+0x64>
 8007c0c:	2508      	movs	r5, #8
 8007c0e:	e029      	b.n	8007c64 <_scanf_float+0x18c>
 8007c10:	2b74      	cmp	r3, #116	; 0x74
 8007c12:	d06f      	beq.n	8007cf4 <_scanf_float+0x21c>
 8007c14:	2b79      	cmp	r3, #121	; 0x79
 8007c16:	e7f6      	b.n	8007c06 <_scanf_float+0x12e>
 8007c18:	6821      	ldr	r1, [r4, #0]
 8007c1a:	05c8      	lsls	r0, r1, #23
 8007c1c:	d51a      	bpl.n	8007c54 <_scanf_float+0x17c>
 8007c1e:	9b02      	ldr	r3, [sp, #8]
 8007c20:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007c24:	6021      	str	r1, [r4, #0]
 8007c26:	f109 0901 	add.w	r9, r9, #1
 8007c2a:	b11b      	cbz	r3, 8007c34 <_scanf_float+0x15c>
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	3201      	adds	r2, #1
 8007c30:	9302      	str	r3, [sp, #8]
 8007c32:	60a2      	str	r2, [r4, #8]
 8007c34:	68a3      	ldr	r3, [r4, #8]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	60a3      	str	r3, [r4, #8]
 8007c3a:	6923      	ldr	r3, [r4, #16]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	6123      	str	r3, [r4, #16]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3b01      	subs	r3, #1
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	607b      	str	r3, [r7, #4]
 8007c48:	f340 8084 	ble.w	8007d54 <_scanf_float+0x27c>
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	603b      	str	r3, [r7, #0]
 8007c52:	e766      	b.n	8007b22 <_scanf_float+0x4a>
 8007c54:	eb1a 0f05 	cmn.w	sl, r5
 8007c58:	f47f af70 	bne.w	8007b3c <_scanf_float+0x64>
 8007c5c:	6822      	ldr	r2, [r4, #0]
 8007c5e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007c62:	6022      	str	r2, [r4, #0]
 8007c64:	f806 3b01 	strb.w	r3, [r6], #1
 8007c68:	e7e4      	b.n	8007c34 <_scanf_float+0x15c>
 8007c6a:	6822      	ldr	r2, [r4, #0]
 8007c6c:	0610      	lsls	r0, r2, #24
 8007c6e:	f57f af65 	bpl.w	8007b3c <_scanf_float+0x64>
 8007c72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c76:	e7f4      	b.n	8007c62 <_scanf_float+0x18a>
 8007c78:	f1ba 0f00 	cmp.w	sl, #0
 8007c7c:	d10e      	bne.n	8007c9c <_scanf_float+0x1c4>
 8007c7e:	f1b9 0f00 	cmp.w	r9, #0
 8007c82:	d10e      	bne.n	8007ca2 <_scanf_float+0x1ca>
 8007c84:	6822      	ldr	r2, [r4, #0]
 8007c86:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007c8a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007c8e:	d108      	bne.n	8007ca2 <_scanf_float+0x1ca>
 8007c90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007c94:	f04f 0a01 	mov.w	sl, #1
 8007c98:	6022      	str	r2, [r4, #0]
 8007c9a:	e7e3      	b.n	8007c64 <_scanf_float+0x18c>
 8007c9c:	f1ba 0f02 	cmp.w	sl, #2
 8007ca0:	d055      	beq.n	8007d4e <_scanf_float+0x276>
 8007ca2:	2d01      	cmp	r5, #1
 8007ca4:	d002      	beq.n	8007cac <_scanf_float+0x1d4>
 8007ca6:	2d04      	cmp	r5, #4
 8007ca8:	f47f af48 	bne.w	8007b3c <_scanf_float+0x64>
 8007cac:	3501      	adds	r5, #1
 8007cae:	b2ed      	uxtb	r5, r5
 8007cb0:	e7d8      	b.n	8007c64 <_scanf_float+0x18c>
 8007cb2:	f1ba 0f01 	cmp.w	sl, #1
 8007cb6:	f47f af41 	bne.w	8007b3c <_scanf_float+0x64>
 8007cba:	f04f 0a02 	mov.w	sl, #2
 8007cbe:	e7d1      	b.n	8007c64 <_scanf_float+0x18c>
 8007cc0:	b97d      	cbnz	r5, 8007ce2 <_scanf_float+0x20a>
 8007cc2:	f1b9 0f00 	cmp.w	r9, #0
 8007cc6:	f47f af3c 	bne.w	8007b42 <_scanf_float+0x6a>
 8007cca:	6822      	ldr	r2, [r4, #0]
 8007ccc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007cd0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007cd4:	f47f af39 	bne.w	8007b4a <_scanf_float+0x72>
 8007cd8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007cdc:	2501      	movs	r5, #1
 8007cde:	6022      	str	r2, [r4, #0]
 8007ce0:	e7c0      	b.n	8007c64 <_scanf_float+0x18c>
 8007ce2:	2d03      	cmp	r5, #3
 8007ce4:	d0e2      	beq.n	8007cac <_scanf_float+0x1d4>
 8007ce6:	2d05      	cmp	r5, #5
 8007ce8:	e7de      	b.n	8007ca8 <_scanf_float+0x1d0>
 8007cea:	2d02      	cmp	r5, #2
 8007cec:	f47f af26 	bne.w	8007b3c <_scanf_float+0x64>
 8007cf0:	2503      	movs	r5, #3
 8007cf2:	e7b7      	b.n	8007c64 <_scanf_float+0x18c>
 8007cf4:	2d06      	cmp	r5, #6
 8007cf6:	f47f af21 	bne.w	8007b3c <_scanf_float+0x64>
 8007cfa:	2507      	movs	r5, #7
 8007cfc:	e7b2      	b.n	8007c64 <_scanf_float+0x18c>
 8007cfe:	6822      	ldr	r2, [r4, #0]
 8007d00:	0591      	lsls	r1, r2, #22
 8007d02:	f57f af1b 	bpl.w	8007b3c <_scanf_float+0x64>
 8007d06:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007d0a:	6022      	str	r2, [r4, #0]
 8007d0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d10:	e7a8      	b.n	8007c64 <_scanf_float+0x18c>
 8007d12:	6822      	ldr	r2, [r4, #0]
 8007d14:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007d18:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007d1c:	d006      	beq.n	8007d2c <_scanf_float+0x254>
 8007d1e:	0550      	lsls	r0, r2, #21
 8007d20:	f57f af0c 	bpl.w	8007b3c <_scanf_float+0x64>
 8007d24:	f1b9 0f00 	cmp.w	r9, #0
 8007d28:	f43f af0f 	beq.w	8007b4a <_scanf_float+0x72>
 8007d2c:	0591      	lsls	r1, r2, #22
 8007d2e:	bf58      	it	pl
 8007d30:	9901      	ldrpl	r1, [sp, #4]
 8007d32:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007d36:	bf58      	it	pl
 8007d38:	eba9 0101 	subpl.w	r1, r9, r1
 8007d3c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007d40:	f04f 0900 	mov.w	r9, #0
 8007d44:	bf58      	it	pl
 8007d46:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007d4a:	6022      	str	r2, [r4, #0]
 8007d4c:	e78a      	b.n	8007c64 <_scanf_float+0x18c>
 8007d4e:	f04f 0a03 	mov.w	sl, #3
 8007d52:	e787      	b.n	8007c64 <_scanf_float+0x18c>
 8007d54:	4639      	mov	r1, r7
 8007d56:	4640      	mov	r0, r8
 8007d58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007d5c:	4798      	blx	r3
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	f43f aedf 	beq.w	8007b22 <_scanf_float+0x4a>
 8007d64:	e6ea      	b.n	8007b3c <_scanf_float+0x64>
 8007d66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d6a:	463a      	mov	r2, r7
 8007d6c:	4640      	mov	r0, r8
 8007d6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d72:	4798      	blx	r3
 8007d74:	6923      	ldr	r3, [r4, #16]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	6123      	str	r3, [r4, #16]
 8007d7a:	e6ec      	b.n	8007b56 <_scanf_float+0x7e>
 8007d7c:	1e6b      	subs	r3, r5, #1
 8007d7e:	2b06      	cmp	r3, #6
 8007d80:	d825      	bhi.n	8007dce <_scanf_float+0x2f6>
 8007d82:	2d02      	cmp	r5, #2
 8007d84:	d836      	bhi.n	8007df4 <_scanf_float+0x31c>
 8007d86:	455e      	cmp	r6, fp
 8007d88:	f67f aee8 	bls.w	8007b5c <_scanf_float+0x84>
 8007d8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d90:	463a      	mov	r2, r7
 8007d92:	4640      	mov	r0, r8
 8007d94:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d98:	4798      	blx	r3
 8007d9a:	6923      	ldr	r3, [r4, #16]
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	6123      	str	r3, [r4, #16]
 8007da0:	e7f1      	b.n	8007d86 <_scanf_float+0x2ae>
 8007da2:	9802      	ldr	r0, [sp, #8]
 8007da4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007da8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007dac:	463a      	mov	r2, r7
 8007dae:	9002      	str	r0, [sp, #8]
 8007db0:	4640      	mov	r0, r8
 8007db2:	4798      	blx	r3
 8007db4:	6923      	ldr	r3, [r4, #16]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	6123      	str	r3, [r4, #16]
 8007dba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007dbe:	fa5f fa8a 	uxtb.w	sl, sl
 8007dc2:	f1ba 0f02 	cmp.w	sl, #2
 8007dc6:	d1ec      	bne.n	8007da2 <_scanf_float+0x2ca>
 8007dc8:	3d03      	subs	r5, #3
 8007dca:	b2ed      	uxtb	r5, r5
 8007dcc:	1b76      	subs	r6, r6, r5
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	05da      	lsls	r2, r3, #23
 8007dd2:	d52f      	bpl.n	8007e34 <_scanf_float+0x35c>
 8007dd4:	055b      	lsls	r3, r3, #21
 8007dd6:	d510      	bpl.n	8007dfa <_scanf_float+0x322>
 8007dd8:	455e      	cmp	r6, fp
 8007dda:	f67f aebf 	bls.w	8007b5c <_scanf_float+0x84>
 8007dde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007de2:	463a      	mov	r2, r7
 8007de4:	4640      	mov	r0, r8
 8007de6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007dea:	4798      	blx	r3
 8007dec:	6923      	ldr	r3, [r4, #16]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	6123      	str	r3, [r4, #16]
 8007df2:	e7f1      	b.n	8007dd8 <_scanf_float+0x300>
 8007df4:	46aa      	mov	sl, r5
 8007df6:	9602      	str	r6, [sp, #8]
 8007df8:	e7df      	b.n	8007dba <_scanf_float+0x2e2>
 8007dfa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007dfe:	6923      	ldr	r3, [r4, #16]
 8007e00:	2965      	cmp	r1, #101	; 0x65
 8007e02:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e06:	f106 35ff 	add.w	r5, r6, #4294967295
 8007e0a:	6123      	str	r3, [r4, #16]
 8007e0c:	d00c      	beq.n	8007e28 <_scanf_float+0x350>
 8007e0e:	2945      	cmp	r1, #69	; 0x45
 8007e10:	d00a      	beq.n	8007e28 <_scanf_float+0x350>
 8007e12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e16:	463a      	mov	r2, r7
 8007e18:	4640      	mov	r0, r8
 8007e1a:	4798      	blx	r3
 8007e1c:	6923      	ldr	r3, [r4, #16]
 8007e1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007e22:	3b01      	subs	r3, #1
 8007e24:	1eb5      	subs	r5, r6, #2
 8007e26:	6123      	str	r3, [r4, #16]
 8007e28:	463a      	mov	r2, r7
 8007e2a:	4640      	mov	r0, r8
 8007e2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e30:	4798      	blx	r3
 8007e32:	462e      	mov	r6, r5
 8007e34:	6825      	ldr	r5, [r4, #0]
 8007e36:	f015 0510 	ands.w	r5, r5, #16
 8007e3a:	d155      	bne.n	8007ee8 <_scanf_float+0x410>
 8007e3c:	7035      	strb	r5, [r6, #0]
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e48:	d11b      	bne.n	8007e82 <_scanf_float+0x3aa>
 8007e4a:	9b01      	ldr	r3, [sp, #4]
 8007e4c:	454b      	cmp	r3, r9
 8007e4e:	eba3 0209 	sub.w	r2, r3, r9
 8007e52:	d123      	bne.n	8007e9c <_scanf_float+0x3c4>
 8007e54:	2200      	movs	r2, #0
 8007e56:	4659      	mov	r1, fp
 8007e58:	4640      	mov	r0, r8
 8007e5a:	f000 ff09 	bl	8008c70 <_strtod_r>
 8007e5e:	6822      	ldr	r2, [r4, #0]
 8007e60:	9b03      	ldr	r3, [sp, #12]
 8007e62:	f012 0f02 	tst.w	r2, #2
 8007e66:	4606      	mov	r6, r0
 8007e68:	460f      	mov	r7, r1
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	d021      	beq.n	8007eb2 <_scanf_float+0x3da>
 8007e6e:	1d1a      	adds	r2, r3, #4
 8007e70:	9903      	ldr	r1, [sp, #12]
 8007e72:	600a      	str	r2, [r1, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	e9c3 6700 	strd	r6, r7, [r3]
 8007e7a:	68e3      	ldr	r3, [r4, #12]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	60e3      	str	r3, [r4, #12]
 8007e80:	e66d      	b.n	8007b5e <_scanf_float+0x86>
 8007e82:	9b04      	ldr	r3, [sp, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d0e5      	beq.n	8007e54 <_scanf_float+0x37c>
 8007e88:	9905      	ldr	r1, [sp, #20]
 8007e8a:	230a      	movs	r3, #10
 8007e8c:	462a      	mov	r2, r5
 8007e8e:	4640      	mov	r0, r8
 8007e90:	3101      	adds	r1, #1
 8007e92:	f000 ff6f 	bl	8008d74 <_strtol_r>
 8007e96:	9b04      	ldr	r3, [sp, #16]
 8007e98:	9e05      	ldr	r6, [sp, #20]
 8007e9a:	1ac2      	subs	r2, r0, r3
 8007e9c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007ea0:	429e      	cmp	r6, r3
 8007ea2:	bf28      	it	cs
 8007ea4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	4910      	ldr	r1, [pc, #64]	; (8007eec <_scanf_float+0x414>)
 8007eac:	f000 f8b4 	bl	8008018 <siprintf>
 8007eb0:	e7d0      	b.n	8007e54 <_scanf_float+0x37c>
 8007eb2:	f012 0f04 	tst.w	r2, #4
 8007eb6:	f103 0204 	add.w	r2, r3, #4
 8007eba:	d1d9      	bne.n	8007e70 <_scanf_float+0x398>
 8007ebc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007ec0:	f8cc 2000 	str.w	r2, [ip]
 8007ec4:	f8d3 8000 	ldr.w	r8, [r3]
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	f7f8 fd9e 	bl	8000a0c <__aeabi_dcmpun>
 8007ed0:	b128      	cbz	r0, 8007ede <_scanf_float+0x406>
 8007ed2:	4807      	ldr	r0, [pc, #28]	; (8007ef0 <_scanf_float+0x418>)
 8007ed4:	f000 f89c 	bl	8008010 <nanf>
 8007ed8:	f8c8 0000 	str.w	r0, [r8]
 8007edc:	e7cd      	b.n	8007e7a <_scanf_float+0x3a2>
 8007ede:	4630      	mov	r0, r6
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	f7f8 fdf1 	bl	8000ac8 <__aeabi_d2f>
 8007ee6:	e7f7      	b.n	8007ed8 <_scanf_float+0x400>
 8007ee8:	2500      	movs	r5, #0
 8007eea:	e638      	b.n	8007b5e <_scanf_float+0x86>
 8007eec:	0800bd7c 	.word	0x0800bd7c
 8007ef0:	0800c1f0 	.word	0x0800c1f0

08007ef4 <iprintf>:
 8007ef4:	b40f      	push	{r0, r1, r2, r3}
 8007ef6:	4b0a      	ldr	r3, [pc, #40]	; (8007f20 <iprintf+0x2c>)
 8007ef8:	b513      	push	{r0, r1, r4, lr}
 8007efa:	681c      	ldr	r4, [r3, #0]
 8007efc:	b124      	cbz	r4, 8007f08 <iprintf+0x14>
 8007efe:	69a3      	ldr	r3, [r4, #24]
 8007f00:	b913      	cbnz	r3, 8007f08 <iprintf+0x14>
 8007f02:	4620      	mov	r0, r4
 8007f04:	f001 ff88 	bl	8009e18 <__sinit>
 8007f08:	ab05      	add	r3, sp, #20
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	9a04      	ldr	r2, [sp, #16]
 8007f0e:	68a1      	ldr	r1, [r4, #8]
 8007f10:	9301      	str	r3, [sp, #4]
 8007f12:	f003 fb53 	bl	800b5bc <_vfiprintf_r>
 8007f16:	b002      	add	sp, #8
 8007f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f1c:	b004      	add	sp, #16
 8007f1e:	4770      	bx	lr
 8007f20:	2000018c 	.word	0x2000018c

08007f24 <_puts_r>:
 8007f24:	b570      	push	{r4, r5, r6, lr}
 8007f26:	460e      	mov	r6, r1
 8007f28:	4605      	mov	r5, r0
 8007f2a:	b118      	cbz	r0, 8007f34 <_puts_r+0x10>
 8007f2c:	6983      	ldr	r3, [r0, #24]
 8007f2e:	b90b      	cbnz	r3, 8007f34 <_puts_r+0x10>
 8007f30:	f001 ff72 	bl	8009e18 <__sinit>
 8007f34:	69ab      	ldr	r3, [r5, #24]
 8007f36:	68ac      	ldr	r4, [r5, #8]
 8007f38:	b913      	cbnz	r3, 8007f40 <_puts_r+0x1c>
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	f001 ff6c 	bl	8009e18 <__sinit>
 8007f40:	4b2c      	ldr	r3, [pc, #176]	; (8007ff4 <_puts_r+0xd0>)
 8007f42:	429c      	cmp	r4, r3
 8007f44:	d120      	bne.n	8007f88 <_puts_r+0x64>
 8007f46:	686c      	ldr	r4, [r5, #4]
 8007f48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f4a:	07db      	lsls	r3, r3, #31
 8007f4c:	d405      	bmi.n	8007f5a <_puts_r+0x36>
 8007f4e:	89a3      	ldrh	r3, [r4, #12]
 8007f50:	0598      	lsls	r0, r3, #22
 8007f52:	d402      	bmi.n	8007f5a <_puts_r+0x36>
 8007f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f56:	f002 fb68 	bl	800a62a <__retarget_lock_acquire_recursive>
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	0719      	lsls	r1, r3, #28
 8007f5e:	d51d      	bpl.n	8007f9c <_puts_r+0x78>
 8007f60:	6923      	ldr	r3, [r4, #16]
 8007f62:	b1db      	cbz	r3, 8007f9c <_puts_r+0x78>
 8007f64:	3e01      	subs	r6, #1
 8007f66:	68a3      	ldr	r3, [r4, #8]
 8007f68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	60a3      	str	r3, [r4, #8]
 8007f70:	bb39      	cbnz	r1, 8007fc2 <_puts_r+0x9e>
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	da38      	bge.n	8007fe8 <_puts_r+0xc4>
 8007f76:	4622      	mov	r2, r4
 8007f78:	210a      	movs	r1, #10
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	f000 fefc 	bl	8008d78 <__swbuf_r>
 8007f80:	3001      	adds	r0, #1
 8007f82:	d011      	beq.n	8007fa8 <_puts_r+0x84>
 8007f84:	250a      	movs	r5, #10
 8007f86:	e011      	b.n	8007fac <_puts_r+0x88>
 8007f88:	4b1b      	ldr	r3, [pc, #108]	; (8007ff8 <_puts_r+0xd4>)
 8007f8a:	429c      	cmp	r4, r3
 8007f8c:	d101      	bne.n	8007f92 <_puts_r+0x6e>
 8007f8e:	68ac      	ldr	r4, [r5, #8]
 8007f90:	e7da      	b.n	8007f48 <_puts_r+0x24>
 8007f92:	4b1a      	ldr	r3, [pc, #104]	; (8007ffc <_puts_r+0xd8>)
 8007f94:	429c      	cmp	r4, r3
 8007f96:	bf08      	it	eq
 8007f98:	68ec      	ldreq	r4, [r5, #12]
 8007f9a:	e7d5      	b.n	8007f48 <_puts_r+0x24>
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f000 ff3c 	bl	8008e1c <__swsetup_r>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d0dd      	beq.n	8007f64 <_puts_r+0x40>
 8007fa8:	f04f 35ff 	mov.w	r5, #4294967295
 8007fac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fae:	07da      	lsls	r2, r3, #31
 8007fb0:	d405      	bmi.n	8007fbe <_puts_r+0x9a>
 8007fb2:	89a3      	ldrh	r3, [r4, #12]
 8007fb4:	059b      	lsls	r3, r3, #22
 8007fb6:	d402      	bmi.n	8007fbe <_puts_r+0x9a>
 8007fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fba:	f002 fb37 	bl	800a62c <__retarget_lock_release_recursive>
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	bd70      	pop	{r4, r5, r6, pc}
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	da04      	bge.n	8007fd0 <_puts_r+0xac>
 8007fc6:	69a2      	ldr	r2, [r4, #24]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	dc06      	bgt.n	8007fda <_puts_r+0xb6>
 8007fcc:	290a      	cmp	r1, #10
 8007fce:	d004      	beq.n	8007fda <_puts_r+0xb6>
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	6022      	str	r2, [r4, #0]
 8007fd6:	7019      	strb	r1, [r3, #0]
 8007fd8:	e7c5      	b.n	8007f66 <_puts_r+0x42>
 8007fda:	4622      	mov	r2, r4
 8007fdc:	4628      	mov	r0, r5
 8007fde:	f000 fecb 	bl	8008d78 <__swbuf_r>
 8007fe2:	3001      	adds	r0, #1
 8007fe4:	d1bf      	bne.n	8007f66 <_puts_r+0x42>
 8007fe6:	e7df      	b.n	8007fa8 <_puts_r+0x84>
 8007fe8:	250a      	movs	r5, #10
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	1c5a      	adds	r2, r3, #1
 8007fee:	6022      	str	r2, [r4, #0]
 8007ff0:	701d      	strb	r5, [r3, #0]
 8007ff2:	e7db      	b.n	8007fac <_puts_r+0x88>
 8007ff4:	0800bf8c 	.word	0x0800bf8c
 8007ff8:	0800bfac 	.word	0x0800bfac
 8007ffc:	0800bf6c 	.word	0x0800bf6c

08008000 <puts>:
 8008000:	4b02      	ldr	r3, [pc, #8]	; (800800c <puts+0xc>)
 8008002:	4601      	mov	r1, r0
 8008004:	6818      	ldr	r0, [r3, #0]
 8008006:	f7ff bf8d 	b.w	8007f24 <_puts_r>
 800800a:	bf00      	nop
 800800c:	2000018c 	.word	0x2000018c

08008010 <nanf>:
 8008010:	4800      	ldr	r0, [pc, #0]	; (8008014 <nanf+0x4>)
 8008012:	4770      	bx	lr
 8008014:	7fc00000 	.word	0x7fc00000

08008018 <siprintf>:
 8008018:	b40e      	push	{r1, r2, r3}
 800801a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800801e:	b500      	push	{lr}
 8008020:	b09c      	sub	sp, #112	; 0x70
 8008022:	ab1d      	add	r3, sp, #116	; 0x74
 8008024:	9002      	str	r0, [sp, #8]
 8008026:	9006      	str	r0, [sp, #24]
 8008028:	9107      	str	r1, [sp, #28]
 800802a:	9104      	str	r1, [sp, #16]
 800802c:	4808      	ldr	r0, [pc, #32]	; (8008050 <siprintf+0x38>)
 800802e:	4909      	ldr	r1, [pc, #36]	; (8008054 <siprintf+0x3c>)
 8008030:	f853 2b04 	ldr.w	r2, [r3], #4
 8008034:	9105      	str	r1, [sp, #20]
 8008036:	6800      	ldr	r0, [r0, #0]
 8008038:	a902      	add	r1, sp, #8
 800803a:	9301      	str	r3, [sp, #4]
 800803c:	f003 f996 	bl	800b36c <_svfiprintf_r>
 8008040:	2200      	movs	r2, #0
 8008042:	9b02      	ldr	r3, [sp, #8]
 8008044:	701a      	strb	r2, [r3, #0]
 8008046:	b01c      	add	sp, #112	; 0x70
 8008048:	f85d eb04 	ldr.w	lr, [sp], #4
 800804c:	b003      	add	sp, #12
 800804e:	4770      	bx	lr
 8008050:	2000018c 	.word	0x2000018c
 8008054:	ffff0208 	.word	0xffff0208

08008058 <sulp>:
 8008058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800805c:	460f      	mov	r7, r1
 800805e:	4690      	mov	r8, r2
 8008060:	f002 fef0 	bl	800ae44 <__ulp>
 8008064:	4604      	mov	r4, r0
 8008066:	460d      	mov	r5, r1
 8008068:	f1b8 0f00 	cmp.w	r8, #0
 800806c:	d011      	beq.n	8008092 <sulp+0x3a>
 800806e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008072:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008076:	2b00      	cmp	r3, #0
 8008078:	dd0b      	ble.n	8008092 <sulp+0x3a>
 800807a:	2400      	movs	r4, #0
 800807c:	051b      	lsls	r3, r3, #20
 800807e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008082:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008086:	4622      	mov	r2, r4
 8008088:	462b      	mov	r3, r5
 800808a:	f7f8 fa25 	bl	80004d8 <__aeabi_dmul>
 800808e:	4604      	mov	r4, r0
 8008090:	460d      	mov	r5, r1
 8008092:	4620      	mov	r0, r4
 8008094:	4629      	mov	r1, r5
 8008096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800809a:	0000      	movs	r0, r0
 800809c:	0000      	movs	r0, r0
	...

080080a0 <_strtod_l>:
 80080a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a4:	469b      	mov	fp, r3
 80080a6:	2300      	movs	r3, #0
 80080a8:	b09f      	sub	sp, #124	; 0x7c
 80080aa:	931a      	str	r3, [sp, #104]	; 0x68
 80080ac:	4b9e      	ldr	r3, [pc, #632]	; (8008328 <_strtod_l+0x288>)
 80080ae:	4682      	mov	sl, r0
 80080b0:	681f      	ldr	r7, [r3, #0]
 80080b2:	460e      	mov	r6, r1
 80080b4:	4638      	mov	r0, r7
 80080b6:	9215      	str	r2, [sp, #84]	; 0x54
 80080b8:	f7f8 f84a 	bl	8000150 <strlen>
 80080bc:	f04f 0800 	mov.w	r8, #0
 80080c0:	4604      	mov	r4, r0
 80080c2:	f04f 0900 	mov.w	r9, #0
 80080c6:	9619      	str	r6, [sp, #100]	; 0x64
 80080c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080ca:	781a      	ldrb	r2, [r3, #0]
 80080cc:	2a2b      	cmp	r2, #43	; 0x2b
 80080ce:	d04c      	beq.n	800816a <_strtod_l+0xca>
 80080d0:	d83a      	bhi.n	8008148 <_strtod_l+0xa8>
 80080d2:	2a0d      	cmp	r2, #13
 80080d4:	d833      	bhi.n	800813e <_strtod_l+0x9e>
 80080d6:	2a08      	cmp	r2, #8
 80080d8:	d833      	bhi.n	8008142 <_strtod_l+0xa2>
 80080da:	2a00      	cmp	r2, #0
 80080dc:	d03d      	beq.n	800815a <_strtod_l+0xba>
 80080de:	2300      	movs	r3, #0
 80080e0:	930a      	str	r3, [sp, #40]	; 0x28
 80080e2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80080e4:	782b      	ldrb	r3, [r5, #0]
 80080e6:	2b30      	cmp	r3, #48	; 0x30
 80080e8:	f040 80aa 	bne.w	8008240 <_strtod_l+0x1a0>
 80080ec:	786b      	ldrb	r3, [r5, #1]
 80080ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80080f2:	2b58      	cmp	r3, #88	; 0x58
 80080f4:	d166      	bne.n	80081c4 <_strtod_l+0x124>
 80080f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080f8:	4650      	mov	r0, sl
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	ab1a      	add	r3, sp, #104	; 0x68
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	4a8a      	ldr	r2, [pc, #552]	; (800832c <_strtod_l+0x28c>)
 8008102:	f8cd b008 	str.w	fp, [sp, #8]
 8008106:	ab1b      	add	r3, sp, #108	; 0x6c
 8008108:	a919      	add	r1, sp, #100	; 0x64
 800810a:	f001 ff8b 	bl	800a024 <__gethex>
 800810e:	f010 0607 	ands.w	r6, r0, #7
 8008112:	4604      	mov	r4, r0
 8008114:	d005      	beq.n	8008122 <_strtod_l+0x82>
 8008116:	2e06      	cmp	r6, #6
 8008118:	d129      	bne.n	800816e <_strtod_l+0xce>
 800811a:	2300      	movs	r3, #0
 800811c:	3501      	adds	r5, #1
 800811e:	9519      	str	r5, [sp, #100]	; 0x64
 8008120:	930a      	str	r3, [sp, #40]	; 0x28
 8008122:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008124:	2b00      	cmp	r3, #0
 8008126:	f040 858a 	bne.w	8008c3e <_strtod_l+0xb9e>
 800812a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800812c:	b1d3      	cbz	r3, 8008164 <_strtod_l+0xc4>
 800812e:	4642      	mov	r2, r8
 8008130:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008134:	4610      	mov	r0, r2
 8008136:	4619      	mov	r1, r3
 8008138:	b01f      	add	sp, #124	; 0x7c
 800813a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813e:	2a20      	cmp	r2, #32
 8008140:	d1cd      	bne.n	80080de <_strtod_l+0x3e>
 8008142:	3301      	adds	r3, #1
 8008144:	9319      	str	r3, [sp, #100]	; 0x64
 8008146:	e7bf      	b.n	80080c8 <_strtod_l+0x28>
 8008148:	2a2d      	cmp	r2, #45	; 0x2d
 800814a:	d1c8      	bne.n	80080de <_strtod_l+0x3e>
 800814c:	2201      	movs	r2, #1
 800814e:	920a      	str	r2, [sp, #40]	; 0x28
 8008150:	1c5a      	adds	r2, r3, #1
 8008152:	9219      	str	r2, [sp, #100]	; 0x64
 8008154:	785b      	ldrb	r3, [r3, #1]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1c3      	bne.n	80080e2 <_strtod_l+0x42>
 800815a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800815c:	9619      	str	r6, [sp, #100]	; 0x64
 800815e:	2b00      	cmp	r3, #0
 8008160:	f040 856b 	bne.w	8008c3a <_strtod_l+0xb9a>
 8008164:	4642      	mov	r2, r8
 8008166:	464b      	mov	r3, r9
 8008168:	e7e4      	b.n	8008134 <_strtod_l+0x94>
 800816a:	2200      	movs	r2, #0
 800816c:	e7ef      	b.n	800814e <_strtod_l+0xae>
 800816e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008170:	b13a      	cbz	r2, 8008182 <_strtod_l+0xe2>
 8008172:	2135      	movs	r1, #53	; 0x35
 8008174:	a81c      	add	r0, sp, #112	; 0x70
 8008176:	f002 ff69 	bl	800b04c <__copybits>
 800817a:	4650      	mov	r0, sl
 800817c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800817e:	f002 fb31 	bl	800a7e4 <_Bfree>
 8008182:	3e01      	subs	r6, #1
 8008184:	2e04      	cmp	r6, #4
 8008186:	d806      	bhi.n	8008196 <_strtod_l+0xf6>
 8008188:	e8df f006 	tbb	[pc, r6]
 800818c:	1714030a 	.word	0x1714030a
 8008190:	0a          	.byte	0x0a
 8008191:	00          	.byte	0x00
 8008192:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008196:	0721      	lsls	r1, r4, #28
 8008198:	d5c3      	bpl.n	8008122 <_strtod_l+0x82>
 800819a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800819e:	e7c0      	b.n	8008122 <_strtod_l+0x82>
 80081a0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80081a2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80081a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80081aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80081ae:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80081b2:	e7f0      	b.n	8008196 <_strtod_l+0xf6>
 80081b4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008330 <_strtod_l+0x290>
 80081b8:	e7ed      	b.n	8008196 <_strtod_l+0xf6>
 80081ba:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80081be:	f04f 38ff 	mov.w	r8, #4294967295
 80081c2:	e7e8      	b.n	8008196 <_strtod_l+0xf6>
 80081c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081c6:	1c5a      	adds	r2, r3, #1
 80081c8:	9219      	str	r2, [sp, #100]	; 0x64
 80081ca:	785b      	ldrb	r3, [r3, #1]
 80081cc:	2b30      	cmp	r3, #48	; 0x30
 80081ce:	d0f9      	beq.n	80081c4 <_strtod_l+0x124>
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d0a6      	beq.n	8008122 <_strtod_l+0x82>
 80081d4:	2301      	movs	r3, #1
 80081d6:	9307      	str	r3, [sp, #28]
 80081d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081da:	220a      	movs	r2, #10
 80081dc:	9308      	str	r3, [sp, #32]
 80081de:	2300      	movs	r3, #0
 80081e0:	469b      	mov	fp, r3
 80081e2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80081e6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80081e8:	7805      	ldrb	r5, [r0, #0]
 80081ea:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80081ee:	b2d9      	uxtb	r1, r3
 80081f0:	2909      	cmp	r1, #9
 80081f2:	d927      	bls.n	8008244 <_strtod_l+0x1a4>
 80081f4:	4622      	mov	r2, r4
 80081f6:	4639      	mov	r1, r7
 80081f8:	f003 fb69 	bl	800b8ce <strncmp>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d033      	beq.n	8008268 <_strtod_l+0x1c8>
 8008200:	2000      	movs	r0, #0
 8008202:	462a      	mov	r2, r5
 8008204:	465c      	mov	r4, fp
 8008206:	4603      	mov	r3, r0
 8008208:	9004      	str	r0, [sp, #16]
 800820a:	2a65      	cmp	r2, #101	; 0x65
 800820c:	d001      	beq.n	8008212 <_strtod_l+0x172>
 800820e:	2a45      	cmp	r2, #69	; 0x45
 8008210:	d114      	bne.n	800823c <_strtod_l+0x19c>
 8008212:	b91c      	cbnz	r4, 800821c <_strtod_l+0x17c>
 8008214:	9a07      	ldr	r2, [sp, #28]
 8008216:	4302      	orrs	r2, r0
 8008218:	d09f      	beq.n	800815a <_strtod_l+0xba>
 800821a:	2400      	movs	r4, #0
 800821c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800821e:	1c72      	adds	r2, r6, #1
 8008220:	9219      	str	r2, [sp, #100]	; 0x64
 8008222:	7872      	ldrb	r2, [r6, #1]
 8008224:	2a2b      	cmp	r2, #43	; 0x2b
 8008226:	d079      	beq.n	800831c <_strtod_l+0x27c>
 8008228:	2a2d      	cmp	r2, #45	; 0x2d
 800822a:	f000 8083 	beq.w	8008334 <_strtod_l+0x294>
 800822e:	2700      	movs	r7, #0
 8008230:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008234:	2909      	cmp	r1, #9
 8008236:	f240 8083 	bls.w	8008340 <_strtod_l+0x2a0>
 800823a:	9619      	str	r6, [sp, #100]	; 0x64
 800823c:	2500      	movs	r5, #0
 800823e:	e09f      	b.n	8008380 <_strtod_l+0x2e0>
 8008240:	2300      	movs	r3, #0
 8008242:	e7c8      	b.n	80081d6 <_strtod_l+0x136>
 8008244:	f1bb 0f08 	cmp.w	fp, #8
 8008248:	bfd5      	itete	le
 800824a:	9906      	ldrle	r1, [sp, #24]
 800824c:	9905      	ldrgt	r1, [sp, #20]
 800824e:	fb02 3301 	mlale	r3, r2, r1, r3
 8008252:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008256:	f100 0001 	add.w	r0, r0, #1
 800825a:	bfd4      	ite	le
 800825c:	9306      	strle	r3, [sp, #24]
 800825e:	9305      	strgt	r3, [sp, #20]
 8008260:	f10b 0b01 	add.w	fp, fp, #1
 8008264:	9019      	str	r0, [sp, #100]	; 0x64
 8008266:	e7be      	b.n	80081e6 <_strtod_l+0x146>
 8008268:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800826a:	191a      	adds	r2, r3, r4
 800826c:	9219      	str	r2, [sp, #100]	; 0x64
 800826e:	5d1a      	ldrb	r2, [r3, r4]
 8008270:	f1bb 0f00 	cmp.w	fp, #0
 8008274:	d036      	beq.n	80082e4 <_strtod_l+0x244>
 8008276:	465c      	mov	r4, fp
 8008278:	9004      	str	r0, [sp, #16]
 800827a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800827e:	2b09      	cmp	r3, #9
 8008280:	d912      	bls.n	80082a8 <_strtod_l+0x208>
 8008282:	2301      	movs	r3, #1
 8008284:	e7c1      	b.n	800820a <_strtod_l+0x16a>
 8008286:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008288:	3001      	adds	r0, #1
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	9219      	str	r2, [sp, #100]	; 0x64
 800828e:	785a      	ldrb	r2, [r3, #1]
 8008290:	2a30      	cmp	r2, #48	; 0x30
 8008292:	d0f8      	beq.n	8008286 <_strtod_l+0x1e6>
 8008294:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008298:	2b08      	cmp	r3, #8
 800829a:	f200 84d5 	bhi.w	8008c48 <_strtod_l+0xba8>
 800829e:	9004      	str	r0, [sp, #16]
 80082a0:	2000      	movs	r0, #0
 80082a2:	4604      	mov	r4, r0
 80082a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082a6:	9308      	str	r3, [sp, #32]
 80082a8:	3a30      	subs	r2, #48	; 0x30
 80082aa:	f100 0301 	add.w	r3, r0, #1
 80082ae:	d013      	beq.n	80082d8 <_strtod_l+0x238>
 80082b0:	9904      	ldr	r1, [sp, #16]
 80082b2:	1905      	adds	r5, r0, r4
 80082b4:	4419      	add	r1, r3
 80082b6:	9104      	str	r1, [sp, #16]
 80082b8:	4623      	mov	r3, r4
 80082ba:	210a      	movs	r1, #10
 80082bc:	42ab      	cmp	r3, r5
 80082be:	d113      	bne.n	80082e8 <_strtod_l+0x248>
 80082c0:	1823      	adds	r3, r4, r0
 80082c2:	2b08      	cmp	r3, #8
 80082c4:	f104 0401 	add.w	r4, r4, #1
 80082c8:	4404      	add	r4, r0
 80082ca:	dc1b      	bgt.n	8008304 <_strtod_l+0x264>
 80082cc:	230a      	movs	r3, #10
 80082ce:	9906      	ldr	r1, [sp, #24]
 80082d0:	fb03 2301 	mla	r3, r3, r1, r2
 80082d4:	9306      	str	r3, [sp, #24]
 80082d6:	2300      	movs	r3, #0
 80082d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80082da:	4618      	mov	r0, r3
 80082dc:	1c51      	adds	r1, r2, #1
 80082de:	9119      	str	r1, [sp, #100]	; 0x64
 80082e0:	7852      	ldrb	r2, [r2, #1]
 80082e2:	e7ca      	b.n	800827a <_strtod_l+0x1da>
 80082e4:	4658      	mov	r0, fp
 80082e6:	e7d3      	b.n	8008290 <_strtod_l+0x1f0>
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	dc04      	bgt.n	80082f6 <_strtod_l+0x256>
 80082ec:	9f06      	ldr	r7, [sp, #24]
 80082ee:	434f      	muls	r7, r1
 80082f0:	9706      	str	r7, [sp, #24]
 80082f2:	3301      	adds	r3, #1
 80082f4:	e7e2      	b.n	80082bc <_strtod_l+0x21c>
 80082f6:	1c5f      	adds	r7, r3, #1
 80082f8:	2f10      	cmp	r7, #16
 80082fa:	bfde      	ittt	le
 80082fc:	9f05      	ldrle	r7, [sp, #20]
 80082fe:	434f      	mulle	r7, r1
 8008300:	9705      	strle	r7, [sp, #20]
 8008302:	e7f6      	b.n	80082f2 <_strtod_l+0x252>
 8008304:	2c10      	cmp	r4, #16
 8008306:	bfdf      	itttt	le
 8008308:	230a      	movle	r3, #10
 800830a:	9905      	ldrle	r1, [sp, #20]
 800830c:	fb03 2301 	mlale	r3, r3, r1, r2
 8008310:	9305      	strle	r3, [sp, #20]
 8008312:	e7e0      	b.n	80082d6 <_strtod_l+0x236>
 8008314:	2300      	movs	r3, #0
 8008316:	9304      	str	r3, [sp, #16]
 8008318:	2301      	movs	r3, #1
 800831a:	e77b      	b.n	8008214 <_strtod_l+0x174>
 800831c:	2700      	movs	r7, #0
 800831e:	1cb2      	adds	r2, r6, #2
 8008320:	9219      	str	r2, [sp, #100]	; 0x64
 8008322:	78b2      	ldrb	r2, [r6, #2]
 8008324:	e784      	b.n	8008230 <_strtod_l+0x190>
 8008326:	bf00      	nop
 8008328:	0800c034 	.word	0x0800c034
 800832c:	0800bd84 	.word	0x0800bd84
 8008330:	7ff00000 	.word	0x7ff00000
 8008334:	2701      	movs	r7, #1
 8008336:	e7f2      	b.n	800831e <_strtod_l+0x27e>
 8008338:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800833a:	1c51      	adds	r1, r2, #1
 800833c:	9119      	str	r1, [sp, #100]	; 0x64
 800833e:	7852      	ldrb	r2, [r2, #1]
 8008340:	2a30      	cmp	r2, #48	; 0x30
 8008342:	d0f9      	beq.n	8008338 <_strtod_l+0x298>
 8008344:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008348:	2908      	cmp	r1, #8
 800834a:	f63f af77 	bhi.w	800823c <_strtod_l+0x19c>
 800834e:	f04f 0e0a 	mov.w	lr, #10
 8008352:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008356:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008358:	9209      	str	r2, [sp, #36]	; 0x24
 800835a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800835c:	1c51      	adds	r1, r2, #1
 800835e:	9119      	str	r1, [sp, #100]	; 0x64
 8008360:	7852      	ldrb	r2, [r2, #1]
 8008362:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008366:	2d09      	cmp	r5, #9
 8008368:	d935      	bls.n	80083d6 <_strtod_l+0x336>
 800836a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800836c:	1b49      	subs	r1, r1, r5
 800836e:	2908      	cmp	r1, #8
 8008370:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008374:	dc02      	bgt.n	800837c <_strtod_l+0x2dc>
 8008376:	4565      	cmp	r5, ip
 8008378:	bfa8      	it	ge
 800837a:	4665      	movge	r5, ip
 800837c:	b107      	cbz	r7, 8008380 <_strtod_l+0x2e0>
 800837e:	426d      	negs	r5, r5
 8008380:	2c00      	cmp	r4, #0
 8008382:	d14c      	bne.n	800841e <_strtod_l+0x37e>
 8008384:	9907      	ldr	r1, [sp, #28]
 8008386:	4301      	orrs	r1, r0
 8008388:	f47f aecb 	bne.w	8008122 <_strtod_l+0x82>
 800838c:	2b00      	cmp	r3, #0
 800838e:	f47f aee4 	bne.w	800815a <_strtod_l+0xba>
 8008392:	2a69      	cmp	r2, #105	; 0x69
 8008394:	d026      	beq.n	80083e4 <_strtod_l+0x344>
 8008396:	dc23      	bgt.n	80083e0 <_strtod_l+0x340>
 8008398:	2a49      	cmp	r2, #73	; 0x49
 800839a:	d023      	beq.n	80083e4 <_strtod_l+0x344>
 800839c:	2a4e      	cmp	r2, #78	; 0x4e
 800839e:	f47f aedc 	bne.w	800815a <_strtod_l+0xba>
 80083a2:	499d      	ldr	r1, [pc, #628]	; (8008618 <_strtod_l+0x578>)
 80083a4:	a819      	add	r0, sp, #100	; 0x64
 80083a6:	f002 f88b 	bl	800a4c0 <__match>
 80083aa:	2800      	cmp	r0, #0
 80083ac:	f43f aed5 	beq.w	800815a <_strtod_l+0xba>
 80083b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b28      	cmp	r3, #40	; 0x28
 80083b6:	d12c      	bne.n	8008412 <_strtod_l+0x372>
 80083b8:	4998      	ldr	r1, [pc, #608]	; (800861c <_strtod_l+0x57c>)
 80083ba:	aa1c      	add	r2, sp, #112	; 0x70
 80083bc:	a819      	add	r0, sp, #100	; 0x64
 80083be:	f002 f893 	bl	800a4e8 <__hexnan>
 80083c2:	2805      	cmp	r0, #5
 80083c4:	d125      	bne.n	8008412 <_strtod_l+0x372>
 80083c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083c8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80083cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80083d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80083d4:	e6a5      	b.n	8008122 <_strtod_l+0x82>
 80083d6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80083da:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80083de:	e7bc      	b.n	800835a <_strtod_l+0x2ba>
 80083e0:	2a6e      	cmp	r2, #110	; 0x6e
 80083e2:	e7dc      	b.n	800839e <_strtod_l+0x2fe>
 80083e4:	498e      	ldr	r1, [pc, #568]	; (8008620 <_strtod_l+0x580>)
 80083e6:	a819      	add	r0, sp, #100	; 0x64
 80083e8:	f002 f86a 	bl	800a4c0 <__match>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	f43f aeb4 	beq.w	800815a <_strtod_l+0xba>
 80083f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083f4:	498b      	ldr	r1, [pc, #556]	; (8008624 <_strtod_l+0x584>)
 80083f6:	3b01      	subs	r3, #1
 80083f8:	a819      	add	r0, sp, #100	; 0x64
 80083fa:	9319      	str	r3, [sp, #100]	; 0x64
 80083fc:	f002 f860 	bl	800a4c0 <__match>
 8008400:	b910      	cbnz	r0, 8008408 <_strtod_l+0x368>
 8008402:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008404:	3301      	adds	r3, #1
 8008406:	9319      	str	r3, [sp, #100]	; 0x64
 8008408:	f04f 0800 	mov.w	r8, #0
 800840c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8008628 <_strtod_l+0x588>
 8008410:	e687      	b.n	8008122 <_strtod_l+0x82>
 8008412:	4886      	ldr	r0, [pc, #536]	; (800862c <_strtod_l+0x58c>)
 8008414:	f003 fa02 	bl	800b81c <nan>
 8008418:	4680      	mov	r8, r0
 800841a:	4689      	mov	r9, r1
 800841c:	e681      	b.n	8008122 <_strtod_l+0x82>
 800841e:	9b04      	ldr	r3, [sp, #16]
 8008420:	f1bb 0f00 	cmp.w	fp, #0
 8008424:	bf08      	it	eq
 8008426:	46a3      	moveq	fp, r4
 8008428:	1aeb      	subs	r3, r5, r3
 800842a:	2c10      	cmp	r4, #16
 800842c:	9806      	ldr	r0, [sp, #24]
 800842e:	4626      	mov	r6, r4
 8008430:	9307      	str	r3, [sp, #28]
 8008432:	bfa8      	it	ge
 8008434:	2610      	movge	r6, #16
 8008436:	f7f7 ffd5 	bl	80003e4 <__aeabi_ui2d>
 800843a:	2c09      	cmp	r4, #9
 800843c:	4680      	mov	r8, r0
 800843e:	4689      	mov	r9, r1
 8008440:	dd13      	ble.n	800846a <_strtod_l+0x3ca>
 8008442:	4b7b      	ldr	r3, [pc, #492]	; (8008630 <_strtod_l+0x590>)
 8008444:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008448:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800844c:	f7f8 f844 	bl	80004d8 <__aeabi_dmul>
 8008450:	4680      	mov	r8, r0
 8008452:	9805      	ldr	r0, [sp, #20]
 8008454:	4689      	mov	r9, r1
 8008456:	f7f7 ffc5 	bl	80003e4 <__aeabi_ui2d>
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	4640      	mov	r0, r8
 8008460:	4649      	mov	r1, r9
 8008462:	f7f7 fe83 	bl	800016c <__adddf3>
 8008466:	4680      	mov	r8, r0
 8008468:	4689      	mov	r9, r1
 800846a:	2c0f      	cmp	r4, #15
 800846c:	dc36      	bgt.n	80084dc <_strtod_l+0x43c>
 800846e:	9b07      	ldr	r3, [sp, #28]
 8008470:	2b00      	cmp	r3, #0
 8008472:	f43f ae56 	beq.w	8008122 <_strtod_l+0x82>
 8008476:	dd22      	ble.n	80084be <_strtod_l+0x41e>
 8008478:	2b16      	cmp	r3, #22
 800847a:	dc09      	bgt.n	8008490 <_strtod_l+0x3f0>
 800847c:	496c      	ldr	r1, [pc, #432]	; (8008630 <_strtod_l+0x590>)
 800847e:	4642      	mov	r2, r8
 8008480:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008484:	464b      	mov	r3, r9
 8008486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800848a:	f7f8 f825 	bl	80004d8 <__aeabi_dmul>
 800848e:	e7c3      	b.n	8008418 <_strtod_l+0x378>
 8008490:	9a07      	ldr	r2, [sp, #28]
 8008492:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008496:	4293      	cmp	r3, r2
 8008498:	db20      	blt.n	80084dc <_strtod_l+0x43c>
 800849a:	4d65      	ldr	r5, [pc, #404]	; (8008630 <_strtod_l+0x590>)
 800849c:	f1c4 040f 	rsb	r4, r4, #15
 80084a0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80084a4:	4642      	mov	r2, r8
 80084a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084aa:	464b      	mov	r3, r9
 80084ac:	f7f8 f814 	bl	80004d8 <__aeabi_dmul>
 80084b0:	9b07      	ldr	r3, [sp, #28]
 80084b2:	1b1c      	subs	r4, r3, r4
 80084b4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80084b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084bc:	e7e5      	b.n	800848a <_strtod_l+0x3ea>
 80084be:	9b07      	ldr	r3, [sp, #28]
 80084c0:	3316      	adds	r3, #22
 80084c2:	db0b      	blt.n	80084dc <_strtod_l+0x43c>
 80084c4:	9b04      	ldr	r3, [sp, #16]
 80084c6:	4640      	mov	r0, r8
 80084c8:	1b5d      	subs	r5, r3, r5
 80084ca:	4b59      	ldr	r3, [pc, #356]	; (8008630 <_strtod_l+0x590>)
 80084cc:	4649      	mov	r1, r9
 80084ce:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80084d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084d6:	f7f8 f929 	bl	800072c <__aeabi_ddiv>
 80084da:	e79d      	b.n	8008418 <_strtod_l+0x378>
 80084dc:	9b07      	ldr	r3, [sp, #28]
 80084de:	1ba6      	subs	r6, r4, r6
 80084e0:	441e      	add	r6, r3
 80084e2:	2e00      	cmp	r6, #0
 80084e4:	dd74      	ble.n	80085d0 <_strtod_l+0x530>
 80084e6:	f016 030f 	ands.w	r3, r6, #15
 80084ea:	d00a      	beq.n	8008502 <_strtod_l+0x462>
 80084ec:	4950      	ldr	r1, [pc, #320]	; (8008630 <_strtod_l+0x590>)
 80084ee:	4642      	mov	r2, r8
 80084f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084f8:	464b      	mov	r3, r9
 80084fa:	f7f7 ffed 	bl	80004d8 <__aeabi_dmul>
 80084fe:	4680      	mov	r8, r0
 8008500:	4689      	mov	r9, r1
 8008502:	f036 060f 	bics.w	r6, r6, #15
 8008506:	d052      	beq.n	80085ae <_strtod_l+0x50e>
 8008508:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800850c:	dd27      	ble.n	800855e <_strtod_l+0x4be>
 800850e:	f04f 0b00 	mov.w	fp, #0
 8008512:	f8cd b010 	str.w	fp, [sp, #16]
 8008516:	f8cd b020 	str.w	fp, [sp, #32]
 800851a:	f8cd b018 	str.w	fp, [sp, #24]
 800851e:	2322      	movs	r3, #34	; 0x22
 8008520:	f04f 0800 	mov.w	r8, #0
 8008524:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8008628 <_strtod_l+0x588>
 8008528:	f8ca 3000 	str.w	r3, [sl]
 800852c:	9b08      	ldr	r3, [sp, #32]
 800852e:	2b00      	cmp	r3, #0
 8008530:	f43f adf7 	beq.w	8008122 <_strtod_l+0x82>
 8008534:	4650      	mov	r0, sl
 8008536:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008538:	f002 f954 	bl	800a7e4 <_Bfree>
 800853c:	4650      	mov	r0, sl
 800853e:	9906      	ldr	r1, [sp, #24]
 8008540:	f002 f950 	bl	800a7e4 <_Bfree>
 8008544:	4650      	mov	r0, sl
 8008546:	9904      	ldr	r1, [sp, #16]
 8008548:	f002 f94c 	bl	800a7e4 <_Bfree>
 800854c:	4650      	mov	r0, sl
 800854e:	9908      	ldr	r1, [sp, #32]
 8008550:	f002 f948 	bl	800a7e4 <_Bfree>
 8008554:	4659      	mov	r1, fp
 8008556:	4650      	mov	r0, sl
 8008558:	f002 f944 	bl	800a7e4 <_Bfree>
 800855c:	e5e1      	b.n	8008122 <_strtod_l+0x82>
 800855e:	4b35      	ldr	r3, [pc, #212]	; (8008634 <_strtod_l+0x594>)
 8008560:	4640      	mov	r0, r8
 8008562:	9305      	str	r3, [sp, #20]
 8008564:	2300      	movs	r3, #0
 8008566:	4649      	mov	r1, r9
 8008568:	461f      	mov	r7, r3
 800856a:	1136      	asrs	r6, r6, #4
 800856c:	2e01      	cmp	r6, #1
 800856e:	dc21      	bgt.n	80085b4 <_strtod_l+0x514>
 8008570:	b10b      	cbz	r3, 8008576 <_strtod_l+0x4d6>
 8008572:	4680      	mov	r8, r0
 8008574:	4689      	mov	r9, r1
 8008576:	4b2f      	ldr	r3, [pc, #188]	; (8008634 <_strtod_l+0x594>)
 8008578:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800857c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008580:	4642      	mov	r2, r8
 8008582:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008586:	464b      	mov	r3, r9
 8008588:	f7f7 ffa6 	bl	80004d8 <__aeabi_dmul>
 800858c:	4b26      	ldr	r3, [pc, #152]	; (8008628 <_strtod_l+0x588>)
 800858e:	460a      	mov	r2, r1
 8008590:	400b      	ands	r3, r1
 8008592:	4929      	ldr	r1, [pc, #164]	; (8008638 <_strtod_l+0x598>)
 8008594:	4680      	mov	r8, r0
 8008596:	428b      	cmp	r3, r1
 8008598:	d8b9      	bhi.n	800850e <_strtod_l+0x46e>
 800859a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800859e:	428b      	cmp	r3, r1
 80085a0:	bf86      	itte	hi
 80085a2:	f04f 38ff 	movhi.w	r8, #4294967295
 80085a6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800863c <_strtod_l+0x59c>
 80085aa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80085ae:	2300      	movs	r3, #0
 80085b0:	9305      	str	r3, [sp, #20]
 80085b2:	e07f      	b.n	80086b4 <_strtod_l+0x614>
 80085b4:	07f2      	lsls	r2, r6, #31
 80085b6:	d505      	bpl.n	80085c4 <_strtod_l+0x524>
 80085b8:	9b05      	ldr	r3, [sp, #20]
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	f7f7 ff8b 	bl	80004d8 <__aeabi_dmul>
 80085c2:	2301      	movs	r3, #1
 80085c4:	9a05      	ldr	r2, [sp, #20]
 80085c6:	3701      	adds	r7, #1
 80085c8:	3208      	adds	r2, #8
 80085ca:	1076      	asrs	r6, r6, #1
 80085cc:	9205      	str	r2, [sp, #20]
 80085ce:	e7cd      	b.n	800856c <_strtod_l+0x4cc>
 80085d0:	d0ed      	beq.n	80085ae <_strtod_l+0x50e>
 80085d2:	4276      	negs	r6, r6
 80085d4:	f016 020f 	ands.w	r2, r6, #15
 80085d8:	d00a      	beq.n	80085f0 <_strtod_l+0x550>
 80085da:	4b15      	ldr	r3, [pc, #84]	; (8008630 <_strtod_l+0x590>)
 80085dc:	4640      	mov	r0, r8
 80085de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085e2:	4649      	mov	r1, r9
 80085e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e8:	f7f8 f8a0 	bl	800072c <__aeabi_ddiv>
 80085ec:	4680      	mov	r8, r0
 80085ee:	4689      	mov	r9, r1
 80085f0:	1136      	asrs	r6, r6, #4
 80085f2:	d0dc      	beq.n	80085ae <_strtod_l+0x50e>
 80085f4:	2e1f      	cmp	r6, #31
 80085f6:	dd23      	ble.n	8008640 <_strtod_l+0x5a0>
 80085f8:	f04f 0b00 	mov.w	fp, #0
 80085fc:	f8cd b010 	str.w	fp, [sp, #16]
 8008600:	f8cd b020 	str.w	fp, [sp, #32]
 8008604:	f8cd b018 	str.w	fp, [sp, #24]
 8008608:	2322      	movs	r3, #34	; 0x22
 800860a:	f04f 0800 	mov.w	r8, #0
 800860e:	f04f 0900 	mov.w	r9, #0
 8008612:	f8ca 3000 	str.w	r3, [sl]
 8008616:	e789      	b.n	800852c <_strtod_l+0x48c>
 8008618:	0800bd55 	.word	0x0800bd55
 800861c:	0800bd98 	.word	0x0800bd98
 8008620:	0800bd4d 	.word	0x0800bd4d
 8008624:	0800bedc 	.word	0x0800bedc
 8008628:	7ff00000 	.word	0x7ff00000
 800862c:	0800c1f0 	.word	0x0800c1f0
 8008630:	0800c0d0 	.word	0x0800c0d0
 8008634:	0800c0a8 	.word	0x0800c0a8
 8008638:	7ca00000 	.word	0x7ca00000
 800863c:	7fefffff 	.word	0x7fefffff
 8008640:	f016 0310 	ands.w	r3, r6, #16
 8008644:	bf18      	it	ne
 8008646:	236a      	movne	r3, #106	; 0x6a
 8008648:	4640      	mov	r0, r8
 800864a:	9305      	str	r3, [sp, #20]
 800864c:	4649      	mov	r1, r9
 800864e:	2300      	movs	r3, #0
 8008650:	4fb0      	ldr	r7, [pc, #704]	; (8008914 <_strtod_l+0x874>)
 8008652:	07f2      	lsls	r2, r6, #31
 8008654:	d504      	bpl.n	8008660 <_strtod_l+0x5c0>
 8008656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800865a:	f7f7 ff3d 	bl	80004d8 <__aeabi_dmul>
 800865e:	2301      	movs	r3, #1
 8008660:	1076      	asrs	r6, r6, #1
 8008662:	f107 0708 	add.w	r7, r7, #8
 8008666:	d1f4      	bne.n	8008652 <_strtod_l+0x5b2>
 8008668:	b10b      	cbz	r3, 800866e <_strtod_l+0x5ce>
 800866a:	4680      	mov	r8, r0
 800866c:	4689      	mov	r9, r1
 800866e:	9b05      	ldr	r3, [sp, #20]
 8008670:	b1c3      	cbz	r3, 80086a4 <_strtod_l+0x604>
 8008672:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008676:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800867a:	2b00      	cmp	r3, #0
 800867c:	4649      	mov	r1, r9
 800867e:	dd11      	ble.n	80086a4 <_strtod_l+0x604>
 8008680:	2b1f      	cmp	r3, #31
 8008682:	f340 8127 	ble.w	80088d4 <_strtod_l+0x834>
 8008686:	2b34      	cmp	r3, #52	; 0x34
 8008688:	bfd8      	it	le
 800868a:	f04f 33ff 	movle.w	r3, #4294967295
 800868e:	f04f 0800 	mov.w	r8, #0
 8008692:	bfcf      	iteee	gt
 8008694:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008698:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800869c:	fa03 f202 	lslle.w	r2, r3, r2
 80086a0:	ea02 0901 	andle.w	r9, r2, r1
 80086a4:	2200      	movs	r2, #0
 80086a6:	2300      	movs	r3, #0
 80086a8:	4640      	mov	r0, r8
 80086aa:	4649      	mov	r1, r9
 80086ac:	f7f8 f97c 	bl	80009a8 <__aeabi_dcmpeq>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d1a1      	bne.n	80085f8 <_strtod_l+0x558>
 80086b4:	9b06      	ldr	r3, [sp, #24]
 80086b6:	465a      	mov	r2, fp
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	4650      	mov	r0, sl
 80086bc:	4623      	mov	r3, r4
 80086be:	9908      	ldr	r1, [sp, #32]
 80086c0:	f002 f8f8 	bl	800a8b4 <__s2b>
 80086c4:	9008      	str	r0, [sp, #32]
 80086c6:	2800      	cmp	r0, #0
 80086c8:	f43f af21 	beq.w	800850e <_strtod_l+0x46e>
 80086cc:	9b04      	ldr	r3, [sp, #16]
 80086ce:	f04f 0b00 	mov.w	fp, #0
 80086d2:	1b5d      	subs	r5, r3, r5
 80086d4:	9b07      	ldr	r3, [sp, #28]
 80086d6:	f8cd b010 	str.w	fp, [sp, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	bfb4      	ite	lt
 80086de:	462b      	movlt	r3, r5
 80086e0:	2300      	movge	r3, #0
 80086e2:	930e      	str	r3, [sp, #56]	; 0x38
 80086e4:	9b07      	ldr	r3, [sp, #28]
 80086e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80086ea:	9314      	str	r3, [sp, #80]	; 0x50
 80086ec:	9b08      	ldr	r3, [sp, #32]
 80086ee:	4650      	mov	r0, sl
 80086f0:	6859      	ldr	r1, [r3, #4]
 80086f2:	f002 f837 	bl	800a764 <_Balloc>
 80086f6:	9006      	str	r0, [sp, #24]
 80086f8:	2800      	cmp	r0, #0
 80086fa:	f43f af10 	beq.w	800851e <_strtod_l+0x47e>
 80086fe:	9b08      	ldr	r3, [sp, #32]
 8008700:	300c      	adds	r0, #12
 8008702:	691a      	ldr	r2, [r3, #16]
 8008704:	f103 010c 	add.w	r1, r3, #12
 8008708:	3202      	adds	r2, #2
 800870a:	0092      	lsls	r2, r2, #2
 800870c:	f002 f81c 	bl	800a748 <memcpy>
 8008710:	ab1c      	add	r3, sp, #112	; 0x70
 8008712:	9301      	str	r3, [sp, #4]
 8008714:	ab1b      	add	r3, sp, #108	; 0x6c
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	4642      	mov	r2, r8
 800871a:	464b      	mov	r3, r9
 800871c:	4650      	mov	r0, sl
 800871e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8008722:	f002 fc09 	bl	800af38 <__d2b>
 8008726:	901a      	str	r0, [sp, #104]	; 0x68
 8008728:	2800      	cmp	r0, #0
 800872a:	f43f aef8 	beq.w	800851e <_strtod_l+0x47e>
 800872e:	2101      	movs	r1, #1
 8008730:	4650      	mov	r0, sl
 8008732:	f002 f957 	bl	800a9e4 <__i2b>
 8008736:	4603      	mov	r3, r0
 8008738:	9004      	str	r0, [sp, #16]
 800873a:	2800      	cmp	r0, #0
 800873c:	f43f aeef 	beq.w	800851e <_strtod_l+0x47e>
 8008740:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008742:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008744:	2d00      	cmp	r5, #0
 8008746:	bfab      	itete	ge
 8008748:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800874a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800874c:	18ee      	addge	r6, r5, r3
 800874e:	1b5c      	sublt	r4, r3, r5
 8008750:	9b05      	ldr	r3, [sp, #20]
 8008752:	bfa8      	it	ge
 8008754:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8008756:	eba5 0503 	sub.w	r5, r5, r3
 800875a:	4415      	add	r5, r2
 800875c:	4b6e      	ldr	r3, [pc, #440]	; (8008918 <_strtod_l+0x878>)
 800875e:	f105 35ff 	add.w	r5, r5, #4294967295
 8008762:	bfb8      	it	lt
 8008764:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008766:	429d      	cmp	r5, r3
 8008768:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800876c:	f280 80c4 	bge.w	80088f8 <_strtod_l+0x858>
 8008770:	1b5b      	subs	r3, r3, r5
 8008772:	2b1f      	cmp	r3, #31
 8008774:	f04f 0701 	mov.w	r7, #1
 8008778:	eba2 0203 	sub.w	r2, r2, r3
 800877c:	f300 80b1 	bgt.w	80088e2 <_strtod_l+0x842>
 8008780:	2500      	movs	r5, #0
 8008782:	fa07 f303 	lsl.w	r3, r7, r3
 8008786:	930f      	str	r3, [sp, #60]	; 0x3c
 8008788:	18b7      	adds	r7, r6, r2
 800878a:	9b05      	ldr	r3, [sp, #20]
 800878c:	42be      	cmp	r6, r7
 800878e:	4414      	add	r4, r2
 8008790:	441c      	add	r4, r3
 8008792:	4633      	mov	r3, r6
 8008794:	bfa8      	it	ge
 8008796:	463b      	movge	r3, r7
 8008798:	42a3      	cmp	r3, r4
 800879a:	bfa8      	it	ge
 800879c:	4623      	movge	r3, r4
 800879e:	2b00      	cmp	r3, #0
 80087a0:	bfc2      	ittt	gt
 80087a2:	1aff      	subgt	r7, r7, r3
 80087a4:	1ae4      	subgt	r4, r4, r3
 80087a6:	1af6      	subgt	r6, r6, r3
 80087a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	dd17      	ble.n	80087de <_strtod_l+0x73e>
 80087ae:	461a      	mov	r2, r3
 80087b0:	4650      	mov	r0, sl
 80087b2:	9904      	ldr	r1, [sp, #16]
 80087b4:	f002 f9d4 	bl	800ab60 <__pow5mult>
 80087b8:	9004      	str	r0, [sp, #16]
 80087ba:	2800      	cmp	r0, #0
 80087bc:	f43f aeaf 	beq.w	800851e <_strtod_l+0x47e>
 80087c0:	4601      	mov	r1, r0
 80087c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80087c4:	4650      	mov	r0, sl
 80087c6:	f002 f923 	bl	800aa10 <__multiply>
 80087ca:	9009      	str	r0, [sp, #36]	; 0x24
 80087cc:	2800      	cmp	r0, #0
 80087ce:	f43f aea6 	beq.w	800851e <_strtod_l+0x47e>
 80087d2:	4650      	mov	r0, sl
 80087d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80087d6:	f002 f805 	bl	800a7e4 <_Bfree>
 80087da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087dc:	931a      	str	r3, [sp, #104]	; 0x68
 80087de:	2f00      	cmp	r7, #0
 80087e0:	f300 808e 	bgt.w	8008900 <_strtod_l+0x860>
 80087e4:	9b07      	ldr	r3, [sp, #28]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	dd08      	ble.n	80087fc <_strtod_l+0x75c>
 80087ea:	4650      	mov	r0, sl
 80087ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087ee:	9906      	ldr	r1, [sp, #24]
 80087f0:	f002 f9b6 	bl	800ab60 <__pow5mult>
 80087f4:	9006      	str	r0, [sp, #24]
 80087f6:	2800      	cmp	r0, #0
 80087f8:	f43f ae91 	beq.w	800851e <_strtod_l+0x47e>
 80087fc:	2c00      	cmp	r4, #0
 80087fe:	dd08      	ble.n	8008812 <_strtod_l+0x772>
 8008800:	4622      	mov	r2, r4
 8008802:	4650      	mov	r0, sl
 8008804:	9906      	ldr	r1, [sp, #24]
 8008806:	f002 fa05 	bl	800ac14 <__lshift>
 800880a:	9006      	str	r0, [sp, #24]
 800880c:	2800      	cmp	r0, #0
 800880e:	f43f ae86 	beq.w	800851e <_strtod_l+0x47e>
 8008812:	2e00      	cmp	r6, #0
 8008814:	dd08      	ble.n	8008828 <_strtod_l+0x788>
 8008816:	4632      	mov	r2, r6
 8008818:	4650      	mov	r0, sl
 800881a:	9904      	ldr	r1, [sp, #16]
 800881c:	f002 f9fa 	bl	800ac14 <__lshift>
 8008820:	9004      	str	r0, [sp, #16]
 8008822:	2800      	cmp	r0, #0
 8008824:	f43f ae7b 	beq.w	800851e <_strtod_l+0x47e>
 8008828:	4650      	mov	r0, sl
 800882a:	9a06      	ldr	r2, [sp, #24]
 800882c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800882e:	f002 fa7d 	bl	800ad2c <__mdiff>
 8008832:	4683      	mov	fp, r0
 8008834:	2800      	cmp	r0, #0
 8008836:	f43f ae72 	beq.w	800851e <_strtod_l+0x47e>
 800883a:	2400      	movs	r4, #0
 800883c:	68c3      	ldr	r3, [r0, #12]
 800883e:	9904      	ldr	r1, [sp, #16]
 8008840:	60c4      	str	r4, [r0, #12]
 8008842:	930b      	str	r3, [sp, #44]	; 0x2c
 8008844:	f002 fa56 	bl	800acf4 <__mcmp>
 8008848:	42a0      	cmp	r0, r4
 800884a:	da6b      	bge.n	8008924 <_strtod_l+0x884>
 800884c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800884e:	ea53 0308 	orrs.w	r3, r3, r8
 8008852:	f040 8091 	bne.w	8008978 <_strtod_l+0x8d8>
 8008856:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800885a:	2b00      	cmp	r3, #0
 800885c:	f040 808c 	bne.w	8008978 <_strtod_l+0x8d8>
 8008860:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008864:	0d1b      	lsrs	r3, r3, #20
 8008866:	051b      	lsls	r3, r3, #20
 8008868:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800886c:	f240 8084 	bls.w	8008978 <_strtod_l+0x8d8>
 8008870:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008874:	b91b      	cbnz	r3, 800887e <_strtod_l+0x7de>
 8008876:	f8db 3010 	ldr.w	r3, [fp, #16]
 800887a:	2b01      	cmp	r3, #1
 800887c:	dd7c      	ble.n	8008978 <_strtod_l+0x8d8>
 800887e:	4659      	mov	r1, fp
 8008880:	2201      	movs	r2, #1
 8008882:	4650      	mov	r0, sl
 8008884:	f002 f9c6 	bl	800ac14 <__lshift>
 8008888:	9904      	ldr	r1, [sp, #16]
 800888a:	4683      	mov	fp, r0
 800888c:	f002 fa32 	bl	800acf4 <__mcmp>
 8008890:	2800      	cmp	r0, #0
 8008892:	dd71      	ble.n	8008978 <_strtod_l+0x8d8>
 8008894:	9905      	ldr	r1, [sp, #20]
 8008896:	464b      	mov	r3, r9
 8008898:	4a20      	ldr	r2, [pc, #128]	; (800891c <_strtod_l+0x87c>)
 800889a:	2900      	cmp	r1, #0
 800889c:	f000 808c 	beq.w	80089b8 <_strtod_l+0x918>
 80088a0:	ea02 0109 	and.w	r1, r2, r9
 80088a4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80088a8:	f300 8086 	bgt.w	80089b8 <_strtod_l+0x918>
 80088ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80088b0:	f77f aeaa 	ble.w	8008608 <_strtod_l+0x568>
 80088b4:	4640      	mov	r0, r8
 80088b6:	4649      	mov	r1, r9
 80088b8:	4b19      	ldr	r3, [pc, #100]	; (8008920 <_strtod_l+0x880>)
 80088ba:	2200      	movs	r2, #0
 80088bc:	f7f7 fe0c 	bl	80004d8 <__aeabi_dmul>
 80088c0:	460b      	mov	r3, r1
 80088c2:	4303      	orrs	r3, r0
 80088c4:	bf08      	it	eq
 80088c6:	2322      	moveq	r3, #34	; 0x22
 80088c8:	4680      	mov	r8, r0
 80088ca:	4689      	mov	r9, r1
 80088cc:	bf08      	it	eq
 80088ce:	f8ca 3000 	streq.w	r3, [sl]
 80088d2:	e62f      	b.n	8008534 <_strtod_l+0x494>
 80088d4:	f04f 32ff 	mov.w	r2, #4294967295
 80088d8:	fa02 f303 	lsl.w	r3, r2, r3
 80088dc:	ea03 0808 	and.w	r8, r3, r8
 80088e0:	e6e0      	b.n	80086a4 <_strtod_l+0x604>
 80088e2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80088e6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80088ea:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80088ee:	35e2      	adds	r5, #226	; 0xe2
 80088f0:	fa07 f505 	lsl.w	r5, r7, r5
 80088f4:	970f      	str	r7, [sp, #60]	; 0x3c
 80088f6:	e747      	b.n	8008788 <_strtod_l+0x6e8>
 80088f8:	2301      	movs	r3, #1
 80088fa:	2500      	movs	r5, #0
 80088fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80088fe:	e743      	b.n	8008788 <_strtod_l+0x6e8>
 8008900:	463a      	mov	r2, r7
 8008902:	4650      	mov	r0, sl
 8008904:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008906:	f002 f985 	bl	800ac14 <__lshift>
 800890a:	901a      	str	r0, [sp, #104]	; 0x68
 800890c:	2800      	cmp	r0, #0
 800890e:	f47f af69 	bne.w	80087e4 <_strtod_l+0x744>
 8008912:	e604      	b.n	800851e <_strtod_l+0x47e>
 8008914:	0800bdb0 	.word	0x0800bdb0
 8008918:	fffffc02 	.word	0xfffffc02
 800891c:	7ff00000 	.word	0x7ff00000
 8008920:	39500000 	.word	0x39500000
 8008924:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008928:	d165      	bne.n	80089f6 <_strtod_l+0x956>
 800892a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800892c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008930:	b35a      	cbz	r2, 800898a <_strtod_l+0x8ea>
 8008932:	4a99      	ldr	r2, [pc, #612]	; (8008b98 <_strtod_l+0xaf8>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d12b      	bne.n	8008990 <_strtod_l+0x8f0>
 8008938:	9b05      	ldr	r3, [sp, #20]
 800893a:	4641      	mov	r1, r8
 800893c:	b303      	cbz	r3, 8008980 <_strtod_l+0x8e0>
 800893e:	464a      	mov	r2, r9
 8008940:	4b96      	ldr	r3, [pc, #600]	; (8008b9c <_strtod_l+0xafc>)
 8008942:	4013      	ands	r3, r2
 8008944:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008948:	f04f 32ff 	mov.w	r2, #4294967295
 800894c:	d81b      	bhi.n	8008986 <_strtod_l+0x8e6>
 800894e:	0d1b      	lsrs	r3, r3, #20
 8008950:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008954:	fa02 f303 	lsl.w	r3, r2, r3
 8008958:	4299      	cmp	r1, r3
 800895a:	d119      	bne.n	8008990 <_strtod_l+0x8f0>
 800895c:	4b90      	ldr	r3, [pc, #576]	; (8008ba0 <_strtod_l+0xb00>)
 800895e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008960:	429a      	cmp	r2, r3
 8008962:	d102      	bne.n	800896a <_strtod_l+0x8ca>
 8008964:	3101      	adds	r1, #1
 8008966:	f43f adda 	beq.w	800851e <_strtod_l+0x47e>
 800896a:	f04f 0800 	mov.w	r8, #0
 800896e:	4b8b      	ldr	r3, [pc, #556]	; (8008b9c <_strtod_l+0xafc>)
 8008970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008972:	401a      	ands	r2, r3
 8008974:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008978:	9b05      	ldr	r3, [sp, #20]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d19a      	bne.n	80088b4 <_strtod_l+0x814>
 800897e:	e5d9      	b.n	8008534 <_strtod_l+0x494>
 8008980:	f04f 33ff 	mov.w	r3, #4294967295
 8008984:	e7e8      	b.n	8008958 <_strtod_l+0x8b8>
 8008986:	4613      	mov	r3, r2
 8008988:	e7e6      	b.n	8008958 <_strtod_l+0x8b8>
 800898a:	ea53 0308 	orrs.w	r3, r3, r8
 800898e:	d081      	beq.n	8008894 <_strtod_l+0x7f4>
 8008990:	b1e5      	cbz	r5, 80089cc <_strtod_l+0x92c>
 8008992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008994:	421d      	tst	r5, r3
 8008996:	d0ef      	beq.n	8008978 <_strtod_l+0x8d8>
 8008998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800899a:	4640      	mov	r0, r8
 800899c:	4649      	mov	r1, r9
 800899e:	9a05      	ldr	r2, [sp, #20]
 80089a0:	b1c3      	cbz	r3, 80089d4 <_strtod_l+0x934>
 80089a2:	f7ff fb59 	bl	8008058 <sulp>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089ae:	f7f7 fbdd 	bl	800016c <__adddf3>
 80089b2:	4680      	mov	r8, r0
 80089b4:	4689      	mov	r9, r1
 80089b6:	e7df      	b.n	8008978 <_strtod_l+0x8d8>
 80089b8:	4013      	ands	r3, r2
 80089ba:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80089be:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80089c2:	f04f 38ff 	mov.w	r8, #4294967295
 80089c6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80089ca:	e7d5      	b.n	8008978 <_strtod_l+0x8d8>
 80089cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089ce:	ea13 0f08 	tst.w	r3, r8
 80089d2:	e7e0      	b.n	8008996 <_strtod_l+0x8f6>
 80089d4:	f7ff fb40 	bl	8008058 <sulp>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089e0:	f7f7 fbc2 	bl	8000168 <__aeabi_dsub>
 80089e4:	2200      	movs	r2, #0
 80089e6:	2300      	movs	r3, #0
 80089e8:	4680      	mov	r8, r0
 80089ea:	4689      	mov	r9, r1
 80089ec:	f7f7 ffdc 	bl	80009a8 <__aeabi_dcmpeq>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d0c1      	beq.n	8008978 <_strtod_l+0x8d8>
 80089f4:	e608      	b.n	8008608 <_strtod_l+0x568>
 80089f6:	4658      	mov	r0, fp
 80089f8:	9904      	ldr	r1, [sp, #16]
 80089fa:	f002 faf9 	bl	800aff0 <__ratio>
 80089fe:	2200      	movs	r2, #0
 8008a00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a04:	4606      	mov	r6, r0
 8008a06:	460f      	mov	r7, r1
 8008a08:	f7f7 ffe2 	bl	80009d0 <__aeabi_dcmple>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	d070      	beq.n	8008af2 <_strtod_l+0xa52>
 8008a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d042      	beq.n	8008a9c <_strtod_l+0x9fc>
 8008a16:	2600      	movs	r6, #0
 8008a18:	4f62      	ldr	r7, [pc, #392]	; (8008ba4 <_strtod_l+0xb04>)
 8008a1a:	4d62      	ldr	r5, [pc, #392]	; (8008ba4 <_strtod_l+0xb04>)
 8008a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a22:	0d1b      	lsrs	r3, r3, #20
 8008a24:	051b      	lsls	r3, r3, #20
 8008a26:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a2a:	4b5f      	ldr	r3, [pc, #380]	; (8008ba8 <_strtod_l+0xb08>)
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	f040 80c3 	bne.w	8008bb8 <_strtod_l+0xb18>
 8008a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a34:	4640      	mov	r0, r8
 8008a36:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	f002 fa02 	bl	800ae44 <__ulp>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4630      	mov	r0, r6
 8008a46:	4639      	mov	r1, r7
 8008a48:	f7f7 fd46 	bl	80004d8 <__aeabi_dmul>
 8008a4c:	4642      	mov	r2, r8
 8008a4e:	464b      	mov	r3, r9
 8008a50:	f7f7 fb8c 	bl	800016c <__adddf3>
 8008a54:	460b      	mov	r3, r1
 8008a56:	4951      	ldr	r1, [pc, #324]	; (8008b9c <_strtod_l+0xafc>)
 8008a58:	4a54      	ldr	r2, [pc, #336]	; (8008bac <_strtod_l+0xb0c>)
 8008a5a:	4019      	ands	r1, r3
 8008a5c:	4291      	cmp	r1, r2
 8008a5e:	4680      	mov	r8, r0
 8008a60:	d95d      	bls.n	8008b1e <_strtod_l+0xa7e>
 8008a62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a64:	4b4e      	ldr	r3, [pc, #312]	; (8008ba0 <_strtod_l+0xb00>)
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d103      	bne.n	8008a72 <_strtod_l+0x9d2>
 8008a6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	f43f ad56 	beq.w	800851e <_strtod_l+0x47e>
 8008a72:	f04f 38ff 	mov.w	r8, #4294967295
 8008a76:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008ba0 <_strtod_l+0xb00>
 8008a7a:	4650      	mov	r0, sl
 8008a7c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008a7e:	f001 feb1 	bl	800a7e4 <_Bfree>
 8008a82:	4650      	mov	r0, sl
 8008a84:	9906      	ldr	r1, [sp, #24]
 8008a86:	f001 fead 	bl	800a7e4 <_Bfree>
 8008a8a:	4650      	mov	r0, sl
 8008a8c:	9904      	ldr	r1, [sp, #16]
 8008a8e:	f001 fea9 	bl	800a7e4 <_Bfree>
 8008a92:	4659      	mov	r1, fp
 8008a94:	4650      	mov	r0, sl
 8008a96:	f001 fea5 	bl	800a7e4 <_Bfree>
 8008a9a:	e627      	b.n	80086ec <_strtod_l+0x64c>
 8008a9c:	f1b8 0f00 	cmp.w	r8, #0
 8008aa0:	d119      	bne.n	8008ad6 <_strtod_l+0xa36>
 8008aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008aa8:	b9e3      	cbnz	r3, 8008ae4 <_strtod_l+0xa44>
 8008aaa:	2200      	movs	r2, #0
 8008aac:	4630      	mov	r0, r6
 8008aae:	4639      	mov	r1, r7
 8008ab0:	4b3c      	ldr	r3, [pc, #240]	; (8008ba4 <_strtod_l+0xb04>)
 8008ab2:	f7f7 ff83 	bl	80009bc <__aeabi_dcmplt>
 8008ab6:	b9c8      	cbnz	r0, 8008aec <_strtod_l+0xa4c>
 8008ab8:	2200      	movs	r2, #0
 8008aba:	4630      	mov	r0, r6
 8008abc:	4639      	mov	r1, r7
 8008abe:	4b3c      	ldr	r3, [pc, #240]	; (8008bb0 <_strtod_l+0xb10>)
 8008ac0:	f7f7 fd0a 	bl	80004d8 <__aeabi_dmul>
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	460d      	mov	r5, r1
 8008ac8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008acc:	9416      	str	r4, [sp, #88]	; 0x58
 8008ace:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ad0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8008ad4:	e7a2      	b.n	8008a1c <_strtod_l+0x97c>
 8008ad6:	f1b8 0f01 	cmp.w	r8, #1
 8008ada:	d103      	bne.n	8008ae4 <_strtod_l+0xa44>
 8008adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f43f ad92 	beq.w	8008608 <_strtod_l+0x568>
 8008ae4:	2600      	movs	r6, #0
 8008ae6:	2400      	movs	r4, #0
 8008ae8:	4f32      	ldr	r7, [pc, #200]	; (8008bb4 <_strtod_l+0xb14>)
 8008aea:	e796      	b.n	8008a1a <_strtod_l+0x97a>
 8008aec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008aee:	4d30      	ldr	r5, [pc, #192]	; (8008bb0 <_strtod_l+0xb10>)
 8008af0:	e7ea      	b.n	8008ac8 <_strtod_l+0xa28>
 8008af2:	4b2f      	ldr	r3, [pc, #188]	; (8008bb0 <_strtod_l+0xb10>)
 8008af4:	2200      	movs	r2, #0
 8008af6:	4630      	mov	r0, r6
 8008af8:	4639      	mov	r1, r7
 8008afa:	f7f7 fced 	bl	80004d8 <__aeabi_dmul>
 8008afe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b00:	4604      	mov	r4, r0
 8008b02:	460d      	mov	r5, r1
 8008b04:	b933      	cbnz	r3, 8008b14 <_strtod_l+0xa74>
 8008b06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b0a:	9010      	str	r0, [sp, #64]	; 0x40
 8008b0c:	9311      	str	r3, [sp, #68]	; 0x44
 8008b0e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008b12:	e783      	b.n	8008a1c <_strtod_l+0x97c>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008b1c:	e7f7      	b.n	8008b0e <_strtod_l+0xa6e>
 8008b1e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008b22:	9b05      	ldr	r3, [sp, #20]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1a8      	bne.n	8008a7a <_strtod_l+0x9da>
 8008b28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b2e:	0d1b      	lsrs	r3, r3, #20
 8008b30:	051b      	lsls	r3, r3, #20
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d1a1      	bne.n	8008a7a <_strtod_l+0x9da>
 8008b36:	4620      	mov	r0, r4
 8008b38:	4629      	mov	r1, r5
 8008b3a:	f7f8 fa73 	bl	8001024 <__aeabi_d2lz>
 8008b3e:	f7f7 fc9d 	bl	800047c <__aeabi_l2d>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4620      	mov	r0, r4
 8008b48:	4629      	mov	r1, r5
 8008b4a:	f7f7 fb0d 	bl	8000168 <__aeabi_dsub>
 8008b4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b54:	ea43 0308 	orr.w	r3, r3, r8
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	460d      	mov	r5, r1
 8008b5e:	d066      	beq.n	8008c2e <_strtod_l+0xb8e>
 8008b60:	a309      	add	r3, pc, #36	; (adr r3, 8008b88 <_strtod_l+0xae8>)
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	f7f7 ff29 	bl	80009bc <__aeabi_dcmplt>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	f47f ace2 	bne.w	8008534 <_strtod_l+0x494>
 8008b70:	a307      	add	r3, pc, #28	; (adr r3, 8008b90 <_strtod_l+0xaf0>)
 8008b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b76:	4620      	mov	r0, r4
 8008b78:	4629      	mov	r1, r5
 8008b7a:	f7f7 ff3d 	bl	80009f8 <__aeabi_dcmpgt>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	f43f af7b 	beq.w	8008a7a <_strtod_l+0x9da>
 8008b84:	e4d6      	b.n	8008534 <_strtod_l+0x494>
 8008b86:	bf00      	nop
 8008b88:	94a03595 	.word	0x94a03595
 8008b8c:	3fdfffff 	.word	0x3fdfffff
 8008b90:	35afe535 	.word	0x35afe535
 8008b94:	3fe00000 	.word	0x3fe00000
 8008b98:	000fffff 	.word	0x000fffff
 8008b9c:	7ff00000 	.word	0x7ff00000
 8008ba0:	7fefffff 	.word	0x7fefffff
 8008ba4:	3ff00000 	.word	0x3ff00000
 8008ba8:	7fe00000 	.word	0x7fe00000
 8008bac:	7c9fffff 	.word	0x7c9fffff
 8008bb0:	3fe00000 	.word	0x3fe00000
 8008bb4:	bff00000 	.word	0xbff00000
 8008bb8:	9b05      	ldr	r3, [sp, #20]
 8008bba:	b313      	cbz	r3, 8008c02 <_strtod_l+0xb62>
 8008bbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bbe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008bc2:	d81e      	bhi.n	8008c02 <_strtod_l+0xb62>
 8008bc4:	a326      	add	r3, pc, #152	; (adr r3, 8008c60 <_strtod_l+0xbc0>)
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	4620      	mov	r0, r4
 8008bcc:	4629      	mov	r1, r5
 8008bce:	f7f7 feff 	bl	80009d0 <__aeabi_dcmple>
 8008bd2:	b190      	cbz	r0, 8008bfa <_strtod_l+0xb5a>
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f7f7 ff56 	bl	8000a88 <__aeabi_d2uiz>
 8008bdc:	2801      	cmp	r0, #1
 8008bde:	bf38      	it	cc
 8008be0:	2001      	movcc	r0, #1
 8008be2:	f7f7 fbff 	bl	80003e4 <__aeabi_ui2d>
 8008be6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008be8:	4604      	mov	r4, r0
 8008bea:	460d      	mov	r5, r1
 8008bec:	b9d3      	cbnz	r3, 8008c24 <_strtod_l+0xb84>
 8008bee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bf2:	9012      	str	r0, [sp, #72]	; 0x48
 8008bf4:	9313      	str	r3, [sp, #76]	; 0x4c
 8008bf6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008bfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bfc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008c00:	1a9f      	subs	r7, r3, r2
 8008c02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c06:	f002 f91d 	bl	800ae44 <__ulp>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4630      	mov	r0, r6
 8008c10:	4639      	mov	r1, r7
 8008c12:	f7f7 fc61 	bl	80004d8 <__aeabi_dmul>
 8008c16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c1a:	f7f7 faa7 	bl	800016c <__adddf3>
 8008c1e:	4680      	mov	r8, r0
 8008c20:	4689      	mov	r9, r1
 8008c22:	e77e      	b.n	8008b22 <_strtod_l+0xa82>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008c2c:	e7e3      	b.n	8008bf6 <_strtod_l+0xb56>
 8008c2e:	a30e      	add	r3, pc, #56	; (adr r3, 8008c68 <_strtod_l+0xbc8>)
 8008c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c34:	f7f7 fec2 	bl	80009bc <__aeabi_dcmplt>
 8008c38:	e7a1      	b.n	8008b7e <_strtod_l+0xade>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	930a      	str	r3, [sp, #40]	; 0x28
 8008c3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008c42:	6013      	str	r3, [r2, #0]
 8008c44:	f7ff ba71 	b.w	800812a <_strtod_l+0x8a>
 8008c48:	2a65      	cmp	r2, #101	; 0x65
 8008c4a:	f43f ab63 	beq.w	8008314 <_strtod_l+0x274>
 8008c4e:	2a45      	cmp	r2, #69	; 0x45
 8008c50:	f43f ab60 	beq.w	8008314 <_strtod_l+0x274>
 8008c54:	2301      	movs	r3, #1
 8008c56:	f7ff bb95 	b.w	8008384 <_strtod_l+0x2e4>
 8008c5a:	bf00      	nop
 8008c5c:	f3af 8000 	nop.w
 8008c60:	ffc00000 	.word	0xffc00000
 8008c64:	41dfffff 	.word	0x41dfffff
 8008c68:	94a03595 	.word	0x94a03595
 8008c6c:	3fcfffff 	.word	0x3fcfffff

08008c70 <_strtod_r>:
 8008c70:	4b01      	ldr	r3, [pc, #4]	; (8008c78 <_strtod_r+0x8>)
 8008c72:	f7ff ba15 	b.w	80080a0 <_strtod_l>
 8008c76:	bf00      	nop
 8008c78:	200001f4 	.word	0x200001f4

08008c7c <_strtol_l.constprop.0>:
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c82:	4680      	mov	r8, r0
 8008c84:	d001      	beq.n	8008c8a <_strtol_l.constprop.0+0xe>
 8008c86:	2b24      	cmp	r3, #36	; 0x24
 8008c88:	d906      	bls.n	8008c98 <_strtol_l.constprop.0+0x1c>
 8008c8a:	f7fe fa93 	bl	80071b4 <__errno>
 8008c8e:	2316      	movs	r3, #22
 8008c90:	6003      	str	r3, [r0, #0]
 8008c92:	2000      	movs	r0, #0
 8008c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c98:	460d      	mov	r5, r1
 8008c9a:	4f35      	ldr	r7, [pc, #212]	; (8008d70 <_strtol_l.constprop.0+0xf4>)
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ca2:	5de6      	ldrb	r6, [r4, r7]
 8008ca4:	f016 0608 	ands.w	r6, r6, #8
 8008ca8:	d1f8      	bne.n	8008c9c <_strtol_l.constprop.0+0x20>
 8008caa:	2c2d      	cmp	r4, #45	; 0x2d
 8008cac:	d12f      	bne.n	8008d0e <_strtol_l.constprop.0+0x92>
 8008cae:	2601      	movs	r6, #1
 8008cb0:	782c      	ldrb	r4, [r5, #0]
 8008cb2:	1c85      	adds	r5, r0, #2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d057      	beq.n	8008d68 <_strtol_l.constprop.0+0xec>
 8008cb8:	2b10      	cmp	r3, #16
 8008cba:	d109      	bne.n	8008cd0 <_strtol_l.constprop.0+0x54>
 8008cbc:	2c30      	cmp	r4, #48	; 0x30
 8008cbe:	d107      	bne.n	8008cd0 <_strtol_l.constprop.0+0x54>
 8008cc0:	7828      	ldrb	r0, [r5, #0]
 8008cc2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008cc6:	2858      	cmp	r0, #88	; 0x58
 8008cc8:	d149      	bne.n	8008d5e <_strtol_l.constprop.0+0xe2>
 8008cca:	2310      	movs	r3, #16
 8008ccc:	786c      	ldrb	r4, [r5, #1]
 8008cce:	3502      	adds	r5, #2
 8008cd0:	2700      	movs	r7, #0
 8008cd2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008cd6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008cda:	fbbe f9f3 	udiv	r9, lr, r3
 8008cde:	4638      	mov	r0, r7
 8008ce0:	fb03 ea19 	mls	sl, r3, r9, lr
 8008ce4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008ce8:	f1bc 0f09 	cmp.w	ip, #9
 8008cec:	d814      	bhi.n	8008d18 <_strtol_l.constprop.0+0x9c>
 8008cee:	4664      	mov	r4, ip
 8008cf0:	42a3      	cmp	r3, r4
 8008cf2:	dd22      	ble.n	8008d3a <_strtol_l.constprop.0+0xbe>
 8008cf4:	2f00      	cmp	r7, #0
 8008cf6:	db1d      	blt.n	8008d34 <_strtol_l.constprop.0+0xb8>
 8008cf8:	4581      	cmp	r9, r0
 8008cfa:	d31b      	bcc.n	8008d34 <_strtol_l.constprop.0+0xb8>
 8008cfc:	d101      	bne.n	8008d02 <_strtol_l.constprop.0+0x86>
 8008cfe:	45a2      	cmp	sl, r4
 8008d00:	db18      	blt.n	8008d34 <_strtol_l.constprop.0+0xb8>
 8008d02:	2701      	movs	r7, #1
 8008d04:	fb00 4003 	mla	r0, r0, r3, r4
 8008d08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d0c:	e7ea      	b.n	8008ce4 <_strtol_l.constprop.0+0x68>
 8008d0e:	2c2b      	cmp	r4, #43	; 0x2b
 8008d10:	bf04      	itt	eq
 8008d12:	782c      	ldrbeq	r4, [r5, #0]
 8008d14:	1c85      	addeq	r5, r0, #2
 8008d16:	e7cd      	b.n	8008cb4 <_strtol_l.constprop.0+0x38>
 8008d18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008d1c:	f1bc 0f19 	cmp.w	ip, #25
 8008d20:	d801      	bhi.n	8008d26 <_strtol_l.constprop.0+0xaa>
 8008d22:	3c37      	subs	r4, #55	; 0x37
 8008d24:	e7e4      	b.n	8008cf0 <_strtol_l.constprop.0+0x74>
 8008d26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008d2a:	f1bc 0f19 	cmp.w	ip, #25
 8008d2e:	d804      	bhi.n	8008d3a <_strtol_l.constprop.0+0xbe>
 8008d30:	3c57      	subs	r4, #87	; 0x57
 8008d32:	e7dd      	b.n	8008cf0 <_strtol_l.constprop.0+0x74>
 8008d34:	f04f 37ff 	mov.w	r7, #4294967295
 8008d38:	e7e6      	b.n	8008d08 <_strtol_l.constprop.0+0x8c>
 8008d3a:	2f00      	cmp	r7, #0
 8008d3c:	da07      	bge.n	8008d4e <_strtol_l.constprop.0+0xd2>
 8008d3e:	2322      	movs	r3, #34	; 0x22
 8008d40:	4670      	mov	r0, lr
 8008d42:	f8c8 3000 	str.w	r3, [r8]
 8008d46:	2a00      	cmp	r2, #0
 8008d48:	d0a4      	beq.n	8008c94 <_strtol_l.constprop.0+0x18>
 8008d4a:	1e69      	subs	r1, r5, #1
 8008d4c:	e005      	b.n	8008d5a <_strtol_l.constprop.0+0xde>
 8008d4e:	b106      	cbz	r6, 8008d52 <_strtol_l.constprop.0+0xd6>
 8008d50:	4240      	negs	r0, r0
 8008d52:	2a00      	cmp	r2, #0
 8008d54:	d09e      	beq.n	8008c94 <_strtol_l.constprop.0+0x18>
 8008d56:	2f00      	cmp	r7, #0
 8008d58:	d1f7      	bne.n	8008d4a <_strtol_l.constprop.0+0xce>
 8008d5a:	6011      	str	r1, [r2, #0]
 8008d5c:	e79a      	b.n	8008c94 <_strtol_l.constprop.0+0x18>
 8008d5e:	2430      	movs	r4, #48	; 0x30
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1b5      	bne.n	8008cd0 <_strtol_l.constprop.0+0x54>
 8008d64:	2308      	movs	r3, #8
 8008d66:	e7b3      	b.n	8008cd0 <_strtol_l.constprop.0+0x54>
 8008d68:	2c30      	cmp	r4, #48	; 0x30
 8008d6a:	d0a9      	beq.n	8008cc0 <_strtol_l.constprop.0+0x44>
 8008d6c:	230a      	movs	r3, #10
 8008d6e:	e7af      	b.n	8008cd0 <_strtol_l.constprop.0+0x54>
 8008d70:	0800bdd9 	.word	0x0800bdd9

08008d74 <_strtol_r>:
 8008d74:	f7ff bf82 	b.w	8008c7c <_strtol_l.constprop.0>

08008d78 <__swbuf_r>:
 8008d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7a:	460e      	mov	r6, r1
 8008d7c:	4614      	mov	r4, r2
 8008d7e:	4605      	mov	r5, r0
 8008d80:	b118      	cbz	r0, 8008d8a <__swbuf_r+0x12>
 8008d82:	6983      	ldr	r3, [r0, #24]
 8008d84:	b90b      	cbnz	r3, 8008d8a <__swbuf_r+0x12>
 8008d86:	f001 f847 	bl	8009e18 <__sinit>
 8008d8a:	4b21      	ldr	r3, [pc, #132]	; (8008e10 <__swbuf_r+0x98>)
 8008d8c:	429c      	cmp	r4, r3
 8008d8e:	d12b      	bne.n	8008de8 <__swbuf_r+0x70>
 8008d90:	686c      	ldr	r4, [r5, #4]
 8008d92:	69a3      	ldr	r3, [r4, #24]
 8008d94:	60a3      	str	r3, [r4, #8]
 8008d96:	89a3      	ldrh	r3, [r4, #12]
 8008d98:	071a      	lsls	r2, r3, #28
 8008d9a:	d52f      	bpl.n	8008dfc <__swbuf_r+0x84>
 8008d9c:	6923      	ldr	r3, [r4, #16]
 8008d9e:	b36b      	cbz	r3, 8008dfc <__swbuf_r+0x84>
 8008da0:	6923      	ldr	r3, [r4, #16]
 8008da2:	6820      	ldr	r0, [r4, #0]
 8008da4:	b2f6      	uxtb	r6, r6
 8008da6:	1ac0      	subs	r0, r0, r3
 8008da8:	6963      	ldr	r3, [r4, #20]
 8008daa:	4637      	mov	r7, r6
 8008dac:	4283      	cmp	r3, r0
 8008dae:	dc04      	bgt.n	8008dba <__swbuf_r+0x42>
 8008db0:	4621      	mov	r1, r4
 8008db2:	4628      	mov	r0, r5
 8008db4:	f000 ff9c 	bl	8009cf0 <_fflush_r>
 8008db8:	bb30      	cbnz	r0, 8008e08 <__swbuf_r+0x90>
 8008dba:	68a3      	ldr	r3, [r4, #8]
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	60a3      	str	r3, [r4, #8]
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	1c5a      	adds	r2, r3, #1
 8008dc6:	6022      	str	r2, [r4, #0]
 8008dc8:	701e      	strb	r6, [r3, #0]
 8008dca:	6963      	ldr	r3, [r4, #20]
 8008dcc:	4283      	cmp	r3, r0
 8008dce:	d004      	beq.n	8008dda <__swbuf_r+0x62>
 8008dd0:	89a3      	ldrh	r3, [r4, #12]
 8008dd2:	07db      	lsls	r3, r3, #31
 8008dd4:	d506      	bpl.n	8008de4 <__swbuf_r+0x6c>
 8008dd6:	2e0a      	cmp	r6, #10
 8008dd8:	d104      	bne.n	8008de4 <__swbuf_r+0x6c>
 8008dda:	4621      	mov	r1, r4
 8008ddc:	4628      	mov	r0, r5
 8008dde:	f000 ff87 	bl	8009cf0 <_fflush_r>
 8008de2:	b988      	cbnz	r0, 8008e08 <__swbuf_r+0x90>
 8008de4:	4638      	mov	r0, r7
 8008de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de8:	4b0a      	ldr	r3, [pc, #40]	; (8008e14 <__swbuf_r+0x9c>)
 8008dea:	429c      	cmp	r4, r3
 8008dec:	d101      	bne.n	8008df2 <__swbuf_r+0x7a>
 8008dee:	68ac      	ldr	r4, [r5, #8]
 8008df0:	e7cf      	b.n	8008d92 <__swbuf_r+0x1a>
 8008df2:	4b09      	ldr	r3, [pc, #36]	; (8008e18 <__swbuf_r+0xa0>)
 8008df4:	429c      	cmp	r4, r3
 8008df6:	bf08      	it	eq
 8008df8:	68ec      	ldreq	r4, [r5, #12]
 8008dfa:	e7ca      	b.n	8008d92 <__swbuf_r+0x1a>
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f000 f80c 	bl	8008e1c <__swsetup_r>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d0cb      	beq.n	8008da0 <__swbuf_r+0x28>
 8008e08:	f04f 37ff 	mov.w	r7, #4294967295
 8008e0c:	e7ea      	b.n	8008de4 <__swbuf_r+0x6c>
 8008e0e:	bf00      	nop
 8008e10:	0800bf8c 	.word	0x0800bf8c
 8008e14:	0800bfac 	.word	0x0800bfac
 8008e18:	0800bf6c 	.word	0x0800bf6c

08008e1c <__swsetup_r>:
 8008e1c:	4b32      	ldr	r3, [pc, #200]	; (8008ee8 <__swsetup_r+0xcc>)
 8008e1e:	b570      	push	{r4, r5, r6, lr}
 8008e20:	681d      	ldr	r5, [r3, #0]
 8008e22:	4606      	mov	r6, r0
 8008e24:	460c      	mov	r4, r1
 8008e26:	b125      	cbz	r5, 8008e32 <__swsetup_r+0x16>
 8008e28:	69ab      	ldr	r3, [r5, #24]
 8008e2a:	b913      	cbnz	r3, 8008e32 <__swsetup_r+0x16>
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	f000 fff3 	bl	8009e18 <__sinit>
 8008e32:	4b2e      	ldr	r3, [pc, #184]	; (8008eec <__swsetup_r+0xd0>)
 8008e34:	429c      	cmp	r4, r3
 8008e36:	d10f      	bne.n	8008e58 <__swsetup_r+0x3c>
 8008e38:	686c      	ldr	r4, [r5, #4]
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e40:	0719      	lsls	r1, r3, #28
 8008e42:	d42c      	bmi.n	8008e9e <__swsetup_r+0x82>
 8008e44:	06dd      	lsls	r5, r3, #27
 8008e46:	d411      	bmi.n	8008e6c <__swsetup_r+0x50>
 8008e48:	2309      	movs	r3, #9
 8008e4a:	6033      	str	r3, [r6, #0]
 8008e4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e50:	f04f 30ff 	mov.w	r0, #4294967295
 8008e54:	81a3      	strh	r3, [r4, #12]
 8008e56:	e03e      	b.n	8008ed6 <__swsetup_r+0xba>
 8008e58:	4b25      	ldr	r3, [pc, #148]	; (8008ef0 <__swsetup_r+0xd4>)
 8008e5a:	429c      	cmp	r4, r3
 8008e5c:	d101      	bne.n	8008e62 <__swsetup_r+0x46>
 8008e5e:	68ac      	ldr	r4, [r5, #8]
 8008e60:	e7eb      	b.n	8008e3a <__swsetup_r+0x1e>
 8008e62:	4b24      	ldr	r3, [pc, #144]	; (8008ef4 <__swsetup_r+0xd8>)
 8008e64:	429c      	cmp	r4, r3
 8008e66:	bf08      	it	eq
 8008e68:	68ec      	ldreq	r4, [r5, #12]
 8008e6a:	e7e6      	b.n	8008e3a <__swsetup_r+0x1e>
 8008e6c:	0758      	lsls	r0, r3, #29
 8008e6e:	d512      	bpl.n	8008e96 <__swsetup_r+0x7a>
 8008e70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e72:	b141      	cbz	r1, 8008e86 <__swsetup_r+0x6a>
 8008e74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e78:	4299      	cmp	r1, r3
 8008e7a:	d002      	beq.n	8008e82 <__swsetup_r+0x66>
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f002 f93d 	bl	800b0fc <_free_r>
 8008e82:	2300      	movs	r3, #0
 8008e84:	6363      	str	r3, [r4, #52]	; 0x34
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e8c:	81a3      	strh	r3, [r4, #12]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	6063      	str	r3, [r4, #4]
 8008e92:	6923      	ldr	r3, [r4, #16]
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	89a3      	ldrh	r3, [r4, #12]
 8008e98:	f043 0308 	orr.w	r3, r3, #8
 8008e9c:	81a3      	strh	r3, [r4, #12]
 8008e9e:	6923      	ldr	r3, [r4, #16]
 8008ea0:	b94b      	cbnz	r3, 8008eb6 <__swsetup_r+0x9a>
 8008ea2:	89a3      	ldrh	r3, [r4, #12]
 8008ea4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eac:	d003      	beq.n	8008eb6 <__swsetup_r+0x9a>
 8008eae:	4621      	mov	r1, r4
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	f001 fbe1 	bl	800a678 <__smakebuf_r>
 8008eb6:	89a0      	ldrh	r0, [r4, #12]
 8008eb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ebc:	f010 0301 	ands.w	r3, r0, #1
 8008ec0:	d00a      	beq.n	8008ed8 <__swsetup_r+0xbc>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60a3      	str	r3, [r4, #8]
 8008ec6:	6963      	ldr	r3, [r4, #20]
 8008ec8:	425b      	negs	r3, r3
 8008eca:	61a3      	str	r3, [r4, #24]
 8008ecc:	6923      	ldr	r3, [r4, #16]
 8008ece:	b943      	cbnz	r3, 8008ee2 <__swsetup_r+0xc6>
 8008ed0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ed4:	d1ba      	bne.n	8008e4c <__swsetup_r+0x30>
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}
 8008ed8:	0781      	lsls	r1, r0, #30
 8008eda:	bf58      	it	pl
 8008edc:	6963      	ldrpl	r3, [r4, #20]
 8008ede:	60a3      	str	r3, [r4, #8]
 8008ee0:	e7f4      	b.n	8008ecc <__swsetup_r+0xb0>
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	e7f7      	b.n	8008ed6 <__swsetup_r+0xba>
 8008ee6:	bf00      	nop
 8008ee8:	2000018c 	.word	0x2000018c
 8008eec:	0800bf8c 	.word	0x0800bf8c
 8008ef0:	0800bfac 	.word	0x0800bfac
 8008ef4:	0800bf6c 	.word	0x0800bf6c

08008ef8 <quorem>:
 8008ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	6903      	ldr	r3, [r0, #16]
 8008efe:	690c      	ldr	r4, [r1, #16]
 8008f00:	4607      	mov	r7, r0
 8008f02:	42a3      	cmp	r3, r4
 8008f04:	f2c0 8082 	blt.w	800900c <quorem+0x114>
 8008f08:	3c01      	subs	r4, #1
 8008f0a:	f100 0514 	add.w	r5, r0, #20
 8008f0e:	f101 0814 	add.w	r8, r1, #20
 8008f12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f20:	3301      	adds	r3, #1
 8008f22:	429a      	cmp	r2, r3
 8008f24:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008f2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f30:	d331      	bcc.n	8008f96 <quorem+0x9e>
 8008f32:	f04f 0e00 	mov.w	lr, #0
 8008f36:	4640      	mov	r0, r8
 8008f38:	46ac      	mov	ip, r5
 8008f3a:	46f2      	mov	sl, lr
 8008f3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f40:	b293      	uxth	r3, r2
 8008f42:	fb06 e303 	mla	r3, r6, r3, lr
 8008f46:	0c12      	lsrs	r2, r2, #16
 8008f48:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	fb06 e202 	mla	r2, r6, r2, lr
 8008f52:	ebaa 0303 	sub.w	r3, sl, r3
 8008f56:	f8dc a000 	ldr.w	sl, [ip]
 8008f5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f5e:	fa1f fa8a 	uxth.w	sl, sl
 8008f62:	4453      	add	r3, sl
 8008f64:	f8dc a000 	ldr.w	sl, [ip]
 8008f68:	b292      	uxth	r2, r2
 8008f6a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f78:	4581      	cmp	r9, r0
 8008f7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f7e:	f84c 3b04 	str.w	r3, [ip], #4
 8008f82:	d2db      	bcs.n	8008f3c <quorem+0x44>
 8008f84:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f88:	b92b      	cbnz	r3, 8008f96 <quorem+0x9e>
 8008f8a:	9b01      	ldr	r3, [sp, #4]
 8008f8c:	3b04      	subs	r3, #4
 8008f8e:	429d      	cmp	r5, r3
 8008f90:	461a      	mov	r2, r3
 8008f92:	d32f      	bcc.n	8008ff4 <quorem+0xfc>
 8008f94:	613c      	str	r4, [r7, #16]
 8008f96:	4638      	mov	r0, r7
 8008f98:	f001 feac 	bl	800acf4 <__mcmp>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	db25      	blt.n	8008fec <quorem+0xf4>
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	f04f 0c00 	mov.w	ip, #0
 8008fa6:	3601      	adds	r6, #1
 8008fa8:	f858 1b04 	ldr.w	r1, [r8], #4
 8008fac:	f8d0 e000 	ldr.w	lr, [r0]
 8008fb0:	b28b      	uxth	r3, r1
 8008fb2:	ebac 0303 	sub.w	r3, ip, r3
 8008fb6:	fa1f f28e 	uxth.w	r2, lr
 8008fba:	4413      	add	r3, r2
 8008fbc:	0c0a      	lsrs	r2, r1, #16
 8008fbe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008fc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fcc:	45c1      	cmp	r9, r8
 8008fce:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008fd2:	f840 3b04 	str.w	r3, [r0], #4
 8008fd6:	d2e7      	bcs.n	8008fa8 <quorem+0xb0>
 8008fd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fe0:	b922      	cbnz	r2, 8008fec <quorem+0xf4>
 8008fe2:	3b04      	subs	r3, #4
 8008fe4:	429d      	cmp	r5, r3
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	d30a      	bcc.n	8009000 <quorem+0x108>
 8008fea:	613c      	str	r4, [r7, #16]
 8008fec:	4630      	mov	r0, r6
 8008fee:	b003      	add	sp, #12
 8008ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff4:	6812      	ldr	r2, [r2, #0]
 8008ff6:	3b04      	subs	r3, #4
 8008ff8:	2a00      	cmp	r2, #0
 8008ffa:	d1cb      	bne.n	8008f94 <quorem+0x9c>
 8008ffc:	3c01      	subs	r4, #1
 8008ffe:	e7c6      	b.n	8008f8e <quorem+0x96>
 8009000:	6812      	ldr	r2, [r2, #0]
 8009002:	3b04      	subs	r3, #4
 8009004:	2a00      	cmp	r2, #0
 8009006:	d1f0      	bne.n	8008fea <quorem+0xf2>
 8009008:	3c01      	subs	r4, #1
 800900a:	e7eb      	b.n	8008fe4 <quorem+0xec>
 800900c:	2000      	movs	r0, #0
 800900e:	e7ee      	b.n	8008fee <quorem+0xf6>

08009010 <_dtoa_r>:
 8009010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009014:	4616      	mov	r6, r2
 8009016:	461f      	mov	r7, r3
 8009018:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800901a:	b099      	sub	sp, #100	; 0x64
 800901c:	4605      	mov	r5, r0
 800901e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009022:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009026:	b974      	cbnz	r4, 8009046 <_dtoa_r+0x36>
 8009028:	2010      	movs	r0, #16
 800902a:	f001 fb65 	bl	800a6f8 <malloc>
 800902e:	4602      	mov	r2, r0
 8009030:	6268      	str	r0, [r5, #36]	; 0x24
 8009032:	b920      	cbnz	r0, 800903e <_dtoa_r+0x2e>
 8009034:	21ea      	movs	r1, #234	; 0xea
 8009036:	4ba8      	ldr	r3, [pc, #672]	; (80092d8 <_dtoa_r+0x2c8>)
 8009038:	48a8      	ldr	r0, [pc, #672]	; (80092dc <_dtoa_r+0x2cc>)
 800903a:	f002 fc7b 	bl	800b934 <__assert_func>
 800903e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009042:	6004      	str	r4, [r0, #0]
 8009044:	60c4      	str	r4, [r0, #12]
 8009046:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009048:	6819      	ldr	r1, [r3, #0]
 800904a:	b151      	cbz	r1, 8009062 <_dtoa_r+0x52>
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	2301      	movs	r3, #1
 8009050:	4093      	lsls	r3, r2
 8009052:	604a      	str	r2, [r1, #4]
 8009054:	608b      	str	r3, [r1, #8]
 8009056:	4628      	mov	r0, r5
 8009058:	f001 fbc4 	bl	800a7e4 <_Bfree>
 800905c:	2200      	movs	r2, #0
 800905e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	1e3b      	subs	r3, r7, #0
 8009064:	bfaf      	iteee	ge
 8009066:	2300      	movge	r3, #0
 8009068:	2201      	movlt	r2, #1
 800906a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800906e:	9305      	strlt	r3, [sp, #20]
 8009070:	bfa8      	it	ge
 8009072:	f8c8 3000 	strge.w	r3, [r8]
 8009076:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800907a:	4b99      	ldr	r3, [pc, #612]	; (80092e0 <_dtoa_r+0x2d0>)
 800907c:	bfb8      	it	lt
 800907e:	f8c8 2000 	strlt.w	r2, [r8]
 8009082:	ea33 0309 	bics.w	r3, r3, r9
 8009086:	d119      	bne.n	80090bc <_dtoa_r+0xac>
 8009088:	f242 730f 	movw	r3, #9999	; 0x270f
 800908c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009094:	4333      	orrs	r3, r6
 8009096:	f000 857f 	beq.w	8009b98 <_dtoa_r+0xb88>
 800909a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800909c:	b953      	cbnz	r3, 80090b4 <_dtoa_r+0xa4>
 800909e:	4b91      	ldr	r3, [pc, #580]	; (80092e4 <_dtoa_r+0x2d4>)
 80090a0:	e022      	b.n	80090e8 <_dtoa_r+0xd8>
 80090a2:	4b91      	ldr	r3, [pc, #580]	; (80092e8 <_dtoa_r+0x2d8>)
 80090a4:	9303      	str	r3, [sp, #12]
 80090a6:	3308      	adds	r3, #8
 80090a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80090aa:	6013      	str	r3, [r2, #0]
 80090ac:	9803      	ldr	r0, [sp, #12]
 80090ae:	b019      	add	sp, #100	; 0x64
 80090b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b4:	4b8b      	ldr	r3, [pc, #556]	; (80092e4 <_dtoa_r+0x2d4>)
 80090b6:	9303      	str	r3, [sp, #12]
 80090b8:	3303      	adds	r3, #3
 80090ba:	e7f5      	b.n	80090a8 <_dtoa_r+0x98>
 80090bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80090c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80090c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80090c8:	2200      	movs	r2, #0
 80090ca:	2300      	movs	r3, #0
 80090cc:	f7f7 fc6c 	bl	80009a8 <__aeabi_dcmpeq>
 80090d0:	4680      	mov	r8, r0
 80090d2:	b158      	cbz	r0, 80090ec <_dtoa_r+0xdc>
 80090d4:	2301      	movs	r3, #1
 80090d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80090d8:	6013      	str	r3, [r2, #0]
 80090da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f000 8558 	beq.w	8009b92 <_dtoa_r+0xb82>
 80090e2:	4882      	ldr	r0, [pc, #520]	; (80092ec <_dtoa_r+0x2dc>)
 80090e4:	6018      	str	r0, [r3, #0]
 80090e6:	1e43      	subs	r3, r0, #1
 80090e8:	9303      	str	r3, [sp, #12]
 80090ea:	e7df      	b.n	80090ac <_dtoa_r+0x9c>
 80090ec:	ab16      	add	r3, sp, #88	; 0x58
 80090ee:	9301      	str	r3, [sp, #4]
 80090f0:	ab17      	add	r3, sp, #92	; 0x5c
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	4628      	mov	r0, r5
 80090f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80090fa:	f001 ff1d 	bl	800af38 <__d2b>
 80090fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009102:	4683      	mov	fp, r0
 8009104:	2c00      	cmp	r4, #0
 8009106:	d07f      	beq.n	8009208 <_dtoa_r+0x1f8>
 8009108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800910c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800910e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009112:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009116:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800911a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800911e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009122:	2200      	movs	r2, #0
 8009124:	4b72      	ldr	r3, [pc, #456]	; (80092f0 <_dtoa_r+0x2e0>)
 8009126:	f7f7 f81f 	bl	8000168 <__aeabi_dsub>
 800912a:	a365      	add	r3, pc, #404	; (adr r3, 80092c0 <_dtoa_r+0x2b0>)
 800912c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009130:	f7f7 f9d2 	bl	80004d8 <__aeabi_dmul>
 8009134:	a364      	add	r3, pc, #400	; (adr r3, 80092c8 <_dtoa_r+0x2b8>)
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	f7f7 f817 	bl	800016c <__adddf3>
 800913e:	4606      	mov	r6, r0
 8009140:	4620      	mov	r0, r4
 8009142:	460f      	mov	r7, r1
 8009144:	f7f7 f95e 	bl	8000404 <__aeabi_i2d>
 8009148:	a361      	add	r3, pc, #388	; (adr r3, 80092d0 <_dtoa_r+0x2c0>)
 800914a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914e:	f7f7 f9c3 	bl	80004d8 <__aeabi_dmul>
 8009152:	4602      	mov	r2, r0
 8009154:	460b      	mov	r3, r1
 8009156:	4630      	mov	r0, r6
 8009158:	4639      	mov	r1, r7
 800915a:	f7f7 f807 	bl	800016c <__adddf3>
 800915e:	4606      	mov	r6, r0
 8009160:	460f      	mov	r7, r1
 8009162:	f7f7 fc69 	bl	8000a38 <__aeabi_d2iz>
 8009166:	2200      	movs	r2, #0
 8009168:	4682      	mov	sl, r0
 800916a:	2300      	movs	r3, #0
 800916c:	4630      	mov	r0, r6
 800916e:	4639      	mov	r1, r7
 8009170:	f7f7 fc24 	bl	80009bc <__aeabi_dcmplt>
 8009174:	b148      	cbz	r0, 800918a <_dtoa_r+0x17a>
 8009176:	4650      	mov	r0, sl
 8009178:	f7f7 f944 	bl	8000404 <__aeabi_i2d>
 800917c:	4632      	mov	r2, r6
 800917e:	463b      	mov	r3, r7
 8009180:	f7f7 fc12 	bl	80009a8 <__aeabi_dcmpeq>
 8009184:	b908      	cbnz	r0, 800918a <_dtoa_r+0x17a>
 8009186:	f10a 3aff 	add.w	sl, sl, #4294967295
 800918a:	f1ba 0f16 	cmp.w	sl, #22
 800918e:	d858      	bhi.n	8009242 <_dtoa_r+0x232>
 8009190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009194:	4b57      	ldr	r3, [pc, #348]	; (80092f4 <_dtoa_r+0x2e4>)
 8009196:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919e:	f7f7 fc0d 	bl	80009bc <__aeabi_dcmplt>
 80091a2:	2800      	cmp	r0, #0
 80091a4:	d04f      	beq.n	8009246 <_dtoa_r+0x236>
 80091a6:	2300      	movs	r3, #0
 80091a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80091ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80091b0:	1b1c      	subs	r4, r3, r4
 80091b2:	1e63      	subs	r3, r4, #1
 80091b4:	9309      	str	r3, [sp, #36]	; 0x24
 80091b6:	bf49      	itett	mi
 80091b8:	f1c4 0301 	rsbmi	r3, r4, #1
 80091bc:	2300      	movpl	r3, #0
 80091be:	9306      	strmi	r3, [sp, #24]
 80091c0:	2300      	movmi	r3, #0
 80091c2:	bf54      	ite	pl
 80091c4:	9306      	strpl	r3, [sp, #24]
 80091c6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80091c8:	f1ba 0f00 	cmp.w	sl, #0
 80091cc:	db3d      	blt.n	800924a <_dtoa_r+0x23a>
 80091ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091d0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80091d4:	4453      	add	r3, sl
 80091d6:	9309      	str	r3, [sp, #36]	; 0x24
 80091d8:	2300      	movs	r3, #0
 80091da:	930a      	str	r3, [sp, #40]	; 0x28
 80091dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091de:	2b09      	cmp	r3, #9
 80091e0:	f200 808c 	bhi.w	80092fc <_dtoa_r+0x2ec>
 80091e4:	2b05      	cmp	r3, #5
 80091e6:	bfc4      	itt	gt
 80091e8:	3b04      	subgt	r3, #4
 80091ea:	9322      	strgt	r3, [sp, #136]	; 0x88
 80091ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091ee:	bfc8      	it	gt
 80091f0:	2400      	movgt	r4, #0
 80091f2:	f1a3 0302 	sub.w	r3, r3, #2
 80091f6:	bfd8      	it	le
 80091f8:	2401      	movle	r4, #1
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	f200 808a 	bhi.w	8009314 <_dtoa_r+0x304>
 8009200:	e8df f003 	tbb	[pc, r3]
 8009204:	5b4d4f2d 	.word	0x5b4d4f2d
 8009208:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800920c:	441c      	add	r4, r3
 800920e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009212:	2b20      	cmp	r3, #32
 8009214:	bfc3      	ittte	gt
 8009216:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800921a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800921e:	fa09 f303 	lslgt.w	r3, r9, r3
 8009222:	f1c3 0320 	rsble	r3, r3, #32
 8009226:	bfc6      	itte	gt
 8009228:	fa26 f000 	lsrgt.w	r0, r6, r0
 800922c:	4318      	orrgt	r0, r3
 800922e:	fa06 f003 	lslle.w	r0, r6, r3
 8009232:	f7f7 f8d7 	bl	80003e4 <__aeabi_ui2d>
 8009236:	2301      	movs	r3, #1
 8009238:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800923c:	3c01      	subs	r4, #1
 800923e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009240:	e76f      	b.n	8009122 <_dtoa_r+0x112>
 8009242:	2301      	movs	r3, #1
 8009244:	e7b2      	b.n	80091ac <_dtoa_r+0x19c>
 8009246:	900f      	str	r0, [sp, #60]	; 0x3c
 8009248:	e7b1      	b.n	80091ae <_dtoa_r+0x19e>
 800924a:	9b06      	ldr	r3, [sp, #24]
 800924c:	eba3 030a 	sub.w	r3, r3, sl
 8009250:	9306      	str	r3, [sp, #24]
 8009252:	f1ca 0300 	rsb	r3, sl, #0
 8009256:	930a      	str	r3, [sp, #40]	; 0x28
 8009258:	2300      	movs	r3, #0
 800925a:	930e      	str	r3, [sp, #56]	; 0x38
 800925c:	e7be      	b.n	80091dc <_dtoa_r+0x1cc>
 800925e:	2300      	movs	r3, #0
 8009260:	930b      	str	r3, [sp, #44]	; 0x2c
 8009262:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009264:	2b00      	cmp	r3, #0
 8009266:	dc58      	bgt.n	800931a <_dtoa_r+0x30a>
 8009268:	f04f 0901 	mov.w	r9, #1
 800926c:	464b      	mov	r3, r9
 800926e:	f8cd 9020 	str.w	r9, [sp, #32]
 8009272:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009276:	2200      	movs	r2, #0
 8009278:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800927a:	6042      	str	r2, [r0, #4]
 800927c:	2204      	movs	r2, #4
 800927e:	f102 0614 	add.w	r6, r2, #20
 8009282:	429e      	cmp	r6, r3
 8009284:	6841      	ldr	r1, [r0, #4]
 8009286:	d94e      	bls.n	8009326 <_dtoa_r+0x316>
 8009288:	4628      	mov	r0, r5
 800928a:	f001 fa6b 	bl	800a764 <_Balloc>
 800928e:	9003      	str	r0, [sp, #12]
 8009290:	2800      	cmp	r0, #0
 8009292:	d14c      	bne.n	800932e <_dtoa_r+0x31e>
 8009294:	4602      	mov	r2, r0
 8009296:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800929a:	4b17      	ldr	r3, [pc, #92]	; (80092f8 <_dtoa_r+0x2e8>)
 800929c:	e6cc      	b.n	8009038 <_dtoa_r+0x28>
 800929e:	2301      	movs	r3, #1
 80092a0:	e7de      	b.n	8009260 <_dtoa_r+0x250>
 80092a2:	2300      	movs	r3, #0
 80092a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80092a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80092a8:	eb0a 0903 	add.w	r9, sl, r3
 80092ac:	f109 0301 	add.w	r3, r9, #1
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	9308      	str	r3, [sp, #32]
 80092b4:	bfb8      	it	lt
 80092b6:	2301      	movlt	r3, #1
 80092b8:	e7dd      	b.n	8009276 <_dtoa_r+0x266>
 80092ba:	2301      	movs	r3, #1
 80092bc:	e7f2      	b.n	80092a4 <_dtoa_r+0x294>
 80092be:	bf00      	nop
 80092c0:	636f4361 	.word	0x636f4361
 80092c4:	3fd287a7 	.word	0x3fd287a7
 80092c8:	8b60c8b3 	.word	0x8b60c8b3
 80092cc:	3fc68a28 	.word	0x3fc68a28
 80092d0:	509f79fb 	.word	0x509f79fb
 80092d4:	3fd34413 	.word	0x3fd34413
 80092d8:	0800bee6 	.word	0x0800bee6
 80092dc:	0800befd 	.word	0x0800befd
 80092e0:	7ff00000 	.word	0x7ff00000
 80092e4:	0800bee2 	.word	0x0800bee2
 80092e8:	0800bed9 	.word	0x0800bed9
 80092ec:	0800bd59 	.word	0x0800bd59
 80092f0:	3ff80000 	.word	0x3ff80000
 80092f4:	0800c0d0 	.word	0x0800c0d0
 80092f8:	0800bf58 	.word	0x0800bf58
 80092fc:	2401      	movs	r4, #1
 80092fe:	2300      	movs	r3, #0
 8009300:	940b      	str	r4, [sp, #44]	; 0x2c
 8009302:	9322      	str	r3, [sp, #136]	; 0x88
 8009304:	f04f 39ff 	mov.w	r9, #4294967295
 8009308:	2200      	movs	r2, #0
 800930a:	2312      	movs	r3, #18
 800930c:	f8cd 9020 	str.w	r9, [sp, #32]
 8009310:	9223      	str	r2, [sp, #140]	; 0x8c
 8009312:	e7b0      	b.n	8009276 <_dtoa_r+0x266>
 8009314:	2301      	movs	r3, #1
 8009316:	930b      	str	r3, [sp, #44]	; 0x2c
 8009318:	e7f4      	b.n	8009304 <_dtoa_r+0x2f4>
 800931a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800931e:	464b      	mov	r3, r9
 8009320:	f8cd 9020 	str.w	r9, [sp, #32]
 8009324:	e7a7      	b.n	8009276 <_dtoa_r+0x266>
 8009326:	3101      	adds	r1, #1
 8009328:	6041      	str	r1, [r0, #4]
 800932a:	0052      	lsls	r2, r2, #1
 800932c:	e7a7      	b.n	800927e <_dtoa_r+0x26e>
 800932e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009330:	9a03      	ldr	r2, [sp, #12]
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	9b08      	ldr	r3, [sp, #32]
 8009336:	2b0e      	cmp	r3, #14
 8009338:	f200 80a8 	bhi.w	800948c <_dtoa_r+0x47c>
 800933c:	2c00      	cmp	r4, #0
 800933e:	f000 80a5 	beq.w	800948c <_dtoa_r+0x47c>
 8009342:	f1ba 0f00 	cmp.w	sl, #0
 8009346:	dd34      	ble.n	80093b2 <_dtoa_r+0x3a2>
 8009348:	4a9a      	ldr	r2, [pc, #616]	; (80095b4 <_dtoa_r+0x5a4>)
 800934a:	f00a 030f 	and.w	r3, sl, #15
 800934e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009352:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009356:	e9d3 3400 	ldrd	r3, r4, [r3]
 800935a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800935e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009362:	d016      	beq.n	8009392 <_dtoa_r+0x382>
 8009364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009368:	4b93      	ldr	r3, [pc, #588]	; (80095b8 <_dtoa_r+0x5a8>)
 800936a:	2703      	movs	r7, #3
 800936c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009370:	f7f7 f9dc 	bl	800072c <__aeabi_ddiv>
 8009374:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009378:	f004 040f 	and.w	r4, r4, #15
 800937c:	4e8e      	ldr	r6, [pc, #568]	; (80095b8 <_dtoa_r+0x5a8>)
 800937e:	b954      	cbnz	r4, 8009396 <_dtoa_r+0x386>
 8009380:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009384:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009388:	f7f7 f9d0 	bl	800072c <__aeabi_ddiv>
 800938c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009390:	e029      	b.n	80093e6 <_dtoa_r+0x3d6>
 8009392:	2702      	movs	r7, #2
 8009394:	e7f2      	b.n	800937c <_dtoa_r+0x36c>
 8009396:	07e1      	lsls	r1, r4, #31
 8009398:	d508      	bpl.n	80093ac <_dtoa_r+0x39c>
 800939a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800939e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093a2:	f7f7 f899 	bl	80004d8 <__aeabi_dmul>
 80093a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80093aa:	3701      	adds	r7, #1
 80093ac:	1064      	asrs	r4, r4, #1
 80093ae:	3608      	adds	r6, #8
 80093b0:	e7e5      	b.n	800937e <_dtoa_r+0x36e>
 80093b2:	f000 80a5 	beq.w	8009500 <_dtoa_r+0x4f0>
 80093b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093ba:	f1ca 0400 	rsb	r4, sl, #0
 80093be:	4b7d      	ldr	r3, [pc, #500]	; (80095b4 <_dtoa_r+0x5a4>)
 80093c0:	f004 020f 	and.w	r2, r4, #15
 80093c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093cc:	f7f7 f884 	bl	80004d8 <__aeabi_dmul>
 80093d0:	2702      	movs	r7, #2
 80093d2:	2300      	movs	r3, #0
 80093d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093d8:	4e77      	ldr	r6, [pc, #476]	; (80095b8 <_dtoa_r+0x5a8>)
 80093da:	1124      	asrs	r4, r4, #4
 80093dc:	2c00      	cmp	r4, #0
 80093de:	f040 8084 	bne.w	80094ea <_dtoa_r+0x4da>
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1d2      	bne.n	800938c <_dtoa_r+0x37c>
 80093e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f000 808b 	beq.w	8009504 <_dtoa_r+0x4f4>
 80093ee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80093f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80093f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80093fa:	2200      	movs	r2, #0
 80093fc:	4b6f      	ldr	r3, [pc, #444]	; (80095bc <_dtoa_r+0x5ac>)
 80093fe:	f7f7 fadd 	bl	80009bc <__aeabi_dcmplt>
 8009402:	2800      	cmp	r0, #0
 8009404:	d07e      	beq.n	8009504 <_dtoa_r+0x4f4>
 8009406:	9b08      	ldr	r3, [sp, #32]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d07b      	beq.n	8009504 <_dtoa_r+0x4f4>
 800940c:	f1b9 0f00 	cmp.w	r9, #0
 8009410:	dd38      	ble.n	8009484 <_dtoa_r+0x474>
 8009412:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009416:	2200      	movs	r2, #0
 8009418:	4b69      	ldr	r3, [pc, #420]	; (80095c0 <_dtoa_r+0x5b0>)
 800941a:	f7f7 f85d 	bl	80004d8 <__aeabi_dmul>
 800941e:	464c      	mov	r4, r9
 8009420:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009424:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009428:	3701      	adds	r7, #1
 800942a:	4638      	mov	r0, r7
 800942c:	f7f6 ffea 	bl	8000404 <__aeabi_i2d>
 8009430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009434:	f7f7 f850 	bl	80004d8 <__aeabi_dmul>
 8009438:	2200      	movs	r2, #0
 800943a:	4b62      	ldr	r3, [pc, #392]	; (80095c4 <_dtoa_r+0x5b4>)
 800943c:	f7f6 fe96 	bl	800016c <__adddf3>
 8009440:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009444:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009448:	9611      	str	r6, [sp, #68]	; 0x44
 800944a:	2c00      	cmp	r4, #0
 800944c:	d15d      	bne.n	800950a <_dtoa_r+0x4fa>
 800944e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009452:	2200      	movs	r2, #0
 8009454:	4b5c      	ldr	r3, [pc, #368]	; (80095c8 <_dtoa_r+0x5b8>)
 8009456:	f7f6 fe87 	bl	8000168 <__aeabi_dsub>
 800945a:	4602      	mov	r2, r0
 800945c:	460b      	mov	r3, r1
 800945e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009462:	4633      	mov	r3, r6
 8009464:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009466:	f7f7 fac7 	bl	80009f8 <__aeabi_dcmpgt>
 800946a:	2800      	cmp	r0, #0
 800946c:	f040 829c 	bne.w	80099a8 <_dtoa_r+0x998>
 8009470:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009474:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009476:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800947a:	f7f7 fa9f 	bl	80009bc <__aeabi_dcmplt>
 800947e:	2800      	cmp	r0, #0
 8009480:	f040 8290 	bne.w	80099a4 <_dtoa_r+0x994>
 8009484:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009488:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800948c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800948e:	2b00      	cmp	r3, #0
 8009490:	f2c0 8152 	blt.w	8009738 <_dtoa_r+0x728>
 8009494:	f1ba 0f0e 	cmp.w	sl, #14
 8009498:	f300 814e 	bgt.w	8009738 <_dtoa_r+0x728>
 800949c:	4b45      	ldr	r3, [pc, #276]	; (80095b4 <_dtoa_r+0x5a4>)
 800949e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80094a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80094a6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80094aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f280 80db 	bge.w	8009668 <_dtoa_r+0x658>
 80094b2:	9b08      	ldr	r3, [sp, #32]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f300 80d7 	bgt.w	8009668 <_dtoa_r+0x658>
 80094ba:	f040 8272 	bne.w	80099a2 <_dtoa_r+0x992>
 80094be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094c2:	2200      	movs	r2, #0
 80094c4:	4b40      	ldr	r3, [pc, #256]	; (80095c8 <_dtoa_r+0x5b8>)
 80094c6:	f7f7 f807 	bl	80004d8 <__aeabi_dmul>
 80094ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094ce:	f7f7 fa89 	bl	80009e4 <__aeabi_dcmpge>
 80094d2:	9c08      	ldr	r4, [sp, #32]
 80094d4:	4626      	mov	r6, r4
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f040 8248 	bne.w	800996c <_dtoa_r+0x95c>
 80094dc:	2331      	movs	r3, #49	; 0x31
 80094de:	9f03      	ldr	r7, [sp, #12]
 80094e0:	f10a 0a01 	add.w	sl, sl, #1
 80094e4:	f807 3b01 	strb.w	r3, [r7], #1
 80094e8:	e244      	b.n	8009974 <_dtoa_r+0x964>
 80094ea:	07e2      	lsls	r2, r4, #31
 80094ec:	d505      	bpl.n	80094fa <_dtoa_r+0x4ea>
 80094ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094f2:	f7f6 fff1 	bl	80004d8 <__aeabi_dmul>
 80094f6:	2301      	movs	r3, #1
 80094f8:	3701      	adds	r7, #1
 80094fa:	1064      	asrs	r4, r4, #1
 80094fc:	3608      	adds	r6, #8
 80094fe:	e76d      	b.n	80093dc <_dtoa_r+0x3cc>
 8009500:	2702      	movs	r7, #2
 8009502:	e770      	b.n	80093e6 <_dtoa_r+0x3d6>
 8009504:	46d0      	mov	r8, sl
 8009506:	9c08      	ldr	r4, [sp, #32]
 8009508:	e78f      	b.n	800942a <_dtoa_r+0x41a>
 800950a:	9903      	ldr	r1, [sp, #12]
 800950c:	4b29      	ldr	r3, [pc, #164]	; (80095b4 <_dtoa_r+0x5a4>)
 800950e:	4421      	add	r1, r4
 8009510:	9112      	str	r1, [sp, #72]	; 0x48
 8009512:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009514:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009518:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800951c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009520:	2900      	cmp	r1, #0
 8009522:	d055      	beq.n	80095d0 <_dtoa_r+0x5c0>
 8009524:	2000      	movs	r0, #0
 8009526:	4929      	ldr	r1, [pc, #164]	; (80095cc <_dtoa_r+0x5bc>)
 8009528:	f7f7 f900 	bl	800072c <__aeabi_ddiv>
 800952c:	463b      	mov	r3, r7
 800952e:	4632      	mov	r2, r6
 8009530:	f7f6 fe1a 	bl	8000168 <__aeabi_dsub>
 8009534:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009538:	9f03      	ldr	r7, [sp, #12]
 800953a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800953e:	f7f7 fa7b 	bl	8000a38 <__aeabi_d2iz>
 8009542:	4604      	mov	r4, r0
 8009544:	f7f6 ff5e 	bl	8000404 <__aeabi_i2d>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009550:	f7f6 fe0a 	bl	8000168 <__aeabi_dsub>
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	3430      	adds	r4, #48	; 0x30
 800955a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800955e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009562:	f807 4b01 	strb.w	r4, [r7], #1
 8009566:	f7f7 fa29 	bl	80009bc <__aeabi_dcmplt>
 800956a:	2800      	cmp	r0, #0
 800956c:	d174      	bne.n	8009658 <_dtoa_r+0x648>
 800956e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009572:	2000      	movs	r0, #0
 8009574:	4911      	ldr	r1, [pc, #68]	; (80095bc <_dtoa_r+0x5ac>)
 8009576:	f7f6 fdf7 	bl	8000168 <__aeabi_dsub>
 800957a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800957e:	f7f7 fa1d 	bl	80009bc <__aeabi_dcmplt>
 8009582:	2800      	cmp	r0, #0
 8009584:	f040 80b7 	bne.w	80096f6 <_dtoa_r+0x6e6>
 8009588:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800958a:	429f      	cmp	r7, r3
 800958c:	f43f af7a 	beq.w	8009484 <_dtoa_r+0x474>
 8009590:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009594:	2200      	movs	r2, #0
 8009596:	4b0a      	ldr	r3, [pc, #40]	; (80095c0 <_dtoa_r+0x5b0>)
 8009598:	f7f6 ff9e 	bl	80004d8 <__aeabi_dmul>
 800959c:	2200      	movs	r2, #0
 800959e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80095a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095a6:	4b06      	ldr	r3, [pc, #24]	; (80095c0 <_dtoa_r+0x5b0>)
 80095a8:	f7f6 ff96 	bl	80004d8 <__aeabi_dmul>
 80095ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095b0:	e7c3      	b.n	800953a <_dtoa_r+0x52a>
 80095b2:	bf00      	nop
 80095b4:	0800c0d0 	.word	0x0800c0d0
 80095b8:	0800c0a8 	.word	0x0800c0a8
 80095bc:	3ff00000 	.word	0x3ff00000
 80095c0:	40240000 	.word	0x40240000
 80095c4:	401c0000 	.word	0x401c0000
 80095c8:	40140000 	.word	0x40140000
 80095cc:	3fe00000 	.word	0x3fe00000
 80095d0:	4630      	mov	r0, r6
 80095d2:	4639      	mov	r1, r7
 80095d4:	f7f6 ff80 	bl	80004d8 <__aeabi_dmul>
 80095d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80095de:	9c03      	ldr	r4, [sp, #12]
 80095e0:	9314      	str	r3, [sp, #80]	; 0x50
 80095e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095e6:	f7f7 fa27 	bl	8000a38 <__aeabi_d2iz>
 80095ea:	9015      	str	r0, [sp, #84]	; 0x54
 80095ec:	f7f6 ff0a 	bl	8000404 <__aeabi_i2d>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095f8:	f7f6 fdb6 	bl	8000168 <__aeabi_dsub>
 80095fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095fe:	4606      	mov	r6, r0
 8009600:	3330      	adds	r3, #48	; 0x30
 8009602:	f804 3b01 	strb.w	r3, [r4], #1
 8009606:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009608:	460f      	mov	r7, r1
 800960a:	429c      	cmp	r4, r3
 800960c:	f04f 0200 	mov.w	r2, #0
 8009610:	d124      	bne.n	800965c <_dtoa_r+0x64c>
 8009612:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009616:	4bb0      	ldr	r3, [pc, #704]	; (80098d8 <_dtoa_r+0x8c8>)
 8009618:	f7f6 fda8 	bl	800016c <__adddf3>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	4630      	mov	r0, r6
 8009622:	4639      	mov	r1, r7
 8009624:	f7f7 f9e8 	bl	80009f8 <__aeabi_dcmpgt>
 8009628:	2800      	cmp	r0, #0
 800962a:	d163      	bne.n	80096f4 <_dtoa_r+0x6e4>
 800962c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009630:	2000      	movs	r0, #0
 8009632:	49a9      	ldr	r1, [pc, #676]	; (80098d8 <_dtoa_r+0x8c8>)
 8009634:	f7f6 fd98 	bl	8000168 <__aeabi_dsub>
 8009638:	4602      	mov	r2, r0
 800963a:	460b      	mov	r3, r1
 800963c:	4630      	mov	r0, r6
 800963e:	4639      	mov	r1, r7
 8009640:	f7f7 f9bc 	bl	80009bc <__aeabi_dcmplt>
 8009644:	2800      	cmp	r0, #0
 8009646:	f43f af1d 	beq.w	8009484 <_dtoa_r+0x474>
 800964a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800964c:	1e7b      	subs	r3, r7, #1
 800964e:	9314      	str	r3, [sp, #80]	; 0x50
 8009650:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009654:	2b30      	cmp	r3, #48	; 0x30
 8009656:	d0f8      	beq.n	800964a <_dtoa_r+0x63a>
 8009658:	46c2      	mov	sl, r8
 800965a:	e03b      	b.n	80096d4 <_dtoa_r+0x6c4>
 800965c:	4b9f      	ldr	r3, [pc, #636]	; (80098dc <_dtoa_r+0x8cc>)
 800965e:	f7f6 ff3b 	bl	80004d8 <__aeabi_dmul>
 8009662:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009666:	e7bc      	b.n	80095e2 <_dtoa_r+0x5d2>
 8009668:	9f03      	ldr	r7, [sp, #12]
 800966a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800966e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009672:	4640      	mov	r0, r8
 8009674:	4649      	mov	r1, r9
 8009676:	f7f7 f859 	bl	800072c <__aeabi_ddiv>
 800967a:	f7f7 f9dd 	bl	8000a38 <__aeabi_d2iz>
 800967e:	4604      	mov	r4, r0
 8009680:	f7f6 fec0 	bl	8000404 <__aeabi_i2d>
 8009684:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009688:	f7f6 ff26 	bl	80004d8 <__aeabi_dmul>
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	4640      	mov	r0, r8
 8009692:	4649      	mov	r1, r9
 8009694:	f7f6 fd68 	bl	8000168 <__aeabi_dsub>
 8009698:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800969c:	f807 6b01 	strb.w	r6, [r7], #1
 80096a0:	9e03      	ldr	r6, [sp, #12]
 80096a2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80096a6:	1bbe      	subs	r6, r7, r6
 80096a8:	45b4      	cmp	ip, r6
 80096aa:	4602      	mov	r2, r0
 80096ac:	460b      	mov	r3, r1
 80096ae:	d136      	bne.n	800971e <_dtoa_r+0x70e>
 80096b0:	f7f6 fd5c 	bl	800016c <__adddf3>
 80096b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096b8:	4680      	mov	r8, r0
 80096ba:	4689      	mov	r9, r1
 80096bc:	f7f7 f99c 	bl	80009f8 <__aeabi_dcmpgt>
 80096c0:	bb58      	cbnz	r0, 800971a <_dtoa_r+0x70a>
 80096c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096c6:	4640      	mov	r0, r8
 80096c8:	4649      	mov	r1, r9
 80096ca:	f7f7 f96d 	bl	80009a8 <__aeabi_dcmpeq>
 80096ce:	b108      	cbz	r0, 80096d4 <_dtoa_r+0x6c4>
 80096d0:	07e1      	lsls	r1, r4, #31
 80096d2:	d422      	bmi.n	800971a <_dtoa_r+0x70a>
 80096d4:	4628      	mov	r0, r5
 80096d6:	4659      	mov	r1, fp
 80096d8:	f001 f884 	bl	800a7e4 <_Bfree>
 80096dc:	2300      	movs	r3, #0
 80096de:	703b      	strb	r3, [r7, #0]
 80096e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80096e2:	f10a 0001 	add.w	r0, sl, #1
 80096e6:	6018      	str	r0, [r3, #0]
 80096e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f43f acde 	beq.w	80090ac <_dtoa_r+0x9c>
 80096f0:	601f      	str	r7, [r3, #0]
 80096f2:	e4db      	b.n	80090ac <_dtoa_r+0x9c>
 80096f4:	4627      	mov	r7, r4
 80096f6:	463b      	mov	r3, r7
 80096f8:	461f      	mov	r7, r3
 80096fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096fe:	2a39      	cmp	r2, #57	; 0x39
 8009700:	d107      	bne.n	8009712 <_dtoa_r+0x702>
 8009702:	9a03      	ldr	r2, [sp, #12]
 8009704:	429a      	cmp	r2, r3
 8009706:	d1f7      	bne.n	80096f8 <_dtoa_r+0x6e8>
 8009708:	2230      	movs	r2, #48	; 0x30
 800970a:	9903      	ldr	r1, [sp, #12]
 800970c:	f108 0801 	add.w	r8, r8, #1
 8009710:	700a      	strb	r2, [r1, #0]
 8009712:	781a      	ldrb	r2, [r3, #0]
 8009714:	3201      	adds	r2, #1
 8009716:	701a      	strb	r2, [r3, #0]
 8009718:	e79e      	b.n	8009658 <_dtoa_r+0x648>
 800971a:	46d0      	mov	r8, sl
 800971c:	e7eb      	b.n	80096f6 <_dtoa_r+0x6e6>
 800971e:	2200      	movs	r2, #0
 8009720:	4b6e      	ldr	r3, [pc, #440]	; (80098dc <_dtoa_r+0x8cc>)
 8009722:	f7f6 fed9 	bl	80004d8 <__aeabi_dmul>
 8009726:	2200      	movs	r2, #0
 8009728:	2300      	movs	r3, #0
 800972a:	4680      	mov	r8, r0
 800972c:	4689      	mov	r9, r1
 800972e:	f7f7 f93b 	bl	80009a8 <__aeabi_dcmpeq>
 8009732:	2800      	cmp	r0, #0
 8009734:	d09b      	beq.n	800966e <_dtoa_r+0x65e>
 8009736:	e7cd      	b.n	80096d4 <_dtoa_r+0x6c4>
 8009738:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800973a:	2a00      	cmp	r2, #0
 800973c:	f000 80d0 	beq.w	80098e0 <_dtoa_r+0x8d0>
 8009740:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009742:	2a01      	cmp	r2, #1
 8009744:	f300 80ae 	bgt.w	80098a4 <_dtoa_r+0x894>
 8009748:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800974a:	2a00      	cmp	r2, #0
 800974c:	f000 80a6 	beq.w	800989c <_dtoa_r+0x88c>
 8009750:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009754:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009756:	9f06      	ldr	r7, [sp, #24]
 8009758:	9a06      	ldr	r2, [sp, #24]
 800975a:	2101      	movs	r1, #1
 800975c:	441a      	add	r2, r3
 800975e:	9206      	str	r2, [sp, #24]
 8009760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009762:	4628      	mov	r0, r5
 8009764:	441a      	add	r2, r3
 8009766:	9209      	str	r2, [sp, #36]	; 0x24
 8009768:	f001 f93c 	bl	800a9e4 <__i2b>
 800976c:	4606      	mov	r6, r0
 800976e:	2f00      	cmp	r7, #0
 8009770:	dd0c      	ble.n	800978c <_dtoa_r+0x77c>
 8009772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009774:	2b00      	cmp	r3, #0
 8009776:	dd09      	ble.n	800978c <_dtoa_r+0x77c>
 8009778:	42bb      	cmp	r3, r7
 800977a:	bfa8      	it	ge
 800977c:	463b      	movge	r3, r7
 800977e:	9a06      	ldr	r2, [sp, #24]
 8009780:	1aff      	subs	r7, r7, r3
 8009782:	1ad2      	subs	r2, r2, r3
 8009784:	9206      	str	r2, [sp, #24]
 8009786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	9309      	str	r3, [sp, #36]	; 0x24
 800978c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800978e:	b1f3      	cbz	r3, 80097ce <_dtoa_r+0x7be>
 8009790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009792:	2b00      	cmp	r3, #0
 8009794:	f000 80a8 	beq.w	80098e8 <_dtoa_r+0x8d8>
 8009798:	2c00      	cmp	r4, #0
 800979a:	dd10      	ble.n	80097be <_dtoa_r+0x7ae>
 800979c:	4631      	mov	r1, r6
 800979e:	4622      	mov	r2, r4
 80097a0:	4628      	mov	r0, r5
 80097a2:	f001 f9dd 	bl	800ab60 <__pow5mult>
 80097a6:	465a      	mov	r2, fp
 80097a8:	4601      	mov	r1, r0
 80097aa:	4606      	mov	r6, r0
 80097ac:	4628      	mov	r0, r5
 80097ae:	f001 f92f 	bl	800aa10 <__multiply>
 80097b2:	4680      	mov	r8, r0
 80097b4:	4659      	mov	r1, fp
 80097b6:	4628      	mov	r0, r5
 80097b8:	f001 f814 	bl	800a7e4 <_Bfree>
 80097bc:	46c3      	mov	fp, r8
 80097be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097c0:	1b1a      	subs	r2, r3, r4
 80097c2:	d004      	beq.n	80097ce <_dtoa_r+0x7be>
 80097c4:	4659      	mov	r1, fp
 80097c6:	4628      	mov	r0, r5
 80097c8:	f001 f9ca 	bl	800ab60 <__pow5mult>
 80097cc:	4683      	mov	fp, r0
 80097ce:	2101      	movs	r1, #1
 80097d0:	4628      	mov	r0, r5
 80097d2:	f001 f907 	bl	800a9e4 <__i2b>
 80097d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097d8:	4604      	mov	r4, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f340 8086 	ble.w	80098ec <_dtoa_r+0x8dc>
 80097e0:	461a      	mov	r2, r3
 80097e2:	4601      	mov	r1, r0
 80097e4:	4628      	mov	r0, r5
 80097e6:	f001 f9bb 	bl	800ab60 <__pow5mult>
 80097ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097ec:	4604      	mov	r4, r0
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	dd7f      	ble.n	80098f2 <_dtoa_r+0x8e2>
 80097f2:	f04f 0800 	mov.w	r8, #0
 80097f6:	6923      	ldr	r3, [r4, #16]
 80097f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80097fc:	6918      	ldr	r0, [r3, #16]
 80097fe:	f001 f8a3 	bl	800a948 <__hi0bits>
 8009802:	f1c0 0020 	rsb	r0, r0, #32
 8009806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009808:	4418      	add	r0, r3
 800980a:	f010 001f 	ands.w	r0, r0, #31
 800980e:	f000 8092 	beq.w	8009936 <_dtoa_r+0x926>
 8009812:	f1c0 0320 	rsb	r3, r0, #32
 8009816:	2b04      	cmp	r3, #4
 8009818:	f340 808a 	ble.w	8009930 <_dtoa_r+0x920>
 800981c:	f1c0 001c 	rsb	r0, r0, #28
 8009820:	9b06      	ldr	r3, [sp, #24]
 8009822:	4407      	add	r7, r0
 8009824:	4403      	add	r3, r0
 8009826:	9306      	str	r3, [sp, #24]
 8009828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800982a:	4403      	add	r3, r0
 800982c:	9309      	str	r3, [sp, #36]	; 0x24
 800982e:	9b06      	ldr	r3, [sp, #24]
 8009830:	2b00      	cmp	r3, #0
 8009832:	dd05      	ble.n	8009840 <_dtoa_r+0x830>
 8009834:	4659      	mov	r1, fp
 8009836:	461a      	mov	r2, r3
 8009838:	4628      	mov	r0, r5
 800983a:	f001 f9eb 	bl	800ac14 <__lshift>
 800983e:	4683      	mov	fp, r0
 8009840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009842:	2b00      	cmp	r3, #0
 8009844:	dd05      	ble.n	8009852 <_dtoa_r+0x842>
 8009846:	4621      	mov	r1, r4
 8009848:	461a      	mov	r2, r3
 800984a:	4628      	mov	r0, r5
 800984c:	f001 f9e2 	bl	800ac14 <__lshift>
 8009850:	4604      	mov	r4, r0
 8009852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009854:	2b00      	cmp	r3, #0
 8009856:	d070      	beq.n	800993a <_dtoa_r+0x92a>
 8009858:	4621      	mov	r1, r4
 800985a:	4658      	mov	r0, fp
 800985c:	f001 fa4a 	bl	800acf4 <__mcmp>
 8009860:	2800      	cmp	r0, #0
 8009862:	da6a      	bge.n	800993a <_dtoa_r+0x92a>
 8009864:	2300      	movs	r3, #0
 8009866:	4659      	mov	r1, fp
 8009868:	220a      	movs	r2, #10
 800986a:	4628      	mov	r0, r5
 800986c:	f000 ffdc 	bl	800a828 <__multadd>
 8009870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009872:	4683      	mov	fp, r0
 8009874:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009878:	2b00      	cmp	r3, #0
 800987a:	f000 8194 	beq.w	8009ba6 <_dtoa_r+0xb96>
 800987e:	4631      	mov	r1, r6
 8009880:	2300      	movs	r3, #0
 8009882:	220a      	movs	r2, #10
 8009884:	4628      	mov	r0, r5
 8009886:	f000 ffcf 	bl	800a828 <__multadd>
 800988a:	f1b9 0f00 	cmp.w	r9, #0
 800988e:	4606      	mov	r6, r0
 8009890:	f300 8093 	bgt.w	80099ba <_dtoa_r+0x9aa>
 8009894:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009896:	2b02      	cmp	r3, #2
 8009898:	dc57      	bgt.n	800994a <_dtoa_r+0x93a>
 800989a:	e08e      	b.n	80099ba <_dtoa_r+0x9aa>
 800989c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800989e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80098a2:	e757      	b.n	8009754 <_dtoa_r+0x744>
 80098a4:	9b08      	ldr	r3, [sp, #32]
 80098a6:	1e5c      	subs	r4, r3, #1
 80098a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098aa:	42a3      	cmp	r3, r4
 80098ac:	bfb7      	itett	lt
 80098ae:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80098b0:	1b1c      	subge	r4, r3, r4
 80098b2:	1ae2      	sublt	r2, r4, r3
 80098b4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80098b6:	bfbe      	ittt	lt
 80098b8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80098ba:	189b      	addlt	r3, r3, r2
 80098bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80098be:	9b08      	ldr	r3, [sp, #32]
 80098c0:	bfb8      	it	lt
 80098c2:	2400      	movlt	r4, #0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	bfbb      	ittet	lt
 80098c8:	9b06      	ldrlt	r3, [sp, #24]
 80098ca:	9a08      	ldrlt	r2, [sp, #32]
 80098cc:	9f06      	ldrge	r7, [sp, #24]
 80098ce:	1a9f      	sublt	r7, r3, r2
 80098d0:	bfac      	ite	ge
 80098d2:	9b08      	ldrge	r3, [sp, #32]
 80098d4:	2300      	movlt	r3, #0
 80098d6:	e73f      	b.n	8009758 <_dtoa_r+0x748>
 80098d8:	3fe00000 	.word	0x3fe00000
 80098dc:	40240000 	.word	0x40240000
 80098e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80098e2:	9f06      	ldr	r7, [sp, #24]
 80098e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80098e6:	e742      	b.n	800976e <_dtoa_r+0x75e>
 80098e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098ea:	e76b      	b.n	80097c4 <_dtoa_r+0x7b4>
 80098ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	dc19      	bgt.n	8009926 <_dtoa_r+0x916>
 80098f2:	9b04      	ldr	r3, [sp, #16]
 80098f4:	b9bb      	cbnz	r3, 8009926 <_dtoa_r+0x916>
 80098f6:	9b05      	ldr	r3, [sp, #20]
 80098f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098fc:	b99b      	cbnz	r3, 8009926 <_dtoa_r+0x916>
 80098fe:	9b05      	ldr	r3, [sp, #20]
 8009900:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009904:	0d1b      	lsrs	r3, r3, #20
 8009906:	051b      	lsls	r3, r3, #20
 8009908:	b183      	cbz	r3, 800992c <_dtoa_r+0x91c>
 800990a:	f04f 0801 	mov.w	r8, #1
 800990e:	9b06      	ldr	r3, [sp, #24]
 8009910:	3301      	adds	r3, #1
 8009912:	9306      	str	r3, [sp, #24]
 8009914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009916:	3301      	adds	r3, #1
 8009918:	9309      	str	r3, [sp, #36]	; 0x24
 800991a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800991c:	2b00      	cmp	r3, #0
 800991e:	f47f af6a 	bne.w	80097f6 <_dtoa_r+0x7e6>
 8009922:	2001      	movs	r0, #1
 8009924:	e76f      	b.n	8009806 <_dtoa_r+0x7f6>
 8009926:	f04f 0800 	mov.w	r8, #0
 800992a:	e7f6      	b.n	800991a <_dtoa_r+0x90a>
 800992c:	4698      	mov	r8, r3
 800992e:	e7f4      	b.n	800991a <_dtoa_r+0x90a>
 8009930:	f43f af7d 	beq.w	800982e <_dtoa_r+0x81e>
 8009934:	4618      	mov	r0, r3
 8009936:	301c      	adds	r0, #28
 8009938:	e772      	b.n	8009820 <_dtoa_r+0x810>
 800993a:	9b08      	ldr	r3, [sp, #32]
 800993c:	2b00      	cmp	r3, #0
 800993e:	dc36      	bgt.n	80099ae <_dtoa_r+0x99e>
 8009940:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009942:	2b02      	cmp	r3, #2
 8009944:	dd33      	ble.n	80099ae <_dtoa_r+0x99e>
 8009946:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800994a:	f1b9 0f00 	cmp.w	r9, #0
 800994e:	d10d      	bne.n	800996c <_dtoa_r+0x95c>
 8009950:	4621      	mov	r1, r4
 8009952:	464b      	mov	r3, r9
 8009954:	2205      	movs	r2, #5
 8009956:	4628      	mov	r0, r5
 8009958:	f000 ff66 	bl	800a828 <__multadd>
 800995c:	4601      	mov	r1, r0
 800995e:	4604      	mov	r4, r0
 8009960:	4658      	mov	r0, fp
 8009962:	f001 f9c7 	bl	800acf4 <__mcmp>
 8009966:	2800      	cmp	r0, #0
 8009968:	f73f adb8 	bgt.w	80094dc <_dtoa_r+0x4cc>
 800996c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800996e:	9f03      	ldr	r7, [sp, #12]
 8009970:	ea6f 0a03 	mvn.w	sl, r3
 8009974:	f04f 0800 	mov.w	r8, #0
 8009978:	4621      	mov	r1, r4
 800997a:	4628      	mov	r0, r5
 800997c:	f000 ff32 	bl	800a7e4 <_Bfree>
 8009980:	2e00      	cmp	r6, #0
 8009982:	f43f aea7 	beq.w	80096d4 <_dtoa_r+0x6c4>
 8009986:	f1b8 0f00 	cmp.w	r8, #0
 800998a:	d005      	beq.n	8009998 <_dtoa_r+0x988>
 800998c:	45b0      	cmp	r8, r6
 800998e:	d003      	beq.n	8009998 <_dtoa_r+0x988>
 8009990:	4641      	mov	r1, r8
 8009992:	4628      	mov	r0, r5
 8009994:	f000 ff26 	bl	800a7e4 <_Bfree>
 8009998:	4631      	mov	r1, r6
 800999a:	4628      	mov	r0, r5
 800999c:	f000 ff22 	bl	800a7e4 <_Bfree>
 80099a0:	e698      	b.n	80096d4 <_dtoa_r+0x6c4>
 80099a2:	2400      	movs	r4, #0
 80099a4:	4626      	mov	r6, r4
 80099a6:	e7e1      	b.n	800996c <_dtoa_r+0x95c>
 80099a8:	46c2      	mov	sl, r8
 80099aa:	4626      	mov	r6, r4
 80099ac:	e596      	b.n	80094dc <_dtoa_r+0x4cc>
 80099ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 80fd 	beq.w	8009bb4 <_dtoa_r+0xba4>
 80099ba:	2f00      	cmp	r7, #0
 80099bc:	dd05      	ble.n	80099ca <_dtoa_r+0x9ba>
 80099be:	4631      	mov	r1, r6
 80099c0:	463a      	mov	r2, r7
 80099c2:	4628      	mov	r0, r5
 80099c4:	f001 f926 	bl	800ac14 <__lshift>
 80099c8:	4606      	mov	r6, r0
 80099ca:	f1b8 0f00 	cmp.w	r8, #0
 80099ce:	d05c      	beq.n	8009a8a <_dtoa_r+0xa7a>
 80099d0:	4628      	mov	r0, r5
 80099d2:	6871      	ldr	r1, [r6, #4]
 80099d4:	f000 fec6 	bl	800a764 <_Balloc>
 80099d8:	4607      	mov	r7, r0
 80099da:	b928      	cbnz	r0, 80099e8 <_dtoa_r+0x9d8>
 80099dc:	4602      	mov	r2, r0
 80099de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80099e2:	4b7f      	ldr	r3, [pc, #508]	; (8009be0 <_dtoa_r+0xbd0>)
 80099e4:	f7ff bb28 	b.w	8009038 <_dtoa_r+0x28>
 80099e8:	6932      	ldr	r2, [r6, #16]
 80099ea:	f106 010c 	add.w	r1, r6, #12
 80099ee:	3202      	adds	r2, #2
 80099f0:	0092      	lsls	r2, r2, #2
 80099f2:	300c      	adds	r0, #12
 80099f4:	f000 fea8 	bl	800a748 <memcpy>
 80099f8:	2201      	movs	r2, #1
 80099fa:	4639      	mov	r1, r7
 80099fc:	4628      	mov	r0, r5
 80099fe:	f001 f909 	bl	800ac14 <__lshift>
 8009a02:	46b0      	mov	r8, r6
 8009a04:	4606      	mov	r6, r0
 8009a06:	9b03      	ldr	r3, [sp, #12]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	9308      	str	r3, [sp, #32]
 8009a0c:	9b03      	ldr	r3, [sp, #12]
 8009a0e:	444b      	add	r3, r9
 8009a10:	930a      	str	r3, [sp, #40]	; 0x28
 8009a12:	9b04      	ldr	r3, [sp, #16]
 8009a14:	f003 0301 	and.w	r3, r3, #1
 8009a18:	9309      	str	r3, [sp, #36]	; 0x24
 8009a1a:	9b08      	ldr	r3, [sp, #32]
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	4658      	mov	r0, fp
 8009a22:	9304      	str	r3, [sp, #16]
 8009a24:	f7ff fa68 	bl	8008ef8 <quorem>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	4641      	mov	r1, r8
 8009a2c:	3330      	adds	r3, #48	; 0x30
 8009a2e:	9006      	str	r0, [sp, #24]
 8009a30:	4658      	mov	r0, fp
 8009a32:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a34:	f001 f95e 	bl	800acf4 <__mcmp>
 8009a38:	4632      	mov	r2, r6
 8009a3a:	4681      	mov	r9, r0
 8009a3c:	4621      	mov	r1, r4
 8009a3e:	4628      	mov	r0, r5
 8009a40:	f001 f974 	bl	800ad2c <__mdiff>
 8009a44:	68c2      	ldr	r2, [r0, #12]
 8009a46:	4607      	mov	r7, r0
 8009a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a4a:	bb02      	cbnz	r2, 8009a8e <_dtoa_r+0xa7e>
 8009a4c:	4601      	mov	r1, r0
 8009a4e:	4658      	mov	r0, fp
 8009a50:	f001 f950 	bl	800acf4 <__mcmp>
 8009a54:	4602      	mov	r2, r0
 8009a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a58:	4639      	mov	r1, r7
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009a60:	f000 fec0 	bl	800a7e4 <_Bfree>
 8009a64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a68:	9f08      	ldr	r7, [sp, #32]
 8009a6a:	ea43 0102 	orr.w	r1, r3, r2
 8009a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a70:	430b      	orrs	r3, r1
 8009a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a74:	d10d      	bne.n	8009a92 <_dtoa_r+0xa82>
 8009a76:	2b39      	cmp	r3, #57	; 0x39
 8009a78:	d029      	beq.n	8009ace <_dtoa_r+0xabe>
 8009a7a:	f1b9 0f00 	cmp.w	r9, #0
 8009a7e:	dd01      	ble.n	8009a84 <_dtoa_r+0xa74>
 8009a80:	9b06      	ldr	r3, [sp, #24]
 8009a82:	3331      	adds	r3, #49	; 0x31
 8009a84:	9a04      	ldr	r2, [sp, #16]
 8009a86:	7013      	strb	r3, [r2, #0]
 8009a88:	e776      	b.n	8009978 <_dtoa_r+0x968>
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	e7b9      	b.n	8009a02 <_dtoa_r+0x9f2>
 8009a8e:	2201      	movs	r2, #1
 8009a90:	e7e2      	b.n	8009a58 <_dtoa_r+0xa48>
 8009a92:	f1b9 0f00 	cmp.w	r9, #0
 8009a96:	db06      	blt.n	8009aa6 <_dtoa_r+0xa96>
 8009a98:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009a9a:	ea41 0909 	orr.w	r9, r1, r9
 8009a9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009aa0:	ea59 0101 	orrs.w	r1, r9, r1
 8009aa4:	d120      	bne.n	8009ae8 <_dtoa_r+0xad8>
 8009aa6:	2a00      	cmp	r2, #0
 8009aa8:	ddec      	ble.n	8009a84 <_dtoa_r+0xa74>
 8009aaa:	4659      	mov	r1, fp
 8009aac:	2201      	movs	r2, #1
 8009aae:	4628      	mov	r0, r5
 8009ab0:	9308      	str	r3, [sp, #32]
 8009ab2:	f001 f8af 	bl	800ac14 <__lshift>
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	4683      	mov	fp, r0
 8009aba:	f001 f91b 	bl	800acf4 <__mcmp>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	9b08      	ldr	r3, [sp, #32]
 8009ac2:	dc02      	bgt.n	8009aca <_dtoa_r+0xaba>
 8009ac4:	d1de      	bne.n	8009a84 <_dtoa_r+0xa74>
 8009ac6:	07da      	lsls	r2, r3, #31
 8009ac8:	d5dc      	bpl.n	8009a84 <_dtoa_r+0xa74>
 8009aca:	2b39      	cmp	r3, #57	; 0x39
 8009acc:	d1d8      	bne.n	8009a80 <_dtoa_r+0xa70>
 8009ace:	2339      	movs	r3, #57	; 0x39
 8009ad0:	9a04      	ldr	r2, [sp, #16]
 8009ad2:	7013      	strb	r3, [r2, #0]
 8009ad4:	463b      	mov	r3, r7
 8009ad6:	461f      	mov	r7, r3
 8009ad8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009adc:	3b01      	subs	r3, #1
 8009ade:	2a39      	cmp	r2, #57	; 0x39
 8009ae0:	d050      	beq.n	8009b84 <_dtoa_r+0xb74>
 8009ae2:	3201      	adds	r2, #1
 8009ae4:	701a      	strb	r2, [r3, #0]
 8009ae6:	e747      	b.n	8009978 <_dtoa_r+0x968>
 8009ae8:	2a00      	cmp	r2, #0
 8009aea:	dd03      	ble.n	8009af4 <_dtoa_r+0xae4>
 8009aec:	2b39      	cmp	r3, #57	; 0x39
 8009aee:	d0ee      	beq.n	8009ace <_dtoa_r+0xabe>
 8009af0:	3301      	adds	r3, #1
 8009af2:	e7c7      	b.n	8009a84 <_dtoa_r+0xa74>
 8009af4:	9a08      	ldr	r2, [sp, #32]
 8009af6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009af8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009afc:	428a      	cmp	r2, r1
 8009afe:	d02a      	beq.n	8009b56 <_dtoa_r+0xb46>
 8009b00:	4659      	mov	r1, fp
 8009b02:	2300      	movs	r3, #0
 8009b04:	220a      	movs	r2, #10
 8009b06:	4628      	mov	r0, r5
 8009b08:	f000 fe8e 	bl	800a828 <__multadd>
 8009b0c:	45b0      	cmp	r8, r6
 8009b0e:	4683      	mov	fp, r0
 8009b10:	f04f 0300 	mov.w	r3, #0
 8009b14:	f04f 020a 	mov.w	r2, #10
 8009b18:	4641      	mov	r1, r8
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	d107      	bne.n	8009b2e <_dtoa_r+0xb1e>
 8009b1e:	f000 fe83 	bl	800a828 <__multadd>
 8009b22:	4680      	mov	r8, r0
 8009b24:	4606      	mov	r6, r0
 8009b26:	9b08      	ldr	r3, [sp, #32]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	9308      	str	r3, [sp, #32]
 8009b2c:	e775      	b.n	8009a1a <_dtoa_r+0xa0a>
 8009b2e:	f000 fe7b 	bl	800a828 <__multadd>
 8009b32:	4631      	mov	r1, r6
 8009b34:	4680      	mov	r8, r0
 8009b36:	2300      	movs	r3, #0
 8009b38:	220a      	movs	r2, #10
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	f000 fe74 	bl	800a828 <__multadd>
 8009b40:	4606      	mov	r6, r0
 8009b42:	e7f0      	b.n	8009b26 <_dtoa_r+0xb16>
 8009b44:	f1b9 0f00 	cmp.w	r9, #0
 8009b48:	bfcc      	ite	gt
 8009b4a:	464f      	movgt	r7, r9
 8009b4c:	2701      	movle	r7, #1
 8009b4e:	f04f 0800 	mov.w	r8, #0
 8009b52:	9a03      	ldr	r2, [sp, #12]
 8009b54:	4417      	add	r7, r2
 8009b56:	4659      	mov	r1, fp
 8009b58:	2201      	movs	r2, #1
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	9308      	str	r3, [sp, #32]
 8009b5e:	f001 f859 	bl	800ac14 <__lshift>
 8009b62:	4621      	mov	r1, r4
 8009b64:	4683      	mov	fp, r0
 8009b66:	f001 f8c5 	bl	800acf4 <__mcmp>
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	dcb2      	bgt.n	8009ad4 <_dtoa_r+0xac4>
 8009b6e:	d102      	bne.n	8009b76 <_dtoa_r+0xb66>
 8009b70:	9b08      	ldr	r3, [sp, #32]
 8009b72:	07db      	lsls	r3, r3, #31
 8009b74:	d4ae      	bmi.n	8009ad4 <_dtoa_r+0xac4>
 8009b76:	463b      	mov	r3, r7
 8009b78:	461f      	mov	r7, r3
 8009b7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b7e:	2a30      	cmp	r2, #48	; 0x30
 8009b80:	d0fa      	beq.n	8009b78 <_dtoa_r+0xb68>
 8009b82:	e6f9      	b.n	8009978 <_dtoa_r+0x968>
 8009b84:	9a03      	ldr	r2, [sp, #12]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d1a5      	bne.n	8009ad6 <_dtoa_r+0xac6>
 8009b8a:	2331      	movs	r3, #49	; 0x31
 8009b8c:	f10a 0a01 	add.w	sl, sl, #1
 8009b90:	e779      	b.n	8009a86 <_dtoa_r+0xa76>
 8009b92:	4b14      	ldr	r3, [pc, #80]	; (8009be4 <_dtoa_r+0xbd4>)
 8009b94:	f7ff baa8 	b.w	80090e8 <_dtoa_r+0xd8>
 8009b98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f47f aa81 	bne.w	80090a2 <_dtoa_r+0x92>
 8009ba0:	4b11      	ldr	r3, [pc, #68]	; (8009be8 <_dtoa_r+0xbd8>)
 8009ba2:	f7ff baa1 	b.w	80090e8 <_dtoa_r+0xd8>
 8009ba6:	f1b9 0f00 	cmp.w	r9, #0
 8009baa:	dc03      	bgt.n	8009bb4 <_dtoa_r+0xba4>
 8009bac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	f73f aecb 	bgt.w	800994a <_dtoa_r+0x93a>
 8009bb4:	9f03      	ldr	r7, [sp, #12]
 8009bb6:	4621      	mov	r1, r4
 8009bb8:	4658      	mov	r0, fp
 8009bba:	f7ff f99d 	bl	8008ef8 <quorem>
 8009bbe:	9a03      	ldr	r2, [sp, #12]
 8009bc0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009bc4:	f807 3b01 	strb.w	r3, [r7], #1
 8009bc8:	1aba      	subs	r2, r7, r2
 8009bca:	4591      	cmp	r9, r2
 8009bcc:	ddba      	ble.n	8009b44 <_dtoa_r+0xb34>
 8009bce:	4659      	mov	r1, fp
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	220a      	movs	r2, #10
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	f000 fe27 	bl	800a828 <__multadd>
 8009bda:	4683      	mov	fp, r0
 8009bdc:	e7eb      	b.n	8009bb6 <_dtoa_r+0xba6>
 8009bde:	bf00      	nop
 8009be0:	0800bf58 	.word	0x0800bf58
 8009be4:	0800bd58 	.word	0x0800bd58
 8009be8:	0800bed9 	.word	0x0800bed9

08009bec <__sflush_r>:
 8009bec:	898a      	ldrh	r2, [r1, #12]
 8009bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf0:	4605      	mov	r5, r0
 8009bf2:	0710      	lsls	r0, r2, #28
 8009bf4:	460c      	mov	r4, r1
 8009bf6:	d457      	bmi.n	8009ca8 <__sflush_r+0xbc>
 8009bf8:	684b      	ldr	r3, [r1, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	dc04      	bgt.n	8009c08 <__sflush_r+0x1c>
 8009bfe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	dc01      	bgt.n	8009c08 <__sflush_r+0x1c>
 8009c04:	2000      	movs	r0, #0
 8009c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c0a:	2e00      	cmp	r6, #0
 8009c0c:	d0fa      	beq.n	8009c04 <__sflush_r+0x18>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c14:	682f      	ldr	r7, [r5, #0]
 8009c16:	602b      	str	r3, [r5, #0]
 8009c18:	d032      	beq.n	8009c80 <__sflush_r+0x94>
 8009c1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	075a      	lsls	r2, r3, #29
 8009c20:	d505      	bpl.n	8009c2e <__sflush_r+0x42>
 8009c22:	6863      	ldr	r3, [r4, #4]
 8009c24:	1ac0      	subs	r0, r0, r3
 8009c26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c28:	b10b      	cbz	r3, 8009c2e <__sflush_r+0x42>
 8009c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c2c:	1ac0      	subs	r0, r0, r3
 8009c2e:	2300      	movs	r3, #0
 8009c30:	4602      	mov	r2, r0
 8009c32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c34:	4628      	mov	r0, r5
 8009c36:	6a21      	ldr	r1, [r4, #32]
 8009c38:	47b0      	blx	r6
 8009c3a:	1c43      	adds	r3, r0, #1
 8009c3c:	89a3      	ldrh	r3, [r4, #12]
 8009c3e:	d106      	bne.n	8009c4e <__sflush_r+0x62>
 8009c40:	6829      	ldr	r1, [r5, #0]
 8009c42:	291d      	cmp	r1, #29
 8009c44:	d82c      	bhi.n	8009ca0 <__sflush_r+0xb4>
 8009c46:	4a29      	ldr	r2, [pc, #164]	; (8009cec <__sflush_r+0x100>)
 8009c48:	40ca      	lsrs	r2, r1
 8009c4a:	07d6      	lsls	r6, r2, #31
 8009c4c:	d528      	bpl.n	8009ca0 <__sflush_r+0xb4>
 8009c4e:	2200      	movs	r2, #0
 8009c50:	6062      	str	r2, [r4, #4]
 8009c52:	6922      	ldr	r2, [r4, #16]
 8009c54:	04d9      	lsls	r1, r3, #19
 8009c56:	6022      	str	r2, [r4, #0]
 8009c58:	d504      	bpl.n	8009c64 <__sflush_r+0x78>
 8009c5a:	1c42      	adds	r2, r0, #1
 8009c5c:	d101      	bne.n	8009c62 <__sflush_r+0x76>
 8009c5e:	682b      	ldr	r3, [r5, #0]
 8009c60:	b903      	cbnz	r3, 8009c64 <__sflush_r+0x78>
 8009c62:	6560      	str	r0, [r4, #84]	; 0x54
 8009c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c66:	602f      	str	r7, [r5, #0]
 8009c68:	2900      	cmp	r1, #0
 8009c6a:	d0cb      	beq.n	8009c04 <__sflush_r+0x18>
 8009c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c70:	4299      	cmp	r1, r3
 8009c72:	d002      	beq.n	8009c7a <__sflush_r+0x8e>
 8009c74:	4628      	mov	r0, r5
 8009c76:	f001 fa41 	bl	800b0fc <_free_r>
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	6360      	str	r0, [r4, #52]	; 0x34
 8009c7e:	e7c2      	b.n	8009c06 <__sflush_r+0x1a>
 8009c80:	6a21      	ldr	r1, [r4, #32]
 8009c82:	2301      	movs	r3, #1
 8009c84:	4628      	mov	r0, r5
 8009c86:	47b0      	blx	r6
 8009c88:	1c41      	adds	r1, r0, #1
 8009c8a:	d1c7      	bne.n	8009c1c <__sflush_r+0x30>
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d0c4      	beq.n	8009c1c <__sflush_r+0x30>
 8009c92:	2b1d      	cmp	r3, #29
 8009c94:	d001      	beq.n	8009c9a <__sflush_r+0xae>
 8009c96:	2b16      	cmp	r3, #22
 8009c98:	d101      	bne.n	8009c9e <__sflush_r+0xb2>
 8009c9a:	602f      	str	r7, [r5, #0]
 8009c9c:	e7b2      	b.n	8009c04 <__sflush_r+0x18>
 8009c9e:	89a3      	ldrh	r3, [r4, #12]
 8009ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ca4:	81a3      	strh	r3, [r4, #12]
 8009ca6:	e7ae      	b.n	8009c06 <__sflush_r+0x1a>
 8009ca8:	690f      	ldr	r7, [r1, #16]
 8009caa:	2f00      	cmp	r7, #0
 8009cac:	d0aa      	beq.n	8009c04 <__sflush_r+0x18>
 8009cae:	0793      	lsls	r3, r2, #30
 8009cb0:	bf18      	it	ne
 8009cb2:	2300      	movne	r3, #0
 8009cb4:	680e      	ldr	r6, [r1, #0]
 8009cb6:	bf08      	it	eq
 8009cb8:	694b      	ldreq	r3, [r1, #20]
 8009cba:	1bf6      	subs	r6, r6, r7
 8009cbc:	600f      	str	r7, [r1, #0]
 8009cbe:	608b      	str	r3, [r1, #8]
 8009cc0:	2e00      	cmp	r6, #0
 8009cc2:	dd9f      	ble.n	8009c04 <__sflush_r+0x18>
 8009cc4:	4633      	mov	r3, r6
 8009cc6:	463a      	mov	r2, r7
 8009cc8:	4628      	mov	r0, r5
 8009cca:	6a21      	ldr	r1, [r4, #32]
 8009ccc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009cd0:	47e0      	blx	ip
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	dc06      	bgt.n	8009ce4 <__sflush_r+0xf8>
 8009cd6:	89a3      	ldrh	r3, [r4, #12]
 8009cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ce0:	81a3      	strh	r3, [r4, #12]
 8009ce2:	e790      	b.n	8009c06 <__sflush_r+0x1a>
 8009ce4:	4407      	add	r7, r0
 8009ce6:	1a36      	subs	r6, r6, r0
 8009ce8:	e7ea      	b.n	8009cc0 <__sflush_r+0xd4>
 8009cea:	bf00      	nop
 8009cec:	20400001 	.word	0x20400001

08009cf0 <_fflush_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	690b      	ldr	r3, [r1, #16]
 8009cf4:	4605      	mov	r5, r0
 8009cf6:	460c      	mov	r4, r1
 8009cf8:	b913      	cbnz	r3, 8009d00 <_fflush_r+0x10>
 8009cfa:	2500      	movs	r5, #0
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	bd38      	pop	{r3, r4, r5, pc}
 8009d00:	b118      	cbz	r0, 8009d0a <_fflush_r+0x1a>
 8009d02:	6983      	ldr	r3, [r0, #24]
 8009d04:	b90b      	cbnz	r3, 8009d0a <_fflush_r+0x1a>
 8009d06:	f000 f887 	bl	8009e18 <__sinit>
 8009d0a:	4b14      	ldr	r3, [pc, #80]	; (8009d5c <_fflush_r+0x6c>)
 8009d0c:	429c      	cmp	r4, r3
 8009d0e:	d11b      	bne.n	8009d48 <_fflush_r+0x58>
 8009d10:	686c      	ldr	r4, [r5, #4]
 8009d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d0ef      	beq.n	8009cfa <_fflush_r+0xa>
 8009d1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d1c:	07d0      	lsls	r0, r2, #31
 8009d1e:	d404      	bmi.n	8009d2a <_fflush_r+0x3a>
 8009d20:	0599      	lsls	r1, r3, #22
 8009d22:	d402      	bmi.n	8009d2a <_fflush_r+0x3a>
 8009d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d26:	f000 fc80 	bl	800a62a <__retarget_lock_acquire_recursive>
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	4621      	mov	r1, r4
 8009d2e:	f7ff ff5d 	bl	8009bec <__sflush_r>
 8009d32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d34:	4605      	mov	r5, r0
 8009d36:	07da      	lsls	r2, r3, #31
 8009d38:	d4e0      	bmi.n	8009cfc <_fflush_r+0xc>
 8009d3a:	89a3      	ldrh	r3, [r4, #12]
 8009d3c:	059b      	lsls	r3, r3, #22
 8009d3e:	d4dd      	bmi.n	8009cfc <_fflush_r+0xc>
 8009d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d42:	f000 fc73 	bl	800a62c <__retarget_lock_release_recursive>
 8009d46:	e7d9      	b.n	8009cfc <_fflush_r+0xc>
 8009d48:	4b05      	ldr	r3, [pc, #20]	; (8009d60 <_fflush_r+0x70>)
 8009d4a:	429c      	cmp	r4, r3
 8009d4c:	d101      	bne.n	8009d52 <_fflush_r+0x62>
 8009d4e:	68ac      	ldr	r4, [r5, #8]
 8009d50:	e7df      	b.n	8009d12 <_fflush_r+0x22>
 8009d52:	4b04      	ldr	r3, [pc, #16]	; (8009d64 <_fflush_r+0x74>)
 8009d54:	429c      	cmp	r4, r3
 8009d56:	bf08      	it	eq
 8009d58:	68ec      	ldreq	r4, [r5, #12]
 8009d5a:	e7da      	b.n	8009d12 <_fflush_r+0x22>
 8009d5c:	0800bf8c 	.word	0x0800bf8c
 8009d60:	0800bfac 	.word	0x0800bfac
 8009d64:	0800bf6c 	.word	0x0800bf6c

08009d68 <std>:
 8009d68:	2300      	movs	r3, #0
 8009d6a:	b510      	push	{r4, lr}
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8009d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d76:	6083      	str	r3, [r0, #8]
 8009d78:	8181      	strh	r1, [r0, #12]
 8009d7a:	6643      	str	r3, [r0, #100]	; 0x64
 8009d7c:	81c2      	strh	r2, [r0, #14]
 8009d7e:	6183      	str	r3, [r0, #24]
 8009d80:	4619      	mov	r1, r3
 8009d82:	2208      	movs	r2, #8
 8009d84:	305c      	adds	r0, #92	; 0x5c
 8009d86:	f7fd fa3f 	bl	8007208 <memset>
 8009d8a:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <std+0x38>)
 8009d8c:	6224      	str	r4, [r4, #32]
 8009d8e:	6263      	str	r3, [r4, #36]	; 0x24
 8009d90:	4b04      	ldr	r3, [pc, #16]	; (8009da4 <std+0x3c>)
 8009d92:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d94:	4b04      	ldr	r3, [pc, #16]	; (8009da8 <std+0x40>)
 8009d96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d98:	4b04      	ldr	r3, [pc, #16]	; (8009dac <std+0x44>)
 8009d9a:	6323      	str	r3, [r4, #48]	; 0x30
 8009d9c:	bd10      	pop	{r4, pc}
 8009d9e:	bf00      	nop
 8009da0:	0800b849 	.word	0x0800b849
 8009da4:	0800b86b 	.word	0x0800b86b
 8009da8:	0800b8a3 	.word	0x0800b8a3
 8009dac:	0800b8c7 	.word	0x0800b8c7

08009db0 <_cleanup_r>:
 8009db0:	4901      	ldr	r1, [pc, #4]	; (8009db8 <_cleanup_r+0x8>)
 8009db2:	f000 b8af 	b.w	8009f14 <_fwalk_reent>
 8009db6:	bf00      	nop
 8009db8:	08009cf1 	.word	0x08009cf1

08009dbc <__sfmoreglue>:
 8009dbc:	2268      	movs	r2, #104	; 0x68
 8009dbe:	b570      	push	{r4, r5, r6, lr}
 8009dc0:	1e4d      	subs	r5, r1, #1
 8009dc2:	4355      	muls	r5, r2
 8009dc4:	460e      	mov	r6, r1
 8009dc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009dca:	f001 f9ff 	bl	800b1cc <_malloc_r>
 8009dce:	4604      	mov	r4, r0
 8009dd0:	b140      	cbz	r0, 8009de4 <__sfmoreglue+0x28>
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	e9c0 1600 	strd	r1, r6, [r0]
 8009dd8:	300c      	adds	r0, #12
 8009dda:	60a0      	str	r0, [r4, #8]
 8009ddc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009de0:	f7fd fa12 	bl	8007208 <memset>
 8009de4:	4620      	mov	r0, r4
 8009de6:	bd70      	pop	{r4, r5, r6, pc}

08009de8 <__sfp_lock_acquire>:
 8009de8:	4801      	ldr	r0, [pc, #4]	; (8009df0 <__sfp_lock_acquire+0x8>)
 8009dea:	f000 bc1e 	b.w	800a62a <__retarget_lock_acquire_recursive>
 8009dee:	bf00      	nop
 8009df0:	200005b9 	.word	0x200005b9

08009df4 <__sfp_lock_release>:
 8009df4:	4801      	ldr	r0, [pc, #4]	; (8009dfc <__sfp_lock_release+0x8>)
 8009df6:	f000 bc19 	b.w	800a62c <__retarget_lock_release_recursive>
 8009dfa:	bf00      	nop
 8009dfc:	200005b9 	.word	0x200005b9

08009e00 <__sinit_lock_acquire>:
 8009e00:	4801      	ldr	r0, [pc, #4]	; (8009e08 <__sinit_lock_acquire+0x8>)
 8009e02:	f000 bc12 	b.w	800a62a <__retarget_lock_acquire_recursive>
 8009e06:	bf00      	nop
 8009e08:	200005ba 	.word	0x200005ba

08009e0c <__sinit_lock_release>:
 8009e0c:	4801      	ldr	r0, [pc, #4]	; (8009e14 <__sinit_lock_release+0x8>)
 8009e0e:	f000 bc0d 	b.w	800a62c <__retarget_lock_release_recursive>
 8009e12:	bf00      	nop
 8009e14:	200005ba 	.word	0x200005ba

08009e18 <__sinit>:
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	f7ff fff0 	bl	8009e00 <__sinit_lock_acquire>
 8009e20:	69a3      	ldr	r3, [r4, #24]
 8009e22:	b11b      	cbz	r3, 8009e2c <__sinit+0x14>
 8009e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e28:	f7ff bff0 	b.w	8009e0c <__sinit_lock_release>
 8009e2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e30:	6523      	str	r3, [r4, #80]	; 0x50
 8009e32:	4b13      	ldr	r3, [pc, #76]	; (8009e80 <__sinit+0x68>)
 8009e34:	4a13      	ldr	r2, [pc, #76]	; (8009e84 <__sinit+0x6c>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e3a:	42a3      	cmp	r3, r4
 8009e3c:	bf08      	it	eq
 8009e3e:	2301      	moveq	r3, #1
 8009e40:	4620      	mov	r0, r4
 8009e42:	bf08      	it	eq
 8009e44:	61a3      	streq	r3, [r4, #24]
 8009e46:	f000 f81f 	bl	8009e88 <__sfp>
 8009e4a:	6060      	str	r0, [r4, #4]
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	f000 f81b 	bl	8009e88 <__sfp>
 8009e52:	60a0      	str	r0, [r4, #8]
 8009e54:	4620      	mov	r0, r4
 8009e56:	f000 f817 	bl	8009e88 <__sfp>
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	2104      	movs	r1, #4
 8009e5e:	60e0      	str	r0, [r4, #12]
 8009e60:	6860      	ldr	r0, [r4, #4]
 8009e62:	f7ff ff81 	bl	8009d68 <std>
 8009e66:	2201      	movs	r2, #1
 8009e68:	2109      	movs	r1, #9
 8009e6a:	68a0      	ldr	r0, [r4, #8]
 8009e6c:	f7ff ff7c 	bl	8009d68 <std>
 8009e70:	2202      	movs	r2, #2
 8009e72:	2112      	movs	r1, #18
 8009e74:	68e0      	ldr	r0, [r4, #12]
 8009e76:	f7ff ff77 	bl	8009d68 <std>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	61a3      	str	r3, [r4, #24]
 8009e7e:	e7d1      	b.n	8009e24 <__sinit+0xc>
 8009e80:	0800bd44 	.word	0x0800bd44
 8009e84:	08009db1 	.word	0x08009db1

08009e88 <__sfp>:
 8009e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8a:	4607      	mov	r7, r0
 8009e8c:	f7ff ffac 	bl	8009de8 <__sfp_lock_acquire>
 8009e90:	4b1e      	ldr	r3, [pc, #120]	; (8009f0c <__sfp+0x84>)
 8009e92:	681e      	ldr	r6, [r3, #0]
 8009e94:	69b3      	ldr	r3, [r6, #24]
 8009e96:	b913      	cbnz	r3, 8009e9e <__sfp+0x16>
 8009e98:	4630      	mov	r0, r6
 8009e9a:	f7ff ffbd 	bl	8009e18 <__sinit>
 8009e9e:	3648      	adds	r6, #72	; 0x48
 8009ea0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	d503      	bpl.n	8009eb0 <__sfp+0x28>
 8009ea8:	6833      	ldr	r3, [r6, #0]
 8009eaa:	b30b      	cbz	r3, 8009ef0 <__sfp+0x68>
 8009eac:	6836      	ldr	r6, [r6, #0]
 8009eae:	e7f7      	b.n	8009ea0 <__sfp+0x18>
 8009eb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009eb4:	b9d5      	cbnz	r5, 8009eec <__sfp+0x64>
 8009eb6:	4b16      	ldr	r3, [pc, #88]	; (8009f10 <__sfp+0x88>)
 8009eb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ebc:	60e3      	str	r3, [r4, #12]
 8009ebe:	6665      	str	r5, [r4, #100]	; 0x64
 8009ec0:	f000 fbb2 	bl	800a628 <__retarget_lock_init_recursive>
 8009ec4:	f7ff ff96 	bl	8009df4 <__sfp_lock_release>
 8009ec8:	2208      	movs	r2, #8
 8009eca:	4629      	mov	r1, r5
 8009ecc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ed0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ed4:	6025      	str	r5, [r4, #0]
 8009ed6:	61a5      	str	r5, [r4, #24]
 8009ed8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009edc:	f7fd f994 	bl	8007208 <memset>
 8009ee0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ee4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ee8:	4620      	mov	r0, r4
 8009eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eec:	3468      	adds	r4, #104	; 0x68
 8009eee:	e7d9      	b.n	8009ea4 <__sfp+0x1c>
 8009ef0:	2104      	movs	r1, #4
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	f7ff ff62 	bl	8009dbc <__sfmoreglue>
 8009ef8:	4604      	mov	r4, r0
 8009efa:	6030      	str	r0, [r6, #0]
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d1d5      	bne.n	8009eac <__sfp+0x24>
 8009f00:	f7ff ff78 	bl	8009df4 <__sfp_lock_release>
 8009f04:	230c      	movs	r3, #12
 8009f06:	603b      	str	r3, [r7, #0]
 8009f08:	e7ee      	b.n	8009ee8 <__sfp+0x60>
 8009f0a:	bf00      	nop
 8009f0c:	0800bd44 	.word	0x0800bd44
 8009f10:	ffff0001 	.word	0xffff0001

08009f14 <_fwalk_reent>:
 8009f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f18:	4606      	mov	r6, r0
 8009f1a:	4688      	mov	r8, r1
 8009f1c:	2700      	movs	r7, #0
 8009f1e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f26:	f1b9 0901 	subs.w	r9, r9, #1
 8009f2a:	d505      	bpl.n	8009f38 <_fwalk_reent+0x24>
 8009f2c:	6824      	ldr	r4, [r4, #0]
 8009f2e:	2c00      	cmp	r4, #0
 8009f30:	d1f7      	bne.n	8009f22 <_fwalk_reent+0xe>
 8009f32:	4638      	mov	r0, r7
 8009f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f38:	89ab      	ldrh	r3, [r5, #12]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d907      	bls.n	8009f4e <_fwalk_reent+0x3a>
 8009f3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f42:	3301      	adds	r3, #1
 8009f44:	d003      	beq.n	8009f4e <_fwalk_reent+0x3a>
 8009f46:	4629      	mov	r1, r5
 8009f48:	4630      	mov	r0, r6
 8009f4a:	47c0      	blx	r8
 8009f4c:	4307      	orrs	r7, r0
 8009f4e:	3568      	adds	r5, #104	; 0x68
 8009f50:	e7e9      	b.n	8009f26 <_fwalk_reent+0x12>

08009f52 <rshift>:
 8009f52:	6903      	ldr	r3, [r0, #16]
 8009f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f58:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009f5c:	f100 0414 	add.w	r4, r0, #20
 8009f60:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009f64:	dd46      	ble.n	8009ff4 <rshift+0xa2>
 8009f66:	f011 011f 	ands.w	r1, r1, #31
 8009f6a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009f6e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009f72:	d10c      	bne.n	8009f8e <rshift+0x3c>
 8009f74:	4629      	mov	r1, r5
 8009f76:	f100 0710 	add.w	r7, r0, #16
 8009f7a:	42b1      	cmp	r1, r6
 8009f7c:	d335      	bcc.n	8009fea <rshift+0x98>
 8009f7e:	1a9b      	subs	r3, r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	1eea      	subs	r2, r5, #3
 8009f84:	4296      	cmp	r6, r2
 8009f86:	bf38      	it	cc
 8009f88:	2300      	movcc	r3, #0
 8009f8a:	4423      	add	r3, r4
 8009f8c:	e015      	b.n	8009fba <rshift+0x68>
 8009f8e:	46a1      	mov	r9, r4
 8009f90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f94:	f1c1 0820 	rsb	r8, r1, #32
 8009f98:	40cf      	lsrs	r7, r1
 8009f9a:	f105 0e04 	add.w	lr, r5, #4
 8009f9e:	4576      	cmp	r6, lr
 8009fa0:	46f4      	mov	ip, lr
 8009fa2:	d816      	bhi.n	8009fd2 <rshift+0x80>
 8009fa4:	1a9a      	subs	r2, r3, r2
 8009fa6:	0092      	lsls	r2, r2, #2
 8009fa8:	3a04      	subs	r2, #4
 8009faa:	3501      	adds	r5, #1
 8009fac:	42ae      	cmp	r6, r5
 8009fae:	bf38      	it	cc
 8009fb0:	2200      	movcc	r2, #0
 8009fb2:	18a3      	adds	r3, r4, r2
 8009fb4:	50a7      	str	r7, [r4, r2]
 8009fb6:	b107      	cbz	r7, 8009fba <rshift+0x68>
 8009fb8:	3304      	adds	r3, #4
 8009fba:	42a3      	cmp	r3, r4
 8009fbc:	eba3 0204 	sub.w	r2, r3, r4
 8009fc0:	bf08      	it	eq
 8009fc2:	2300      	moveq	r3, #0
 8009fc4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009fc8:	6102      	str	r2, [r0, #16]
 8009fca:	bf08      	it	eq
 8009fcc:	6143      	streq	r3, [r0, #20]
 8009fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fd2:	f8dc c000 	ldr.w	ip, [ip]
 8009fd6:	fa0c fc08 	lsl.w	ip, ip, r8
 8009fda:	ea4c 0707 	orr.w	r7, ip, r7
 8009fde:	f849 7b04 	str.w	r7, [r9], #4
 8009fe2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009fe6:	40cf      	lsrs	r7, r1
 8009fe8:	e7d9      	b.n	8009f9e <rshift+0x4c>
 8009fea:	f851 cb04 	ldr.w	ip, [r1], #4
 8009fee:	f847 cf04 	str.w	ip, [r7, #4]!
 8009ff2:	e7c2      	b.n	8009f7a <rshift+0x28>
 8009ff4:	4623      	mov	r3, r4
 8009ff6:	e7e0      	b.n	8009fba <rshift+0x68>

08009ff8 <__hexdig_fun>:
 8009ff8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009ffc:	2b09      	cmp	r3, #9
 8009ffe:	d802      	bhi.n	800a006 <__hexdig_fun+0xe>
 800a000:	3820      	subs	r0, #32
 800a002:	b2c0      	uxtb	r0, r0
 800a004:	4770      	bx	lr
 800a006:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a00a:	2b05      	cmp	r3, #5
 800a00c:	d801      	bhi.n	800a012 <__hexdig_fun+0x1a>
 800a00e:	3847      	subs	r0, #71	; 0x47
 800a010:	e7f7      	b.n	800a002 <__hexdig_fun+0xa>
 800a012:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a016:	2b05      	cmp	r3, #5
 800a018:	d801      	bhi.n	800a01e <__hexdig_fun+0x26>
 800a01a:	3827      	subs	r0, #39	; 0x27
 800a01c:	e7f1      	b.n	800a002 <__hexdig_fun+0xa>
 800a01e:	2000      	movs	r0, #0
 800a020:	4770      	bx	lr
	...

0800a024 <__gethex>:
 800a024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a028:	b08b      	sub	sp, #44	; 0x2c
 800a02a:	9305      	str	r3, [sp, #20]
 800a02c:	4bb2      	ldr	r3, [pc, #712]	; (800a2f8 <__gethex+0x2d4>)
 800a02e:	9002      	str	r0, [sp, #8]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	468b      	mov	fp, r1
 800a034:	4618      	mov	r0, r3
 800a036:	4690      	mov	r8, r2
 800a038:	9303      	str	r3, [sp, #12]
 800a03a:	f7f6 f889 	bl	8000150 <strlen>
 800a03e:	4682      	mov	sl, r0
 800a040:	9b03      	ldr	r3, [sp, #12]
 800a042:	f8db 2000 	ldr.w	r2, [fp]
 800a046:	4403      	add	r3, r0
 800a048:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a04c:	9306      	str	r3, [sp, #24]
 800a04e:	1c93      	adds	r3, r2, #2
 800a050:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a054:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a058:	32fe      	adds	r2, #254	; 0xfe
 800a05a:	18d1      	adds	r1, r2, r3
 800a05c:	461f      	mov	r7, r3
 800a05e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a062:	9101      	str	r1, [sp, #4]
 800a064:	2830      	cmp	r0, #48	; 0x30
 800a066:	d0f8      	beq.n	800a05a <__gethex+0x36>
 800a068:	f7ff ffc6 	bl	8009ff8 <__hexdig_fun>
 800a06c:	4604      	mov	r4, r0
 800a06e:	2800      	cmp	r0, #0
 800a070:	d13a      	bne.n	800a0e8 <__gethex+0xc4>
 800a072:	4652      	mov	r2, sl
 800a074:	4638      	mov	r0, r7
 800a076:	9903      	ldr	r1, [sp, #12]
 800a078:	f001 fc29 	bl	800b8ce <strncmp>
 800a07c:	4605      	mov	r5, r0
 800a07e:	2800      	cmp	r0, #0
 800a080:	d166      	bne.n	800a150 <__gethex+0x12c>
 800a082:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a086:	eb07 060a 	add.w	r6, r7, sl
 800a08a:	f7ff ffb5 	bl	8009ff8 <__hexdig_fun>
 800a08e:	2800      	cmp	r0, #0
 800a090:	d060      	beq.n	800a154 <__gethex+0x130>
 800a092:	4633      	mov	r3, r6
 800a094:	7818      	ldrb	r0, [r3, #0]
 800a096:	461f      	mov	r7, r3
 800a098:	2830      	cmp	r0, #48	; 0x30
 800a09a:	f103 0301 	add.w	r3, r3, #1
 800a09e:	d0f9      	beq.n	800a094 <__gethex+0x70>
 800a0a0:	f7ff ffaa 	bl	8009ff8 <__hexdig_fun>
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	fab0 f480 	clz	r4, r0
 800a0aa:	4635      	mov	r5, r6
 800a0ac:	0964      	lsrs	r4, r4, #5
 800a0ae:	9301      	str	r3, [sp, #4]
 800a0b0:	463a      	mov	r2, r7
 800a0b2:	4616      	mov	r6, r2
 800a0b4:	7830      	ldrb	r0, [r6, #0]
 800a0b6:	3201      	adds	r2, #1
 800a0b8:	f7ff ff9e 	bl	8009ff8 <__hexdig_fun>
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	d1f8      	bne.n	800a0b2 <__gethex+0x8e>
 800a0c0:	4652      	mov	r2, sl
 800a0c2:	4630      	mov	r0, r6
 800a0c4:	9903      	ldr	r1, [sp, #12]
 800a0c6:	f001 fc02 	bl	800b8ce <strncmp>
 800a0ca:	b980      	cbnz	r0, 800a0ee <__gethex+0xca>
 800a0cc:	b94d      	cbnz	r5, 800a0e2 <__gethex+0xbe>
 800a0ce:	eb06 050a 	add.w	r5, r6, sl
 800a0d2:	462a      	mov	r2, r5
 800a0d4:	4616      	mov	r6, r2
 800a0d6:	7830      	ldrb	r0, [r6, #0]
 800a0d8:	3201      	adds	r2, #1
 800a0da:	f7ff ff8d 	bl	8009ff8 <__hexdig_fun>
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d1f8      	bne.n	800a0d4 <__gethex+0xb0>
 800a0e2:	1bad      	subs	r5, r5, r6
 800a0e4:	00ad      	lsls	r5, r5, #2
 800a0e6:	e004      	b.n	800a0f2 <__gethex+0xce>
 800a0e8:	2400      	movs	r4, #0
 800a0ea:	4625      	mov	r5, r4
 800a0ec:	e7e0      	b.n	800a0b0 <__gethex+0x8c>
 800a0ee:	2d00      	cmp	r5, #0
 800a0f0:	d1f7      	bne.n	800a0e2 <__gethex+0xbe>
 800a0f2:	7833      	ldrb	r3, [r6, #0]
 800a0f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a0f8:	2b50      	cmp	r3, #80	; 0x50
 800a0fa:	d139      	bne.n	800a170 <__gethex+0x14c>
 800a0fc:	7873      	ldrb	r3, [r6, #1]
 800a0fe:	2b2b      	cmp	r3, #43	; 0x2b
 800a100:	d02a      	beq.n	800a158 <__gethex+0x134>
 800a102:	2b2d      	cmp	r3, #45	; 0x2d
 800a104:	d02c      	beq.n	800a160 <__gethex+0x13c>
 800a106:	f04f 0900 	mov.w	r9, #0
 800a10a:	1c71      	adds	r1, r6, #1
 800a10c:	7808      	ldrb	r0, [r1, #0]
 800a10e:	f7ff ff73 	bl	8009ff8 <__hexdig_fun>
 800a112:	1e43      	subs	r3, r0, #1
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b18      	cmp	r3, #24
 800a118:	d82a      	bhi.n	800a170 <__gethex+0x14c>
 800a11a:	f1a0 0210 	sub.w	r2, r0, #16
 800a11e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a122:	f7ff ff69 	bl	8009ff8 <__hexdig_fun>
 800a126:	1e43      	subs	r3, r0, #1
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b18      	cmp	r3, #24
 800a12c:	d91b      	bls.n	800a166 <__gethex+0x142>
 800a12e:	f1b9 0f00 	cmp.w	r9, #0
 800a132:	d000      	beq.n	800a136 <__gethex+0x112>
 800a134:	4252      	negs	r2, r2
 800a136:	4415      	add	r5, r2
 800a138:	f8cb 1000 	str.w	r1, [fp]
 800a13c:	b1d4      	cbz	r4, 800a174 <__gethex+0x150>
 800a13e:	9b01      	ldr	r3, [sp, #4]
 800a140:	2b00      	cmp	r3, #0
 800a142:	bf14      	ite	ne
 800a144:	2700      	movne	r7, #0
 800a146:	2706      	moveq	r7, #6
 800a148:	4638      	mov	r0, r7
 800a14a:	b00b      	add	sp, #44	; 0x2c
 800a14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a150:	463e      	mov	r6, r7
 800a152:	4625      	mov	r5, r4
 800a154:	2401      	movs	r4, #1
 800a156:	e7cc      	b.n	800a0f2 <__gethex+0xce>
 800a158:	f04f 0900 	mov.w	r9, #0
 800a15c:	1cb1      	adds	r1, r6, #2
 800a15e:	e7d5      	b.n	800a10c <__gethex+0xe8>
 800a160:	f04f 0901 	mov.w	r9, #1
 800a164:	e7fa      	b.n	800a15c <__gethex+0x138>
 800a166:	230a      	movs	r3, #10
 800a168:	fb03 0202 	mla	r2, r3, r2, r0
 800a16c:	3a10      	subs	r2, #16
 800a16e:	e7d6      	b.n	800a11e <__gethex+0xfa>
 800a170:	4631      	mov	r1, r6
 800a172:	e7e1      	b.n	800a138 <__gethex+0x114>
 800a174:	4621      	mov	r1, r4
 800a176:	1bf3      	subs	r3, r6, r7
 800a178:	3b01      	subs	r3, #1
 800a17a:	2b07      	cmp	r3, #7
 800a17c:	dc0a      	bgt.n	800a194 <__gethex+0x170>
 800a17e:	9802      	ldr	r0, [sp, #8]
 800a180:	f000 faf0 	bl	800a764 <_Balloc>
 800a184:	4604      	mov	r4, r0
 800a186:	b940      	cbnz	r0, 800a19a <__gethex+0x176>
 800a188:	4602      	mov	r2, r0
 800a18a:	21de      	movs	r1, #222	; 0xde
 800a18c:	4b5b      	ldr	r3, [pc, #364]	; (800a2fc <__gethex+0x2d8>)
 800a18e:	485c      	ldr	r0, [pc, #368]	; (800a300 <__gethex+0x2dc>)
 800a190:	f001 fbd0 	bl	800b934 <__assert_func>
 800a194:	3101      	adds	r1, #1
 800a196:	105b      	asrs	r3, r3, #1
 800a198:	e7ef      	b.n	800a17a <__gethex+0x156>
 800a19a:	f04f 0b00 	mov.w	fp, #0
 800a19e:	f100 0914 	add.w	r9, r0, #20
 800a1a2:	f1ca 0301 	rsb	r3, sl, #1
 800a1a6:	f8cd 9010 	str.w	r9, [sp, #16]
 800a1aa:	f8cd b004 	str.w	fp, [sp, #4]
 800a1ae:	9308      	str	r3, [sp, #32]
 800a1b0:	42b7      	cmp	r7, r6
 800a1b2:	d33f      	bcc.n	800a234 <__gethex+0x210>
 800a1b4:	9f04      	ldr	r7, [sp, #16]
 800a1b6:	9b01      	ldr	r3, [sp, #4]
 800a1b8:	f847 3b04 	str.w	r3, [r7], #4
 800a1bc:	eba7 0709 	sub.w	r7, r7, r9
 800a1c0:	10bf      	asrs	r7, r7, #2
 800a1c2:	6127      	str	r7, [r4, #16]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f000 fbbf 	bl	800a948 <__hi0bits>
 800a1ca:	017f      	lsls	r7, r7, #5
 800a1cc:	f8d8 6000 	ldr.w	r6, [r8]
 800a1d0:	1a3f      	subs	r7, r7, r0
 800a1d2:	42b7      	cmp	r7, r6
 800a1d4:	dd62      	ble.n	800a29c <__gethex+0x278>
 800a1d6:	1bbf      	subs	r7, r7, r6
 800a1d8:	4639      	mov	r1, r7
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f000 ff59 	bl	800b092 <__any_on>
 800a1e0:	4682      	mov	sl, r0
 800a1e2:	b1a8      	cbz	r0, 800a210 <__gethex+0x1ec>
 800a1e4:	f04f 0a01 	mov.w	sl, #1
 800a1e8:	1e7b      	subs	r3, r7, #1
 800a1ea:	1159      	asrs	r1, r3, #5
 800a1ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a1f0:	f003 021f 	and.w	r2, r3, #31
 800a1f4:	fa0a f202 	lsl.w	r2, sl, r2
 800a1f8:	420a      	tst	r2, r1
 800a1fa:	d009      	beq.n	800a210 <__gethex+0x1ec>
 800a1fc:	4553      	cmp	r3, sl
 800a1fe:	dd05      	ble.n	800a20c <__gethex+0x1e8>
 800a200:	4620      	mov	r0, r4
 800a202:	1eb9      	subs	r1, r7, #2
 800a204:	f000 ff45 	bl	800b092 <__any_on>
 800a208:	2800      	cmp	r0, #0
 800a20a:	d144      	bne.n	800a296 <__gethex+0x272>
 800a20c:	f04f 0a02 	mov.w	sl, #2
 800a210:	4639      	mov	r1, r7
 800a212:	4620      	mov	r0, r4
 800a214:	f7ff fe9d 	bl	8009f52 <rshift>
 800a218:	443d      	add	r5, r7
 800a21a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a21e:	42ab      	cmp	r3, r5
 800a220:	da4a      	bge.n	800a2b8 <__gethex+0x294>
 800a222:	4621      	mov	r1, r4
 800a224:	9802      	ldr	r0, [sp, #8]
 800a226:	f000 fadd 	bl	800a7e4 <_Bfree>
 800a22a:	2300      	movs	r3, #0
 800a22c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a22e:	27a3      	movs	r7, #163	; 0xa3
 800a230:	6013      	str	r3, [r2, #0]
 800a232:	e789      	b.n	800a148 <__gethex+0x124>
 800a234:	1e73      	subs	r3, r6, #1
 800a236:	9a06      	ldr	r2, [sp, #24]
 800a238:	9307      	str	r3, [sp, #28]
 800a23a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a23e:	4293      	cmp	r3, r2
 800a240:	d019      	beq.n	800a276 <__gethex+0x252>
 800a242:	f1bb 0f20 	cmp.w	fp, #32
 800a246:	d107      	bne.n	800a258 <__gethex+0x234>
 800a248:	9b04      	ldr	r3, [sp, #16]
 800a24a:	9a01      	ldr	r2, [sp, #4]
 800a24c:	f843 2b04 	str.w	r2, [r3], #4
 800a250:	9304      	str	r3, [sp, #16]
 800a252:	2300      	movs	r3, #0
 800a254:	469b      	mov	fp, r3
 800a256:	9301      	str	r3, [sp, #4]
 800a258:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a25c:	f7ff fecc 	bl	8009ff8 <__hexdig_fun>
 800a260:	9b01      	ldr	r3, [sp, #4]
 800a262:	f000 000f 	and.w	r0, r0, #15
 800a266:	fa00 f00b 	lsl.w	r0, r0, fp
 800a26a:	4303      	orrs	r3, r0
 800a26c:	9301      	str	r3, [sp, #4]
 800a26e:	f10b 0b04 	add.w	fp, fp, #4
 800a272:	9b07      	ldr	r3, [sp, #28]
 800a274:	e00d      	b.n	800a292 <__gethex+0x26e>
 800a276:	9a08      	ldr	r2, [sp, #32]
 800a278:	1e73      	subs	r3, r6, #1
 800a27a:	4413      	add	r3, r2
 800a27c:	42bb      	cmp	r3, r7
 800a27e:	d3e0      	bcc.n	800a242 <__gethex+0x21e>
 800a280:	4618      	mov	r0, r3
 800a282:	4652      	mov	r2, sl
 800a284:	9903      	ldr	r1, [sp, #12]
 800a286:	9309      	str	r3, [sp, #36]	; 0x24
 800a288:	f001 fb21 	bl	800b8ce <strncmp>
 800a28c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28e:	2800      	cmp	r0, #0
 800a290:	d1d7      	bne.n	800a242 <__gethex+0x21e>
 800a292:	461e      	mov	r6, r3
 800a294:	e78c      	b.n	800a1b0 <__gethex+0x18c>
 800a296:	f04f 0a03 	mov.w	sl, #3
 800a29a:	e7b9      	b.n	800a210 <__gethex+0x1ec>
 800a29c:	da09      	bge.n	800a2b2 <__gethex+0x28e>
 800a29e:	1bf7      	subs	r7, r6, r7
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	463a      	mov	r2, r7
 800a2a4:	9802      	ldr	r0, [sp, #8]
 800a2a6:	f000 fcb5 	bl	800ac14 <__lshift>
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	1bed      	subs	r5, r5, r7
 800a2ae:	f100 0914 	add.w	r9, r0, #20
 800a2b2:	f04f 0a00 	mov.w	sl, #0
 800a2b6:	e7b0      	b.n	800a21a <__gethex+0x1f6>
 800a2b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a2bc:	42a8      	cmp	r0, r5
 800a2be:	dd72      	ble.n	800a3a6 <__gethex+0x382>
 800a2c0:	1b45      	subs	r5, r0, r5
 800a2c2:	42ae      	cmp	r6, r5
 800a2c4:	dc35      	bgt.n	800a332 <__gethex+0x30e>
 800a2c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	d029      	beq.n	800a322 <__gethex+0x2fe>
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	d02b      	beq.n	800a32a <__gethex+0x306>
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d11c      	bne.n	800a310 <__gethex+0x2ec>
 800a2d6:	42ae      	cmp	r6, r5
 800a2d8:	d11a      	bne.n	800a310 <__gethex+0x2ec>
 800a2da:	2e01      	cmp	r6, #1
 800a2dc:	d112      	bne.n	800a304 <__gethex+0x2e0>
 800a2de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a2e2:	9a05      	ldr	r2, [sp, #20]
 800a2e4:	2762      	movs	r7, #98	; 0x62
 800a2e6:	6013      	str	r3, [r2, #0]
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	6123      	str	r3, [r4, #16]
 800a2ec:	f8c9 3000 	str.w	r3, [r9]
 800a2f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2f2:	601c      	str	r4, [r3, #0]
 800a2f4:	e728      	b.n	800a148 <__gethex+0x124>
 800a2f6:	bf00      	nop
 800a2f8:	0800c034 	.word	0x0800c034
 800a2fc:	0800bf58 	.word	0x0800bf58
 800a300:	0800bfcc 	.word	0x0800bfcc
 800a304:	4620      	mov	r0, r4
 800a306:	1e71      	subs	r1, r6, #1
 800a308:	f000 fec3 	bl	800b092 <__any_on>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d1e6      	bne.n	800a2de <__gethex+0x2ba>
 800a310:	4621      	mov	r1, r4
 800a312:	9802      	ldr	r0, [sp, #8]
 800a314:	f000 fa66 	bl	800a7e4 <_Bfree>
 800a318:	2300      	movs	r3, #0
 800a31a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a31c:	2750      	movs	r7, #80	; 0x50
 800a31e:	6013      	str	r3, [r2, #0]
 800a320:	e712      	b.n	800a148 <__gethex+0x124>
 800a322:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1f3      	bne.n	800a310 <__gethex+0x2ec>
 800a328:	e7d9      	b.n	800a2de <__gethex+0x2ba>
 800a32a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1d6      	bne.n	800a2de <__gethex+0x2ba>
 800a330:	e7ee      	b.n	800a310 <__gethex+0x2ec>
 800a332:	1e6f      	subs	r7, r5, #1
 800a334:	f1ba 0f00 	cmp.w	sl, #0
 800a338:	d132      	bne.n	800a3a0 <__gethex+0x37c>
 800a33a:	b127      	cbz	r7, 800a346 <__gethex+0x322>
 800a33c:	4639      	mov	r1, r7
 800a33e:	4620      	mov	r0, r4
 800a340:	f000 fea7 	bl	800b092 <__any_on>
 800a344:	4682      	mov	sl, r0
 800a346:	2101      	movs	r1, #1
 800a348:	117b      	asrs	r3, r7, #5
 800a34a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a34e:	f007 071f 	and.w	r7, r7, #31
 800a352:	fa01 f707 	lsl.w	r7, r1, r7
 800a356:	421f      	tst	r7, r3
 800a358:	f04f 0702 	mov.w	r7, #2
 800a35c:	4629      	mov	r1, r5
 800a35e:	4620      	mov	r0, r4
 800a360:	bf18      	it	ne
 800a362:	f04a 0a02 	orrne.w	sl, sl, #2
 800a366:	1b76      	subs	r6, r6, r5
 800a368:	f7ff fdf3 	bl	8009f52 <rshift>
 800a36c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a370:	f1ba 0f00 	cmp.w	sl, #0
 800a374:	d048      	beq.n	800a408 <__gethex+0x3e4>
 800a376:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d015      	beq.n	800a3aa <__gethex+0x386>
 800a37e:	2b03      	cmp	r3, #3
 800a380:	d017      	beq.n	800a3b2 <__gethex+0x38e>
 800a382:	2b01      	cmp	r3, #1
 800a384:	d109      	bne.n	800a39a <__gethex+0x376>
 800a386:	f01a 0f02 	tst.w	sl, #2
 800a38a:	d006      	beq.n	800a39a <__gethex+0x376>
 800a38c:	f8d9 0000 	ldr.w	r0, [r9]
 800a390:	ea4a 0a00 	orr.w	sl, sl, r0
 800a394:	f01a 0f01 	tst.w	sl, #1
 800a398:	d10e      	bne.n	800a3b8 <__gethex+0x394>
 800a39a:	f047 0710 	orr.w	r7, r7, #16
 800a39e:	e033      	b.n	800a408 <__gethex+0x3e4>
 800a3a0:	f04f 0a01 	mov.w	sl, #1
 800a3a4:	e7cf      	b.n	800a346 <__gethex+0x322>
 800a3a6:	2701      	movs	r7, #1
 800a3a8:	e7e2      	b.n	800a370 <__gethex+0x34c>
 800a3aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3ac:	f1c3 0301 	rsb	r3, r3, #1
 800a3b0:	9315      	str	r3, [sp, #84]	; 0x54
 800a3b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d0f0      	beq.n	800a39a <__gethex+0x376>
 800a3b8:	f04f 0c00 	mov.w	ip, #0
 800a3bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a3c0:	f104 0314 	add.w	r3, r4, #20
 800a3c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a3c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a3d6:	d01c      	beq.n	800a412 <__gethex+0x3ee>
 800a3d8:	3201      	adds	r2, #1
 800a3da:	6002      	str	r2, [r0, #0]
 800a3dc:	2f02      	cmp	r7, #2
 800a3de:	f104 0314 	add.w	r3, r4, #20
 800a3e2:	d13d      	bne.n	800a460 <__gethex+0x43c>
 800a3e4:	f8d8 2000 	ldr.w	r2, [r8]
 800a3e8:	3a01      	subs	r2, #1
 800a3ea:	42b2      	cmp	r2, r6
 800a3ec:	d10a      	bne.n	800a404 <__gethex+0x3e0>
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	1171      	asrs	r1, r6, #5
 800a3f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a3f6:	f006 061f 	and.w	r6, r6, #31
 800a3fa:	fa02 f606 	lsl.w	r6, r2, r6
 800a3fe:	421e      	tst	r6, r3
 800a400:	bf18      	it	ne
 800a402:	4617      	movne	r7, r2
 800a404:	f047 0720 	orr.w	r7, r7, #32
 800a408:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a40a:	601c      	str	r4, [r3, #0]
 800a40c:	9b05      	ldr	r3, [sp, #20]
 800a40e:	601d      	str	r5, [r3, #0]
 800a410:	e69a      	b.n	800a148 <__gethex+0x124>
 800a412:	4299      	cmp	r1, r3
 800a414:	f843 cc04 	str.w	ip, [r3, #-4]
 800a418:	d8d8      	bhi.n	800a3cc <__gethex+0x3a8>
 800a41a:	68a3      	ldr	r3, [r4, #8]
 800a41c:	459b      	cmp	fp, r3
 800a41e:	db17      	blt.n	800a450 <__gethex+0x42c>
 800a420:	6861      	ldr	r1, [r4, #4]
 800a422:	9802      	ldr	r0, [sp, #8]
 800a424:	3101      	adds	r1, #1
 800a426:	f000 f99d 	bl	800a764 <_Balloc>
 800a42a:	4681      	mov	r9, r0
 800a42c:	b918      	cbnz	r0, 800a436 <__gethex+0x412>
 800a42e:	4602      	mov	r2, r0
 800a430:	2184      	movs	r1, #132	; 0x84
 800a432:	4b19      	ldr	r3, [pc, #100]	; (800a498 <__gethex+0x474>)
 800a434:	e6ab      	b.n	800a18e <__gethex+0x16a>
 800a436:	6922      	ldr	r2, [r4, #16]
 800a438:	f104 010c 	add.w	r1, r4, #12
 800a43c:	3202      	adds	r2, #2
 800a43e:	0092      	lsls	r2, r2, #2
 800a440:	300c      	adds	r0, #12
 800a442:	f000 f981 	bl	800a748 <memcpy>
 800a446:	4621      	mov	r1, r4
 800a448:	9802      	ldr	r0, [sp, #8]
 800a44a:	f000 f9cb 	bl	800a7e4 <_Bfree>
 800a44e:	464c      	mov	r4, r9
 800a450:	6923      	ldr	r3, [r4, #16]
 800a452:	1c5a      	adds	r2, r3, #1
 800a454:	6122      	str	r2, [r4, #16]
 800a456:	2201      	movs	r2, #1
 800a458:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a45c:	615a      	str	r2, [r3, #20]
 800a45e:	e7bd      	b.n	800a3dc <__gethex+0x3b8>
 800a460:	6922      	ldr	r2, [r4, #16]
 800a462:	455a      	cmp	r2, fp
 800a464:	dd0b      	ble.n	800a47e <__gethex+0x45a>
 800a466:	2101      	movs	r1, #1
 800a468:	4620      	mov	r0, r4
 800a46a:	f7ff fd72 	bl	8009f52 <rshift>
 800a46e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a472:	3501      	adds	r5, #1
 800a474:	42ab      	cmp	r3, r5
 800a476:	f6ff aed4 	blt.w	800a222 <__gethex+0x1fe>
 800a47a:	2701      	movs	r7, #1
 800a47c:	e7c2      	b.n	800a404 <__gethex+0x3e0>
 800a47e:	f016 061f 	ands.w	r6, r6, #31
 800a482:	d0fa      	beq.n	800a47a <__gethex+0x456>
 800a484:	4453      	add	r3, sl
 800a486:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a48a:	f000 fa5d 	bl	800a948 <__hi0bits>
 800a48e:	f1c6 0620 	rsb	r6, r6, #32
 800a492:	42b0      	cmp	r0, r6
 800a494:	dbe7      	blt.n	800a466 <__gethex+0x442>
 800a496:	e7f0      	b.n	800a47a <__gethex+0x456>
 800a498:	0800bf58 	.word	0x0800bf58

0800a49c <L_shift>:
 800a49c:	f1c2 0208 	rsb	r2, r2, #8
 800a4a0:	0092      	lsls	r2, r2, #2
 800a4a2:	b570      	push	{r4, r5, r6, lr}
 800a4a4:	f1c2 0620 	rsb	r6, r2, #32
 800a4a8:	6843      	ldr	r3, [r0, #4]
 800a4aa:	6804      	ldr	r4, [r0, #0]
 800a4ac:	fa03 f506 	lsl.w	r5, r3, r6
 800a4b0:	432c      	orrs	r4, r5
 800a4b2:	40d3      	lsrs	r3, r2
 800a4b4:	6004      	str	r4, [r0, #0]
 800a4b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a4ba:	4288      	cmp	r0, r1
 800a4bc:	d3f4      	bcc.n	800a4a8 <L_shift+0xc>
 800a4be:	bd70      	pop	{r4, r5, r6, pc}

0800a4c0 <__match>:
 800a4c0:	b530      	push	{r4, r5, lr}
 800a4c2:	6803      	ldr	r3, [r0, #0]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ca:	b914      	cbnz	r4, 800a4d2 <__match+0x12>
 800a4cc:	6003      	str	r3, [r0, #0]
 800a4ce:	2001      	movs	r0, #1
 800a4d0:	bd30      	pop	{r4, r5, pc}
 800a4d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a4da:	2d19      	cmp	r5, #25
 800a4dc:	bf98      	it	ls
 800a4de:	3220      	addls	r2, #32
 800a4e0:	42a2      	cmp	r2, r4
 800a4e2:	d0f0      	beq.n	800a4c6 <__match+0x6>
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	e7f3      	b.n	800a4d0 <__match+0x10>

0800a4e8 <__hexnan>:
 800a4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ec:	2500      	movs	r5, #0
 800a4ee:	680b      	ldr	r3, [r1, #0]
 800a4f0:	4682      	mov	sl, r0
 800a4f2:	115e      	asrs	r6, r3, #5
 800a4f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a4f8:	f013 031f 	ands.w	r3, r3, #31
 800a4fc:	bf18      	it	ne
 800a4fe:	3604      	addne	r6, #4
 800a500:	1f37      	subs	r7, r6, #4
 800a502:	46b9      	mov	r9, r7
 800a504:	463c      	mov	r4, r7
 800a506:	46ab      	mov	fp, r5
 800a508:	b087      	sub	sp, #28
 800a50a:	4690      	mov	r8, r2
 800a50c:	6802      	ldr	r2, [r0, #0]
 800a50e:	9301      	str	r3, [sp, #4]
 800a510:	f846 5c04 	str.w	r5, [r6, #-4]
 800a514:	9502      	str	r5, [sp, #8]
 800a516:	7851      	ldrb	r1, [r2, #1]
 800a518:	1c53      	adds	r3, r2, #1
 800a51a:	9303      	str	r3, [sp, #12]
 800a51c:	b341      	cbz	r1, 800a570 <__hexnan+0x88>
 800a51e:	4608      	mov	r0, r1
 800a520:	9205      	str	r2, [sp, #20]
 800a522:	9104      	str	r1, [sp, #16]
 800a524:	f7ff fd68 	bl	8009ff8 <__hexdig_fun>
 800a528:	2800      	cmp	r0, #0
 800a52a:	d14f      	bne.n	800a5cc <__hexnan+0xe4>
 800a52c:	9904      	ldr	r1, [sp, #16]
 800a52e:	9a05      	ldr	r2, [sp, #20]
 800a530:	2920      	cmp	r1, #32
 800a532:	d818      	bhi.n	800a566 <__hexnan+0x7e>
 800a534:	9b02      	ldr	r3, [sp, #8]
 800a536:	459b      	cmp	fp, r3
 800a538:	dd13      	ble.n	800a562 <__hexnan+0x7a>
 800a53a:	454c      	cmp	r4, r9
 800a53c:	d206      	bcs.n	800a54c <__hexnan+0x64>
 800a53e:	2d07      	cmp	r5, #7
 800a540:	dc04      	bgt.n	800a54c <__hexnan+0x64>
 800a542:	462a      	mov	r2, r5
 800a544:	4649      	mov	r1, r9
 800a546:	4620      	mov	r0, r4
 800a548:	f7ff ffa8 	bl	800a49c <L_shift>
 800a54c:	4544      	cmp	r4, r8
 800a54e:	d950      	bls.n	800a5f2 <__hexnan+0x10a>
 800a550:	2300      	movs	r3, #0
 800a552:	f1a4 0904 	sub.w	r9, r4, #4
 800a556:	f844 3c04 	str.w	r3, [r4, #-4]
 800a55a:	461d      	mov	r5, r3
 800a55c:	464c      	mov	r4, r9
 800a55e:	f8cd b008 	str.w	fp, [sp, #8]
 800a562:	9a03      	ldr	r2, [sp, #12]
 800a564:	e7d7      	b.n	800a516 <__hexnan+0x2e>
 800a566:	2929      	cmp	r1, #41	; 0x29
 800a568:	d156      	bne.n	800a618 <__hexnan+0x130>
 800a56a:	3202      	adds	r2, #2
 800a56c:	f8ca 2000 	str.w	r2, [sl]
 800a570:	f1bb 0f00 	cmp.w	fp, #0
 800a574:	d050      	beq.n	800a618 <__hexnan+0x130>
 800a576:	454c      	cmp	r4, r9
 800a578:	d206      	bcs.n	800a588 <__hexnan+0xa0>
 800a57a:	2d07      	cmp	r5, #7
 800a57c:	dc04      	bgt.n	800a588 <__hexnan+0xa0>
 800a57e:	462a      	mov	r2, r5
 800a580:	4649      	mov	r1, r9
 800a582:	4620      	mov	r0, r4
 800a584:	f7ff ff8a 	bl	800a49c <L_shift>
 800a588:	4544      	cmp	r4, r8
 800a58a:	d934      	bls.n	800a5f6 <__hexnan+0x10e>
 800a58c:	4623      	mov	r3, r4
 800a58e:	f1a8 0204 	sub.w	r2, r8, #4
 800a592:	f853 1b04 	ldr.w	r1, [r3], #4
 800a596:	429f      	cmp	r7, r3
 800a598:	f842 1f04 	str.w	r1, [r2, #4]!
 800a59c:	d2f9      	bcs.n	800a592 <__hexnan+0xaa>
 800a59e:	1b3b      	subs	r3, r7, r4
 800a5a0:	f023 0303 	bic.w	r3, r3, #3
 800a5a4:	3304      	adds	r3, #4
 800a5a6:	3401      	adds	r4, #1
 800a5a8:	3e03      	subs	r6, #3
 800a5aa:	42b4      	cmp	r4, r6
 800a5ac:	bf88      	it	hi
 800a5ae:	2304      	movhi	r3, #4
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	4443      	add	r3, r8
 800a5b4:	f843 2b04 	str.w	r2, [r3], #4
 800a5b8:	429f      	cmp	r7, r3
 800a5ba:	d2fb      	bcs.n	800a5b4 <__hexnan+0xcc>
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	b91b      	cbnz	r3, 800a5c8 <__hexnan+0xe0>
 800a5c0:	4547      	cmp	r7, r8
 800a5c2:	d127      	bne.n	800a614 <__hexnan+0x12c>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	603b      	str	r3, [r7, #0]
 800a5c8:	2005      	movs	r0, #5
 800a5ca:	e026      	b.n	800a61a <__hexnan+0x132>
 800a5cc:	3501      	adds	r5, #1
 800a5ce:	2d08      	cmp	r5, #8
 800a5d0:	f10b 0b01 	add.w	fp, fp, #1
 800a5d4:	dd06      	ble.n	800a5e4 <__hexnan+0xfc>
 800a5d6:	4544      	cmp	r4, r8
 800a5d8:	d9c3      	bls.n	800a562 <__hexnan+0x7a>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	2501      	movs	r5, #1
 800a5de:	f844 3c04 	str.w	r3, [r4, #-4]
 800a5e2:	3c04      	subs	r4, #4
 800a5e4:	6822      	ldr	r2, [r4, #0]
 800a5e6:	f000 000f 	and.w	r0, r0, #15
 800a5ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a5ee:	6022      	str	r2, [r4, #0]
 800a5f0:	e7b7      	b.n	800a562 <__hexnan+0x7a>
 800a5f2:	2508      	movs	r5, #8
 800a5f4:	e7b5      	b.n	800a562 <__hexnan+0x7a>
 800a5f6:	9b01      	ldr	r3, [sp, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d0df      	beq.n	800a5bc <__hexnan+0xd4>
 800a5fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a600:	f1c3 0320 	rsb	r3, r3, #32
 800a604:	fa22 f303 	lsr.w	r3, r2, r3
 800a608:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a60c:	401a      	ands	r2, r3
 800a60e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a612:	e7d3      	b.n	800a5bc <__hexnan+0xd4>
 800a614:	3f04      	subs	r7, #4
 800a616:	e7d1      	b.n	800a5bc <__hexnan+0xd4>
 800a618:	2004      	movs	r0, #4
 800a61a:	b007      	add	sp, #28
 800a61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a620 <_localeconv_r>:
 800a620:	4800      	ldr	r0, [pc, #0]	; (800a624 <_localeconv_r+0x4>)
 800a622:	4770      	bx	lr
 800a624:	200002e4 	.word	0x200002e4

0800a628 <__retarget_lock_init_recursive>:
 800a628:	4770      	bx	lr

0800a62a <__retarget_lock_acquire_recursive>:
 800a62a:	4770      	bx	lr

0800a62c <__retarget_lock_release_recursive>:
 800a62c:	4770      	bx	lr

0800a62e <__swhatbuf_r>:
 800a62e:	b570      	push	{r4, r5, r6, lr}
 800a630:	460e      	mov	r6, r1
 800a632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a636:	4614      	mov	r4, r2
 800a638:	2900      	cmp	r1, #0
 800a63a:	461d      	mov	r5, r3
 800a63c:	b096      	sub	sp, #88	; 0x58
 800a63e:	da08      	bge.n	800a652 <__swhatbuf_r+0x24>
 800a640:	2200      	movs	r2, #0
 800a642:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a646:	602a      	str	r2, [r5, #0]
 800a648:	061a      	lsls	r2, r3, #24
 800a64a:	d410      	bmi.n	800a66e <__swhatbuf_r+0x40>
 800a64c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a650:	e00e      	b.n	800a670 <__swhatbuf_r+0x42>
 800a652:	466a      	mov	r2, sp
 800a654:	f001 f9ae 	bl	800b9b4 <_fstat_r>
 800a658:	2800      	cmp	r0, #0
 800a65a:	dbf1      	blt.n	800a640 <__swhatbuf_r+0x12>
 800a65c:	9a01      	ldr	r2, [sp, #4]
 800a65e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a662:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a666:	425a      	negs	r2, r3
 800a668:	415a      	adcs	r2, r3
 800a66a:	602a      	str	r2, [r5, #0]
 800a66c:	e7ee      	b.n	800a64c <__swhatbuf_r+0x1e>
 800a66e:	2340      	movs	r3, #64	; 0x40
 800a670:	2000      	movs	r0, #0
 800a672:	6023      	str	r3, [r4, #0]
 800a674:	b016      	add	sp, #88	; 0x58
 800a676:	bd70      	pop	{r4, r5, r6, pc}

0800a678 <__smakebuf_r>:
 800a678:	898b      	ldrh	r3, [r1, #12]
 800a67a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a67c:	079d      	lsls	r5, r3, #30
 800a67e:	4606      	mov	r6, r0
 800a680:	460c      	mov	r4, r1
 800a682:	d507      	bpl.n	800a694 <__smakebuf_r+0x1c>
 800a684:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	6123      	str	r3, [r4, #16]
 800a68c:	2301      	movs	r3, #1
 800a68e:	6163      	str	r3, [r4, #20]
 800a690:	b002      	add	sp, #8
 800a692:	bd70      	pop	{r4, r5, r6, pc}
 800a694:	466a      	mov	r2, sp
 800a696:	ab01      	add	r3, sp, #4
 800a698:	f7ff ffc9 	bl	800a62e <__swhatbuf_r>
 800a69c:	9900      	ldr	r1, [sp, #0]
 800a69e:	4605      	mov	r5, r0
 800a6a0:	4630      	mov	r0, r6
 800a6a2:	f000 fd93 	bl	800b1cc <_malloc_r>
 800a6a6:	b948      	cbnz	r0, 800a6bc <__smakebuf_r+0x44>
 800a6a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ac:	059a      	lsls	r2, r3, #22
 800a6ae:	d4ef      	bmi.n	800a690 <__smakebuf_r+0x18>
 800a6b0:	f023 0303 	bic.w	r3, r3, #3
 800a6b4:	f043 0302 	orr.w	r3, r3, #2
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	e7e3      	b.n	800a684 <__smakebuf_r+0xc>
 800a6bc:	4b0d      	ldr	r3, [pc, #52]	; (800a6f4 <__smakebuf_r+0x7c>)
 800a6be:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6c0:	89a3      	ldrh	r3, [r4, #12]
 800a6c2:	6020      	str	r0, [r4, #0]
 800a6c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6c8:	81a3      	strh	r3, [r4, #12]
 800a6ca:	9b00      	ldr	r3, [sp, #0]
 800a6cc:	6120      	str	r0, [r4, #16]
 800a6ce:	6163      	str	r3, [r4, #20]
 800a6d0:	9b01      	ldr	r3, [sp, #4]
 800a6d2:	b15b      	cbz	r3, 800a6ec <__smakebuf_r+0x74>
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6da:	f001 f97d 	bl	800b9d8 <_isatty_r>
 800a6de:	b128      	cbz	r0, 800a6ec <__smakebuf_r+0x74>
 800a6e0:	89a3      	ldrh	r3, [r4, #12]
 800a6e2:	f023 0303 	bic.w	r3, r3, #3
 800a6e6:	f043 0301 	orr.w	r3, r3, #1
 800a6ea:	81a3      	strh	r3, [r4, #12]
 800a6ec:	89a0      	ldrh	r0, [r4, #12]
 800a6ee:	4305      	orrs	r5, r0
 800a6f0:	81a5      	strh	r5, [r4, #12]
 800a6f2:	e7cd      	b.n	800a690 <__smakebuf_r+0x18>
 800a6f4:	08009db1 	.word	0x08009db1

0800a6f8 <malloc>:
 800a6f8:	4b02      	ldr	r3, [pc, #8]	; (800a704 <malloc+0xc>)
 800a6fa:	4601      	mov	r1, r0
 800a6fc:	6818      	ldr	r0, [r3, #0]
 800a6fe:	f000 bd65 	b.w	800b1cc <_malloc_r>
 800a702:	bf00      	nop
 800a704:	2000018c 	.word	0x2000018c

0800a708 <__ascii_mbtowc>:
 800a708:	b082      	sub	sp, #8
 800a70a:	b901      	cbnz	r1, 800a70e <__ascii_mbtowc+0x6>
 800a70c:	a901      	add	r1, sp, #4
 800a70e:	b142      	cbz	r2, 800a722 <__ascii_mbtowc+0x1a>
 800a710:	b14b      	cbz	r3, 800a726 <__ascii_mbtowc+0x1e>
 800a712:	7813      	ldrb	r3, [r2, #0]
 800a714:	600b      	str	r3, [r1, #0]
 800a716:	7812      	ldrb	r2, [r2, #0]
 800a718:	1e10      	subs	r0, r2, #0
 800a71a:	bf18      	it	ne
 800a71c:	2001      	movne	r0, #1
 800a71e:	b002      	add	sp, #8
 800a720:	4770      	bx	lr
 800a722:	4610      	mov	r0, r2
 800a724:	e7fb      	b.n	800a71e <__ascii_mbtowc+0x16>
 800a726:	f06f 0001 	mvn.w	r0, #1
 800a72a:	e7f8      	b.n	800a71e <__ascii_mbtowc+0x16>

0800a72c <memchr>:
 800a72c:	4603      	mov	r3, r0
 800a72e:	b510      	push	{r4, lr}
 800a730:	b2c9      	uxtb	r1, r1
 800a732:	4402      	add	r2, r0
 800a734:	4293      	cmp	r3, r2
 800a736:	4618      	mov	r0, r3
 800a738:	d101      	bne.n	800a73e <memchr+0x12>
 800a73a:	2000      	movs	r0, #0
 800a73c:	e003      	b.n	800a746 <memchr+0x1a>
 800a73e:	7804      	ldrb	r4, [r0, #0]
 800a740:	3301      	adds	r3, #1
 800a742:	428c      	cmp	r4, r1
 800a744:	d1f6      	bne.n	800a734 <memchr+0x8>
 800a746:	bd10      	pop	{r4, pc}

0800a748 <memcpy>:
 800a748:	440a      	add	r2, r1
 800a74a:	4291      	cmp	r1, r2
 800a74c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a750:	d100      	bne.n	800a754 <memcpy+0xc>
 800a752:	4770      	bx	lr
 800a754:	b510      	push	{r4, lr}
 800a756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a75a:	4291      	cmp	r1, r2
 800a75c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a760:	d1f9      	bne.n	800a756 <memcpy+0xe>
 800a762:	bd10      	pop	{r4, pc}

0800a764 <_Balloc>:
 800a764:	b570      	push	{r4, r5, r6, lr}
 800a766:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a768:	4604      	mov	r4, r0
 800a76a:	460d      	mov	r5, r1
 800a76c:	b976      	cbnz	r6, 800a78c <_Balloc+0x28>
 800a76e:	2010      	movs	r0, #16
 800a770:	f7ff ffc2 	bl	800a6f8 <malloc>
 800a774:	4602      	mov	r2, r0
 800a776:	6260      	str	r0, [r4, #36]	; 0x24
 800a778:	b920      	cbnz	r0, 800a784 <_Balloc+0x20>
 800a77a:	2166      	movs	r1, #102	; 0x66
 800a77c:	4b17      	ldr	r3, [pc, #92]	; (800a7dc <_Balloc+0x78>)
 800a77e:	4818      	ldr	r0, [pc, #96]	; (800a7e0 <_Balloc+0x7c>)
 800a780:	f001 f8d8 	bl	800b934 <__assert_func>
 800a784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a788:	6006      	str	r6, [r0, #0]
 800a78a:	60c6      	str	r6, [r0, #12]
 800a78c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a78e:	68f3      	ldr	r3, [r6, #12]
 800a790:	b183      	cbz	r3, 800a7b4 <_Balloc+0x50>
 800a792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a79a:	b9b8      	cbnz	r0, 800a7cc <_Balloc+0x68>
 800a79c:	2101      	movs	r1, #1
 800a79e:	fa01 f605 	lsl.w	r6, r1, r5
 800a7a2:	1d72      	adds	r2, r6, #5
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	0092      	lsls	r2, r2, #2
 800a7a8:	f000 fc94 	bl	800b0d4 <_calloc_r>
 800a7ac:	b160      	cbz	r0, 800a7c8 <_Balloc+0x64>
 800a7ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7b2:	e00e      	b.n	800a7d2 <_Balloc+0x6e>
 800a7b4:	2221      	movs	r2, #33	; 0x21
 800a7b6:	2104      	movs	r1, #4
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f000 fc8b 	bl	800b0d4 <_calloc_r>
 800a7be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7c0:	60f0      	str	r0, [r6, #12]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d1e4      	bne.n	800a792 <_Balloc+0x2e>
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	bd70      	pop	{r4, r5, r6, pc}
 800a7cc:	6802      	ldr	r2, [r0, #0]
 800a7ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7d8:	e7f7      	b.n	800a7ca <_Balloc+0x66>
 800a7da:	bf00      	nop
 800a7dc:	0800bee6 	.word	0x0800bee6
 800a7e0:	0800c048 	.word	0x0800c048

0800a7e4 <_Bfree>:
 800a7e4:	b570      	push	{r4, r5, r6, lr}
 800a7e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7e8:	4605      	mov	r5, r0
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	b976      	cbnz	r6, 800a80c <_Bfree+0x28>
 800a7ee:	2010      	movs	r0, #16
 800a7f0:	f7ff ff82 	bl	800a6f8 <malloc>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	6268      	str	r0, [r5, #36]	; 0x24
 800a7f8:	b920      	cbnz	r0, 800a804 <_Bfree+0x20>
 800a7fa:	218a      	movs	r1, #138	; 0x8a
 800a7fc:	4b08      	ldr	r3, [pc, #32]	; (800a820 <_Bfree+0x3c>)
 800a7fe:	4809      	ldr	r0, [pc, #36]	; (800a824 <_Bfree+0x40>)
 800a800:	f001 f898 	bl	800b934 <__assert_func>
 800a804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a808:	6006      	str	r6, [r0, #0]
 800a80a:	60c6      	str	r6, [r0, #12]
 800a80c:	b13c      	cbz	r4, 800a81e <_Bfree+0x3a>
 800a80e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a810:	6862      	ldr	r2, [r4, #4]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a818:	6021      	str	r1, [r4, #0]
 800a81a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a81e:	bd70      	pop	{r4, r5, r6, pc}
 800a820:	0800bee6 	.word	0x0800bee6
 800a824:	0800c048 	.word	0x0800c048

0800a828 <__multadd>:
 800a828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a82c:	4607      	mov	r7, r0
 800a82e:	460c      	mov	r4, r1
 800a830:	461e      	mov	r6, r3
 800a832:	2000      	movs	r0, #0
 800a834:	690d      	ldr	r5, [r1, #16]
 800a836:	f101 0c14 	add.w	ip, r1, #20
 800a83a:	f8dc 3000 	ldr.w	r3, [ip]
 800a83e:	3001      	adds	r0, #1
 800a840:	b299      	uxth	r1, r3
 800a842:	fb02 6101 	mla	r1, r2, r1, r6
 800a846:	0c1e      	lsrs	r6, r3, #16
 800a848:	0c0b      	lsrs	r3, r1, #16
 800a84a:	fb02 3306 	mla	r3, r2, r6, r3
 800a84e:	b289      	uxth	r1, r1
 800a850:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a854:	4285      	cmp	r5, r0
 800a856:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a85a:	f84c 1b04 	str.w	r1, [ip], #4
 800a85e:	dcec      	bgt.n	800a83a <__multadd+0x12>
 800a860:	b30e      	cbz	r6, 800a8a6 <__multadd+0x7e>
 800a862:	68a3      	ldr	r3, [r4, #8]
 800a864:	42ab      	cmp	r3, r5
 800a866:	dc19      	bgt.n	800a89c <__multadd+0x74>
 800a868:	6861      	ldr	r1, [r4, #4]
 800a86a:	4638      	mov	r0, r7
 800a86c:	3101      	adds	r1, #1
 800a86e:	f7ff ff79 	bl	800a764 <_Balloc>
 800a872:	4680      	mov	r8, r0
 800a874:	b928      	cbnz	r0, 800a882 <__multadd+0x5a>
 800a876:	4602      	mov	r2, r0
 800a878:	21b5      	movs	r1, #181	; 0xb5
 800a87a:	4b0c      	ldr	r3, [pc, #48]	; (800a8ac <__multadd+0x84>)
 800a87c:	480c      	ldr	r0, [pc, #48]	; (800a8b0 <__multadd+0x88>)
 800a87e:	f001 f859 	bl	800b934 <__assert_func>
 800a882:	6922      	ldr	r2, [r4, #16]
 800a884:	f104 010c 	add.w	r1, r4, #12
 800a888:	3202      	adds	r2, #2
 800a88a:	0092      	lsls	r2, r2, #2
 800a88c:	300c      	adds	r0, #12
 800a88e:	f7ff ff5b 	bl	800a748 <memcpy>
 800a892:	4621      	mov	r1, r4
 800a894:	4638      	mov	r0, r7
 800a896:	f7ff ffa5 	bl	800a7e4 <_Bfree>
 800a89a:	4644      	mov	r4, r8
 800a89c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8a0:	3501      	adds	r5, #1
 800a8a2:	615e      	str	r6, [r3, #20]
 800a8a4:	6125      	str	r5, [r4, #16]
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ac:	0800bf58 	.word	0x0800bf58
 800a8b0:	0800c048 	.word	0x0800c048

0800a8b4 <__s2b>:
 800a8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8b8:	4615      	mov	r5, r2
 800a8ba:	2209      	movs	r2, #9
 800a8bc:	461f      	mov	r7, r3
 800a8be:	3308      	adds	r3, #8
 800a8c0:	460c      	mov	r4, r1
 800a8c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	db09      	blt.n	800a8e4 <__s2b+0x30>
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	f7ff ff47 	bl	800a764 <_Balloc>
 800a8d6:	b940      	cbnz	r0, 800a8ea <__s2b+0x36>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	21ce      	movs	r1, #206	; 0xce
 800a8dc:	4b18      	ldr	r3, [pc, #96]	; (800a940 <__s2b+0x8c>)
 800a8de:	4819      	ldr	r0, [pc, #100]	; (800a944 <__s2b+0x90>)
 800a8e0:	f001 f828 	bl	800b934 <__assert_func>
 800a8e4:	0052      	lsls	r2, r2, #1
 800a8e6:	3101      	adds	r1, #1
 800a8e8:	e7f0      	b.n	800a8cc <__s2b+0x18>
 800a8ea:	9b08      	ldr	r3, [sp, #32]
 800a8ec:	2d09      	cmp	r5, #9
 800a8ee:	6143      	str	r3, [r0, #20]
 800a8f0:	f04f 0301 	mov.w	r3, #1
 800a8f4:	6103      	str	r3, [r0, #16]
 800a8f6:	dd16      	ble.n	800a926 <__s2b+0x72>
 800a8f8:	f104 0909 	add.w	r9, r4, #9
 800a8fc:	46c8      	mov	r8, r9
 800a8fe:	442c      	add	r4, r5
 800a900:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a904:	4601      	mov	r1, r0
 800a906:	220a      	movs	r2, #10
 800a908:	4630      	mov	r0, r6
 800a90a:	3b30      	subs	r3, #48	; 0x30
 800a90c:	f7ff ff8c 	bl	800a828 <__multadd>
 800a910:	45a0      	cmp	r8, r4
 800a912:	d1f5      	bne.n	800a900 <__s2b+0x4c>
 800a914:	f1a5 0408 	sub.w	r4, r5, #8
 800a918:	444c      	add	r4, r9
 800a91a:	1b2d      	subs	r5, r5, r4
 800a91c:	1963      	adds	r3, r4, r5
 800a91e:	42bb      	cmp	r3, r7
 800a920:	db04      	blt.n	800a92c <__s2b+0x78>
 800a922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a926:	2509      	movs	r5, #9
 800a928:	340a      	adds	r4, #10
 800a92a:	e7f6      	b.n	800a91a <__s2b+0x66>
 800a92c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a930:	4601      	mov	r1, r0
 800a932:	220a      	movs	r2, #10
 800a934:	4630      	mov	r0, r6
 800a936:	3b30      	subs	r3, #48	; 0x30
 800a938:	f7ff ff76 	bl	800a828 <__multadd>
 800a93c:	e7ee      	b.n	800a91c <__s2b+0x68>
 800a93e:	bf00      	nop
 800a940:	0800bf58 	.word	0x0800bf58
 800a944:	0800c048 	.word	0x0800c048

0800a948 <__hi0bits>:
 800a948:	0c02      	lsrs	r2, r0, #16
 800a94a:	0412      	lsls	r2, r2, #16
 800a94c:	4603      	mov	r3, r0
 800a94e:	b9ca      	cbnz	r2, 800a984 <__hi0bits+0x3c>
 800a950:	0403      	lsls	r3, r0, #16
 800a952:	2010      	movs	r0, #16
 800a954:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a958:	bf04      	itt	eq
 800a95a:	021b      	lsleq	r3, r3, #8
 800a95c:	3008      	addeq	r0, #8
 800a95e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a962:	bf04      	itt	eq
 800a964:	011b      	lsleq	r3, r3, #4
 800a966:	3004      	addeq	r0, #4
 800a968:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a96c:	bf04      	itt	eq
 800a96e:	009b      	lsleq	r3, r3, #2
 800a970:	3002      	addeq	r0, #2
 800a972:	2b00      	cmp	r3, #0
 800a974:	db05      	blt.n	800a982 <__hi0bits+0x3a>
 800a976:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a97a:	f100 0001 	add.w	r0, r0, #1
 800a97e:	bf08      	it	eq
 800a980:	2020      	moveq	r0, #32
 800a982:	4770      	bx	lr
 800a984:	2000      	movs	r0, #0
 800a986:	e7e5      	b.n	800a954 <__hi0bits+0xc>

0800a988 <__lo0bits>:
 800a988:	6803      	ldr	r3, [r0, #0]
 800a98a:	4602      	mov	r2, r0
 800a98c:	f013 0007 	ands.w	r0, r3, #7
 800a990:	d00b      	beq.n	800a9aa <__lo0bits+0x22>
 800a992:	07d9      	lsls	r1, r3, #31
 800a994:	d421      	bmi.n	800a9da <__lo0bits+0x52>
 800a996:	0798      	lsls	r0, r3, #30
 800a998:	bf49      	itett	mi
 800a99a:	085b      	lsrmi	r3, r3, #1
 800a99c:	089b      	lsrpl	r3, r3, #2
 800a99e:	2001      	movmi	r0, #1
 800a9a0:	6013      	strmi	r3, [r2, #0]
 800a9a2:	bf5c      	itt	pl
 800a9a4:	2002      	movpl	r0, #2
 800a9a6:	6013      	strpl	r3, [r2, #0]
 800a9a8:	4770      	bx	lr
 800a9aa:	b299      	uxth	r1, r3
 800a9ac:	b909      	cbnz	r1, 800a9b2 <__lo0bits+0x2a>
 800a9ae:	2010      	movs	r0, #16
 800a9b0:	0c1b      	lsrs	r3, r3, #16
 800a9b2:	b2d9      	uxtb	r1, r3
 800a9b4:	b909      	cbnz	r1, 800a9ba <__lo0bits+0x32>
 800a9b6:	3008      	adds	r0, #8
 800a9b8:	0a1b      	lsrs	r3, r3, #8
 800a9ba:	0719      	lsls	r1, r3, #28
 800a9bc:	bf04      	itt	eq
 800a9be:	091b      	lsreq	r3, r3, #4
 800a9c0:	3004      	addeq	r0, #4
 800a9c2:	0799      	lsls	r1, r3, #30
 800a9c4:	bf04      	itt	eq
 800a9c6:	089b      	lsreq	r3, r3, #2
 800a9c8:	3002      	addeq	r0, #2
 800a9ca:	07d9      	lsls	r1, r3, #31
 800a9cc:	d403      	bmi.n	800a9d6 <__lo0bits+0x4e>
 800a9ce:	085b      	lsrs	r3, r3, #1
 800a9d0:	f100 0001 	add.w	r0, r0, #1
 800a9d4:	d003      	beq.n	800a9de <__lo0bits+0x56>
 800a9d6:	6013      	str	r3, [r2, #0]
 800a9d8:	4770      	bx	lr
 800a9da:	2000      	movs	r0, #0
 800a9dc:	4770      	bx	lr
 800a9de:	2020      	movs	r0, #32
 800a9e0:	4770      	bx	lr
	...

0800a9e4 <__i2b>:
 800a9e4:	b510      	push	{r4, lr}
 800a9e6:	460c      	mov	r4, r1
 800a9e8:	2101      	movs	r1, #1
 800a9ea:	f7ff febb 	bl	800a764 <_Balloc>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	b928      	cbnz	r0, 800a9fe <__i2b+0x1a>
 800a9f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a9f6:	4b04      	ldr	r3, [pc, #16]	; (800aa08 <__i2b+0x24>)
 800a9f8:	4804      	ldr	r0, [pc, #16]	; (800aa0c <__i2b+0x28>)
 800a9fa:	f000 ff9b 	bl	800b934 <__assert_func>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	6144      	str	r4, [r0, #20]
 800aa02:	6103      	str	r3, [r0, #16]
 800aa04:	bd10      	pop	{r4, pc}
 800aa06:	bf00      	nop
 800aa08:	0800bf58 	.word	0x0800bf58
 800aa0c:	0800c048 	.word	0x0800c048

0800aa10 <__multiply>:
 800aa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa14:	4691      	mov	r9, r2
 800aa16:	690a      	ldr	r2, [r1, #16]
 800aa18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa1c:	460c      	mov	r4, r1
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	bfbe      	ittt	lt
 800aa22:	460b      	movlt	r3, r1
 800aa24:	464c      	movlt	r4, r9
 800aa26:	4699      	movlt	r9, r3
 800aa28:	6927      	ldr	r7, [r4, #16]
 800aa2a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa2e:	68a3      	ldr	r3, [r4, #8]
 800aa30:	6861      	ldr	r1, [r4, #4]
 800aa32:	eb07 060a 	add.w	r6, r7, sl
 800aa36:	42b3      	cmp	r3, r6
 800aa38:	b085      	sub	sp, #20
 800aa3a:	bfb8      	it	lt
 800aa3c:	3101      	addlt	r1, #1
 800aa3e:	f7ff fe91 	bl	800a764 <_Balloc>
 800aa42:	b930      	cbnz	r0, 800aa52 <__multiply+0x42>
 800aa44:	4602      	mov	r2, r0
 800aa46:	f240 115d 	movw	r1, #349	; 0x15d
 800aa4a:	4b43      	ldr	r3, [pc, #268]	; (800ab58 <__multiply+0x148>)
 800aa4c:	4843      	ldr	r0, [pc, #268]	; (800ab5c <__multiply+0x14c>)
 800aa4e:	f000 ff71 	bl	800b934 <__assert_func>
 800aa52:	f100 0514 	add.w	r5, r0, #20
 800aa56:	462b      	mov	r3, r5
 800aa58:	2200      	movs	r2, #0
 800aa5a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa5e:	4543      	cmp	r3, r8
 800aa60:	d321      	bcc.n	800aaa6 <__multiply+0x96>
 800aa62:	f104 0314 	add.w	r3, r4, #20
 800aa66:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa6a:	f109 0314 	add.w	r3, r9, #20
 800aa6e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa72:	9202      	str	r2, [sp, #8]
 800aa74:	1b3a      	subs	r2, r7, r4
 800aa76:	3a15      	subs	r2, #21
 800aa78:	f022 0203 	bic.w	r2, r2, #3
 800aa7c:	3204      	adds	r2, #4
 800aa7e:	f104 0115 	add.w	r1, r4, #21
 800aa82:	428f      	cmp	r7, r1
 800aa84:	bf38      	it	cc
 800aa86:	2204      	movcc	r2, #4
 800aa88:	9201      	str	r2, [sp, #4]
 800aa8a:	9a02      	ldr	r2, [sp, #8]
 800aa8c:	9303      	str	r3, [sp, #12]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d80c      	bhi.n	800aaac <__multiply+0x9c>
 800aa92:	2e00      	cmp	r6, #0
 800aa94:	dd03      	ble.n	800aa9e <__multiply+0x8e>
 800aa96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d059      	beq.n	800ab52 <__multiply+0x142>
 800aa9e:	6106      	str	r6, [r0, #16]
 800aaa0:	b005      	add	sp, #20
 800aaa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa6:	f843 2b04 	str.w	r2, [r3], #4
 800aaaa:	e7d8      	b.n	800aa5e <__multiply+0x4e>
 800aaac:	f8b3 a000 	ldrh.w	sl, [r3]
 800aab0:	f1ba 0f00 	cmp.w	sl, #0
 800aab4:	d023      	beq.n	800aafe <__multiply+0xee>
 800aab6:	46a9      	mov	r9, r5
 800aab8:	f04f 0c00 	mov.w	ip, #0
 800aabc:	f104 0e14 	add.w	lr, r4, #20
 800aac0:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aac4:	f8d9 1000 	ldr.w	r1, [r9]
 800aac8:	fa1f fb82 	uxth.w	fp, r2
 800aacc:	b289      	uxth	r1, r1
 800aace:	fb0a 110b 	mla	r1, sl, fp, r1
 800aad2:	4461      	add	r1, ip
 800aad4:	f8d9 c000 	ldr.w	ip, [r9]
 800aad8:	0c12      	lsrs	r2, r2, #16
 800aada:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800aade:	fb0a c202 	mla	r2, sl, r2, ip
 800aae2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aae6:	b289      	uxth	r1, r1
 800aae8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aaec:	4577      	cmp	r7, lr
 800aaee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aaf2:	f849 1b04 	str.w	r1, [r9], #4
 800aaf6:	d8e3      	bhi.n	800aac0 <__multiply+0xb0>
 800aaf8:	9a01      	ldr	r2, [sp, #4]
 800aafa:	f845 c002 	str.w	ip, [r5, r2]
 800aafe:	9a03      	ldr	r2, [sp, #12]
 800ab00:	3304      	adds	r3, #4
 800ab02:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab06:	f1b9 0f00 	cmp.w	r9, #0
 800ab0a:	d020      	beq.n	800ab4e <__multiply+0x13e>
 800ab0c:	46ae      	mov	lr, r5
 800ab0e:	f04f 0a00 	mov.w	sl, #0
 800ab12:	6829      	ldr	r1, [r5, #0]
 800ab14:	f104 0c14 	add.w	ip, r4, #20
 800ab18:	f8bc b000 	ldrh.w	fp, [ip]
 800ab1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab20:	b289      	uxth	r1, r1
 800ab22:	fb09 220b 	mla	r2, r9, fp, r2
 800ab26:	4492      	add	sl, r2
 800ab28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ab2c:	f84e 1b04 	str.w	r1, [lr], #4
 800ab30:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ab34:	f8be 1000 	ldrh.w	r1, [lr]
 800ab38:	0c12      	lsrs	r2, r2, #16
 800ab3a:	fb09 1102 	mla	r1, r9, r2, r1
 800ab3e:	4567      	cmp	r7, ip
 800ab40:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ab44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab48:	d8e6      	bhi.n	800ab18 <__multiply+0x108>
 800ab4a:	9a01      	ldr	r2, [sp, #4]
 800ab4c:	50a9      	str	r1, [r5, r2]
 800ab4e:	3504      	adds	r5, #4
 800ab50:	e79b      	b.n	800aa8a <__multiply+0x7a>
 800ab52:	3e01      	subs	r6, #1
 800ab54:	e79d      	b.n	800aa92 <__multiply+0x82>
 800ab56:	bf00      	nop
 800ab58:	0800bf58 	.word	0x0800bf58
 800ab5c:	0800c048 	.word	0x0800c048

0800ab60 <__pow5mult>:
 800ab60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab64:	4615      	mov	r5, r2
 800ab66:	f012 0203 	ands.w	r2, r2, #3
 800ab6a:	4606      	mov	r6, r0
 800ab6c:	460f      	mov	r7, r1
 800ab6e:	d007      	beq.n	800ab80 <__pow5mult+0x20>
 800ab70:	4c25      	ldr	r4, [pc, #148]	; (800ac08 <__pow5mult+0xa8>)
 800ab72:	3a01      	subs	r2, #1
 800ab74:	2300      	movs	r3, #0
 800ab76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab7a:	f7ff fe55 	bl	800a828 <__multadd>
 800ab7e:	4607      	mov	r7, r0
 800ab80:	10ad      	asrs	r5, r5, #2
 800ab82:	d03d      	beq.n	800ac00 <__pow5mult+0xa0>
 800ab84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab86:	b97c      	cbnz	r4, 800aba8 <__pow5mult+0x48>
 800ab88:	2010      	movs	r0, #16
 800ab8a:	f7ff fdb5 	bl	800a6f8 <malloc>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	6270      	str	r0, [r6, #36]	; 0x24
 800ab92:	b928      	cbnz	r0, 800aba0 <__pow5mult+0x40>
 800ab94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ab98:	4b1c      	ldr	r3, [pc, #112]	; (800ac0c <__pow5mult+0xac>)
 800ab9a:	481d      	ldr	r0, [pc, #116]	; (800ac10 <__pow5mult+0xb0>)
 800ab9c:	f000 feca 	bl	800b934 <__assert_func>
 800aba0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aba4:	6004      	str	r4, [r0, #0]
 800aba6:	60c4      	str	r4, [r0, #12]
 800aba8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800abac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800abb0:	b94c      	cbnz	r4, 800abc6 <__pow5mult+0x66>
 800abb2:	f240 2171 	movw	r1, #625	; 0x271
 800abb6:	4630      	mov	r0, r6
 800abb8:	f7ff ff14 	bl	800a9e4 <__i2b>
 800abbc:	2300      	movs	r3, #0
 800abbe:	4604      	mov	r4, r0
 800abc0:	f8c8 0008 	str.w	r0, [r8, #8]
 800abc4:	6003      	str	r3, [r0, #0]
 800abc6:	f04f 0900 	mov.w	r9, #0
 800abca:	07eb      	lsls	r3, r5, #31
 800abcc:	d50a      	bpl.n	800abe4 <__pow5mult+0x84>
 800abce:	4639      	mov	r1, r7
 800abd0:	4622      	mov	r2, r4
 800abd2:	4630      	mov	r0, r6
 800abd4:	f7ff ff1c 	bl	800aa10 <__multiply>
 800abd8:	4680      	mov	r8, r0
 800abda:	4639      	mov	r1, r7
 800abdc:	4630      	mov	r0, r6
 800abde:	f7ff fe01 	bl	800a7e4 <_Bfree>
 800abe2:	4647      	mov	r7, r8
 800abe4:	106d      	asrs	r5, r5, #1
 800abe6:	d00b      	beq.n	800ac00 <__pow5mult+0xa0>
 800abe8:	6820      	ldr	r0, [r4, #0]
 800abea:	b938      	cbnz	r0, 800abfc <__pow5mult+0x9c>
 800abec:	4622      	mov	r2, r4
 800abee:	4621      	mov	r1, r4
 800abf0:	4630      	mov	r0, r6
 800abf2:	f7ff ff0d 	bl	800aa10 <__multiply>
 800abf6:	6020      	str	r0, [r4, #0]
 800abf8:	f8c0 9000 	str.w	r9, [r0]
 800abfc:	4604      	mov	r4, r0
 800abfe:	e7e4      	b.n	800abca <__pow5mult+0x6a>
 800ac00:	4638      	mov	r0, r7
 800ac02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac06:	bf00      	nop
 800ac08:	0800c198 	.word	0x0800c198
 800ac0c:	0800bee6 	.word	0x0800bee6
 800ac10:	0800c048 	.word	0x0800c048

0800ac14 <__lshift>:
 800ac14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac18:	460c      	mov	r4, r1
 800ac1a:	4607      	mov	r7, r0
 800ac1c:	4691      	mov	r9, r2
 800ac1e:	6923      	ldr	r3, [r4, #16]
 800ac20:	6849      	ldr	r1, [r1, #4]
 800ac22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac26:	68a3      	ldr	r3, [r4, #8]
 800ac28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac2c:	f108 0601 	add.w	r6, r8, #1
 800ac30:	42b3      	cmp	r3, r6
 800ac32:	db0b      	blt.n	800ac4c <__lshift+0x38>
 800ac34:	4638      	mov	r0, r7
 800ac36:	f7ff fd95 	bl	800a764 <_Balloc>
 800ac3a:	4605      	mov	r5, r0
 800ac3c:	b948      	cbnz	r0, 800ac52 <__lshift+0x3e>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ac44:	4b29      	ldr	r3, [pc, #164]	; (800acec <__lshift+0xd8>)
 800ac46:	482a      	ldr	r0, [pc, #168]	; (800acf0 <__lshift+0xdc>)
 800ac48:	f000 fe74 	bl	800b934 <__assert_func>
 800ac4c:	3101      	adds	r1, #1
 800ac4e:	005b      	lsls	r3, r3, #1
 800ac50:	e7ee      	b.n	800ac30 <__lshift+0x1c>
 800ac52:	2300      	movs	r3, #0
 800ac54:	f100 0114 	add.w	r1, r0, #20
 800ac58:	f100 0210 	add.w	r2, r0, #16
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	4553      	cmp	r3, sl
 800ac60:	db37      	blt.n	800acd2 <__lshift+0xbe>
 800ac62:	6920      	ldr	r0, [r4, #16]
 800ac64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac68:	f104 0314 	add.w	r3, r4, #20
 800ac6c:	f019 091f 	ands.w	r9, r9, #31
 800ac70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ac78:	d02f      	beq.n	800acda <__lshift+0xc6>
 800ac7a:	468a      	mov	sl, r1
 800ac7c:	f04f 0c00 	mov.w	ip, #0
 800ac80:	f1c9 0e20 	rsb	lr, r9, #32
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	fa02 f209 	lsl.w	r2, r2, r9
 800ac8a:	ea42 020c 	orr.w	r2, r2, ip
 800ac8e:	f84a 2b04 	str.w	r2, [sl], #4
 800ac92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac96:	4298      	cmp	r0, r3
 800ac98:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ac9c:	d8f2      	bhi.n	800ac84 <__lshift+0x70>
 800ac9e:	1b03      	subs	r3, r0, r4
 800aca0:	3b15      	subs	r3, #21
 800aca2:	f023 0303 	bic.w	r3, r3, #3
 800aca6:	3304      	adds	r3, #4
 800aca8:	f104 0215 	add.w	r2, r4, #21
 800acac:	4290      	cmp	r0, r2
 800acae:	bf38      	it	cc
 800acb0:	2304      	movcc	r3, #4
 800acb2:	f841 c003 	str.w	ip, [r1, r3]
 800acb6:	f1bc 0f00 	cmp.w	ip, #0
 800acba:	d001      	beq.n	800acc0 <__lshift+0xac>
 800acbc:	f108 0602 	add.w	r6, r8, #2
 800acc0:	3e01      	subs	r6, #1
 800acc2:	4638      	mov	r0, r7
 800acc4:	4621      	mov	r1, r4
 800acc6:	612e      	str	r6, [r5, #16]
 800acc8:	f7ff fd8c 	bl	800a7e4 <_Bfree>
 800accc:	4628      	mov	r0, r5
 800acce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acd2:	f842 0f04 	str.w	r0, [r2, #4]!
 800acd6:	3301      	adds	r3, #1
 800acd8:	e7c1      	b.n	800ac5e <__lshift+0x4a>
 800acda:	3904      	subs	r1, #4
 800acdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ace0:	4298      	cmp	r0, r3
 800ace2:	f841 2f04 	str.w	r2, [r1, #4]!
 800ace6:	d8f9      	bhi.n	800acdc <__lshift+0xc8>
 800ace8:	e7ea      	b.n	800acc0 <__lshift+0xac>
 800acea:	bf00      	nop
 800acec:	0800bf58 	.word	0x0800bf58
 800acf0:	0800c048 	.word	0x0800c048

0800acf4 <__mcmp>:
 800acf4:	4603      	mov	r3, r0
 800acf6:	690a      	ldr	r2, [r1, #16]
 800acf8:	6900      	ldr	r0, [r0, #16]
 800acfa:	b530      	push	{r4, r5, lr}
 800acfc:	1a80      	subs	r0, r0, r2
 800acfe:	d10d      	bne.n	800ad1c <__mcmp+0x28>
 800ad00:	3314      	adds	r3, #20
 800ad02:	3114      	adds	r1, #20
 800ad04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ad08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ad0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ad10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ad14:	4295      	cmp	r5, r2
 800ad16:	d002      	beq.n	800ad1e <__mcmp+0x2a>
 800ad18:	d304      	bcc.n	800ad24 <__mcmp+0x30>
 800ad1a:	2001      	movs	r0, #1
 800ad1c:	bd30      	pop	{r4, r5, pc}
 800ad1e:	42a3      	cmp	r3, r4
 800ad20:	d3f4      	bcc.n	800ad0c <__mcmp+0x18>
 800ad22:	e7fb      	b.n	800ad1c <__mcmp+0x28>
 800ad24:	f04f 30ff 	mov.w	r0, #4294967295
 800ad28:	e7f8      	b.n	800ad1c <__mcmp+0x28>
	...

0800ad2c <__mdiff>:
 800ad2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad30:	460d      	mov	r5, r1
 800ad32:	4607      	mov	r7, r0
 800ad34:	4611      	mov	r1, r2
 800ad36:	4628      	mov	r0, r5
 800ad38:	4614      	mov	r4, r2
 800ad3a:	f7ff ffdb 	bl	800acf4 <__mcmp>
 800ad3e:	1e06      	subs	r6, r0, #0
 800ad40:	d111      	bne.n	800ad66 <__mdiff+0x3a>
 800ad42:	4631      	mov	r1, r6
 800ad44:	4638      	mov	r0, r7
 800ad46:	f7ff fd0d 	bl	800a764 <_Balloc>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	b928      	cbnz	r0, 800ad5a <__mdiff+0x2e>
 800ad4e:	f240 2132 	movw	r1, #562	; 0x232
 800ad52:	4b3a      	ldr	r3, [pc, #232]	; (800ae3c <__mdiff+0x110>)
 800ad54:	483a      	ldr	r0, [pc, #232]	; (800ae40 <__mdiff+0x114>)
 800ad56:	f000 fded 	bl	800b934 <__assert_func>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ad60:	4610      	mov	r0, r2
 800ad62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad66:	bfa4      	itt	ge
 800ad68:	4623      	movge	r3, r4
 800ad6a:	462c      	movge	r4, r5
 800ad6c:	4638      	mov	r0, r7
 800ad6e:	6861      	ldr	r1, [r4, #4]
 800ad70:	bfa6      	itte	ge
 800ad72:	461d      	movge	r5, r3
 800ad74:	2600      	movge	r6, #0
 800ad76:	2601      	movlt	r6, #1
 800ad78:	f7ff fcf4 	bl	800a764 <_Balloc>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	b918      	cbnz	r0, 800ad88 <__mdiff+0x5c>
 800ad80:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ad84:	4b2d      	ldr	r3, [pc, #180]	; (800ae3c <__mdiff+0x110>)
 800ad86:	e7e5      	b.n	800ad54 <__mdiff+0x28>
 800ad88:	f102 0814 	add.w	r8, r2, #20
 800ad8c:	46c2      	mov	sl, r8
 800ad8e:	f04f 0c00 	mov.w	ip, #0
 800ad92:	6927      	ldr	r7, [r4, #16]
 800ad94:	60c6      	str	r6, [r0, #12]
 800ad96:	692e      	ldr	r6, [r5, #16]
 800ad98:	f104 0014 	add.w	r0, r4, #20
 800ad9c:	f105 0914 	add.w	r9, r5, #20
 800ada0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ada4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ada8:	3410      	adds	r4, #16
 800adaa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800adae:	f859 3b04 	ldr.w	r3, [r9], #4
 800adb2:	fa1f f18b 	uxth.w	r1, fp
 800adb6:	448c      	add	ip, r1
 800adb8:	b299      	uxth	r1, r3
 800adba:	0c1b      	lsrs	r3, r3, #16
 800adbc:	ebac 0101 	sub.w	r1, ip, r1
 800adc0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800adc4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800adc8:	b289      	uxth	r1, r1
 800adca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800adce:	454e      	cmp	r6, r9
 800add0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800add4:	f84a 3b04 	str.w	r3, [sl], #4
 800add8:	d8e7      	bhi.n	800adaa <__mdiff+0x7e>
 800adda:	1b73      	subs	r3, r6, r5
 800addc:	3b15      	subs	r3, #21
 800adde:	f023 0303 	bic.w	r3, r3, #3
 800ade2:	3515      	adds	r5, #21
 800ade4:	3304      	adds	r3, #4
 800ade6:	42ae      	cmp	r6, r5
 800ade8:	bf38      	it	cc
 800adea:	2304      	movcc	r3, #4
 800adec:	4418      	add	r0, r3
 800adee:	4443      	add	r3, r8
 800adf0:	461e      	mov	r6, r3
 800adf2:	4605      	mov	r5, r0
 800adf4:	4575      	cmp	r5, lr
 800adf6:	d30e      	bcc.n	800ae16 <__mdiff+0xea>
 800adf8:	f10e 0103 	add.w	r1, lr, #3
 800adfc:	1a09      	subs	r1, r1, r0
 800adfe:	f021 0103 	bic.w	r1, r1, #3
 800ae02:	3803      	subs	r0, #3
 800ae04:	4586      	cmp	lr, r0
 800ae06:	bf38      	it	cc
 800ae08:	2100      	movcc	r1, #0
 800ae0a:	4419      	add	r1, r3
 800ae0c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ae10:	b18b      	cbz	r3, 800ae36 <__mdiff+0x10a>
 800ae12:	6117      	str	r7, [r2, #16]
 800ae14:	e7a4      	b.n	800ad60 <__mdiff+0x34>
 800ae16:	f855 8b04 	ldr.w	r8, [r5], #4
 800ae1a:	fa1f f188 	uxth.w	r1, r8
 800ae1e:	4461      	add	r1, ip
 800ae20:	140c      	asrs	r4, r1, #16
 800ae22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae26:	b289      	uxth	r1, r1
 800ae28:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ae2c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ae30:	f846 1b04 	str.w	r1, [r6], #4
 800ae34:	e7de      	b.n	800adf4 <__mdiff+0xc8>
 800ae36:	3f01      	subs	r7, #1
 800ae38:	e7e8      	b.n	800ae0c <__mdiff+0xe0>
 800ae3a:	bf00      	nop
 800ae3c:	0800bf58 	.word	0x0800bf58
 800ae40:	0800c048 	.word	0x0800c048

0800ae44 <__ulp>:
 800ae44:	4b11      	ldr	r3, [pc, #68]	; (800ae8c <__ulp+0x48>)
 800ae46:	400b      	ands	r3, r1
 800ae48:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	dd02      	ble.n	800ae56 <__ulp+0x12>
 800ae50:	2000      	movs	r0, #0
 800ae52:	4619      	mov	r1, r3
 800ae54:	4770      	bx	lr
 800ae56:	425b      	negs	r3, r3
 800ae58:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ae5c:	f04f 0000 	mov.w	r0, #0
 800ae60:	f04f 0100 	mov.w	r1, #0
 800ae64:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ae68:	da04      	bge.n	800ae74 <__ulp+0x30>
 800ae6a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae6e:	fa43 f102 	asr.w	r1, r3, r2
 800ae72:	4770      	bx	lr
 800ae74:	f1a2 0314 	sub.w	r3, r2, #20
 800ae78:	2b1e      	cmp	r3, #30
 800ae7a:	bfd6      	itet	le
 800ae7c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ae80:	2301      	movgt	r3, #1
 800ae82:	fa22 f303 	lsrle.w	r3, r2, r3
 800ae86:	4618      	mov	r0, r3
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	7ff00000 	.word	0x7ff00000

0800ae90 <__b2d>:
 800ae90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae94:	6907      	ldr	r7, [r0, #16]
 800ae96:	f100 0914 	add.w	r9, r0, #20
 800ae9a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800ae9e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800aea2:	f1a7 0804 	sub.w	r8, r7, #4
 800aea6:	4630      	mov	r0, r6
 800aea8:	f7ff fd4e 	bl	800a948 <__hi0bits>
 800aeac:	f1c0 0320 	rsb	r3, r0, #32
 800aeb0:	280a      	cmp	r0, #10
 800aeb2:	600b      	str	r3, [r1, #0]
 800aeb4:	491f      	ldr	r1, [pc, #124]	; (800af34 <__b2d+0xa4>)
 800aeb6:	dc17      	bgt.n	800aee8 <__b2d+0x58>
 800aeb8:	45c1      	cmp	r9, r8
 800aeba:	bf28      	it	cs
 800aebc:	2200      	movcs	r2, #0
 800aebe:	f1c0 0c0b 	rsb	ip, r0, #11
 800aec2:	fa26 f30c 	lsr.w	r3, r6, ip
 800aec6:	bf38      	it	cc
 800aec8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800aecc:	ea43 0501 	orr.w	r5, r3, r1
 800aed0:	f100 0315 	add.w	r3, r0, #21
 800aed4:	fa06 f303 	lsl.w	r3, r6, r3
 800aed8:	fa22 f20c 	lsr.w	r2, r2, ip
 800aedc:	ea43 0402 	orr.w	r4, r3, r2
 800aee0:	4620      	mov	r0, r4
 800aee2:	4629      	mov	r1, r5
 800aee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aee8:	45c1      	cmp	r9, r8
 800aeea:	bf2e      	itee	cs
 800aeec:	2200      	movcs	r2, #0
 800aeee:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800aef2:	f1a7 0808 	subcc.w	r8, r7, #8
 800aef6:	f1b0 030b 	subs.w	r3, r0, #11
 800aefa:	d016      	beq.n	800af2a <__b2d+0x9a>
 800aefc:	f1c3 0720 	rsb	r7, r3, #32
 800af00:	fa22 f107 	lsr.w	r1, r2, r7
 800af04:	45c8      	cmp	r8, r9
 800af06:	fa06 f603 	lsl.w	r6, r6, r3
 800af0a:	ea46 0601 	orr.w	r6, r6, r1
 800af0e:	bf94      	ite	ls
 800af10:	2100      	movls	r1, #0
 800af12:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800af16:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800af1a:	fa02 f003 	lsl.w	r0, r2, r3
 800af1e:	40f9      	lsrs	r1, r7
 800af20:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800af24:	ea40 0401 	orr.w	r4, r0, r1
 800af28:	e7da      	b.n	800aee0 <__b2d+0x50>
 800af2a:	4614      	mov	r4, r2
 800af2c:	ea46 0501 	orr.w	r5, r6, r1
 800af30:	e7d6      	b.n	800aee0 <__b2d+0x50>
 800af32:	bf00      	nop
 800af34:	3ff00000 	.word	0x3ff00000

0800af38 <__d2b>:
 800af38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800af3c:	2101      	movs	r1, #1
 800af3e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800af42:	4690      	mov	r8, r2
 800af44:	461d      	mov	r5, r3
 800af46:	f7ff fc0d 	bl	800a764 <_Balloc>
 800af4a:	4604      	mov	r4, r0
 800af4c:	b930      	cbnz	r0, 800af5c <__d2b+0x24>
 800af4e:	4602      	mov	r2, r0
 800af50:	f240 310a 	movw	r1, #778	; 0x30a
 800af54:	4b24      	ldr	r3, [pc, #144]	; (800afe8 <__d2b+0xb0>)
 800af56:	4825      	ldr	r0, [pc, #148]	; (800afec <__d2b+0xb4>)
 800af58:	f000 fcec 	bl	800b934 <__assert_func>
 800af5c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800af60:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800af64:	bb2d      	cbnz	r5, 800afb2 <__d2b+0x7a>
 800af66:	9301      	str	r3, [sp, #4]
 800af68:	f1b8 0300 	subs.w	r3, r8, #0
 800af6c:	d026      	beq.n	800afbc <__d2b+0x84>
 800af6e:	4668      	mov	r0, sp
 800af70:	9300      	str	r3, [sp, #0]
 800af72:	f7ff fd09 	bl	800a988 <__lo0bits>
 800af76:	9900      	ldr	r1, [sp, #0]
 800af78:	b1f0      	cbz	r0, 800afb8 <__d2b+0x80>
 800af7a:	9a01      	ldr	r2, [sp, #4]
 800af7c:	f1c0 0320 	rsb	r3, r0, #32
 800af80:	fa02 f303 	lsl.w	r3, r2, r3
 800af84:	430b      	orrs	r3, r1
 800af86:	40c2      	lsrs	r2, r0
 800af88:	6163      	str	r3, [r4, #20]
 800af8a:	9201      	str	r2, [sp, #4]
 800af8c:	9b01      	ldr	r3, [sp, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	bf14      	ite	ne
 800af92:	2102      	movne	r1, #2
 800af94:	2101      	moveq	r1, #1
 800af96:	61a3      	str	r3, [r4, #24]
 800af98:	6121      	str	r1, [r4, #16]
 800af9a:	b1c5      	cbz	r5, 800afce <__d2b+0x96>
 800af9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800afa0:	4405      	add	r5, r0
 800afa2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800afa6:	603d      	str	r5, [r7, #0]
 800afa8:	6030      	str	r0, [r6, #0]
 800afaa:	4620      	mov	r0, r4
 800afac:	b002      	add	sp, #8
 800afae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800afb6:	e7d6      	b.n	800af66 <__d2b+0x2e>
 800afb8:	6161      	str	r1, [r4, #20]
 800afba:	e7e7      	b.n	800af8c <__d2b+0x54>
 800afbc:	a801      	add	r0, sp, #4
 800afbe:	f7ff fce3 	bl	800a988 <__lo0bits>
 800afc2:	2101      	movs	r1, #1
 800afc4:	9b01      	ldr	r3, [sp, #4]
 800afc6:	6121      	str	r1, [r4, #16]
 800afc8:	6163      	str	r3, [r4, #20]
 800afca:	3020      	adds	r0, #32
 800afcc:	e7e5      	b.n	800af9a <__d2b+0x62>
 800afce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800afd2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800afd6:	6038      	str	r0, [r7, #0]
 800afd8:	6918      	ldr	r0, [r3, #16]
 800afda:	f7ff fcb5 	bl	800a948 <__hi0bits>
 800afde:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800afe2:	6031      	str	r1, [r6, #0]
 800afe4:	e7e1      	b.n	800afaa <__d2b+0x72>
 800afe6:	bf00      	nop
 800afe8:	0800bf58 	.word	0x0800bf58
 800afec:	0800c048 	.word	0x0800c048

0800aff0 <__ratio>:
 800aff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff4:	4688      	mov	r8, r1
 800aff6:	4669      	mov	r1, sp
 800aff8:	4681      	mov	r9, r0
 800affa:	f7ff ff49 	bl	800ae90 <__b2d>
 800affe:	460f      	mov	r7, r1
 800b000:	4604      	mov	r4, r0
 800b002:	460d      	mov	r5, r1
 800b004:	4640      	mov	r0, r8
 800b006:	a901      	add	r1, sp, #4
 800b008:	f7ff ff42 	bl	800ae90 <__b2d>
 800b00c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b010:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b014:	468b      	mov	fp, r1
 800b016:	eba3 0c02 	sub.w	ip, r3, r2
 800b01a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b01e:	1a9b      	subs	r3, r3, r2
 800b020:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b024:	2b00      	cmp	r3, #0
 800b026:	bfd5      	itete	le
 800b028:	460a      	movle	r2, r1
 800b02a:	462a      	movgt	r2, r5
 800b02c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b030:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b034:	bfd8      	it	le
 800b036:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b03a:	465b      	mov	r3, fp
 800b03c:	4602      	mov	r2, r0
 800b03e:	4639      	mov	r1, r7
 800b040:	4620      	mov	r0, r4
 800b042:	f7f5 fb73 	bl	800072c <__aeabi_ddiv>
 800b046:	b003      	add	sp, #12
 800b048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b04c <__copybits>:
 800b04c:	3901      	subs	r1, #1
 800b04e:	b570      	push	{r4, r5, r6, lr}
 800b050:	1149      	asrs	r1, r1, #5
 800b052:	6914      	ldr	r4, [r2, #16]
 800b054:	3101      	adds	r1, #1
 800b056:	f102 0314 	add.w	r3, r2, #20
 800b05a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b05e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b062:	1f05      	subs	r5, r0, #4
 800b064:	42a3      	cmp	r3, r4
 800b066:	d30c      	bcc.n	800b082 <__copybits+0x36>
 800b068:	1aa3      	subs	r3, r4, r2
 800b06a:	3b11      	subs	r3, #17
 800b06c:	f023 0303 	bic.w	r3, r3, #3
 800b070:	3211      	adds	r2, #17
 800b072:	42a2      	cmp	r2, r4
 800b074:	bf88      	it	hi
 800b076:	2300      	movhi	r3, #0
 800b078:	4418      	add	r0, r3
 800b07a:	2300      	movs	r3, #0
 800b07c:	4288      	cmp	r0, r1
 800b07e:	d305      	bcc.n	800b08c <__copybits+0x40>
 800b080:	bd70      	pop	{r4, r5, r6, pc}
 800b082:	f853 6b04 	ldr.w	r6, [r3], #4
 800b086:	f845 6f04 	str.w	r6, [r5, #4]!
 800b08a:	e7eb      	b.n	800b064 <__copybits+0x18>
 800b08c:	f840 3b04 	str.w	r3, [r0], #4
 800b090:	e7f4      	b.n	800b07c <__copybits+0x30>

0800b092 <__any_on>:
 800b092:	f100 0214 	add.w	r2, r0, #20
 800b096:	6900      	ldr	r0, [r0, #16]
 800b098:	114b      	asrs	r3, r1, #5
 800b09a:	4298      	cmp	r0, r3
 800b09c:	b510      	push	{r4, lr}
 800b09e:	db11      	blt.n	800b0c4 <__any_on+0x32>
 800b0a0:	dd0a      	ble.n	800b0b8 <__any_on+0x26>
 800b0a2:	f011 011f 	ands.w	r1, r1, #31
 800b0a6:	d007      	beq.n	800b0b8 <__any_on+0x26>
 800b0a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b0ac:	fa24 f001 	lsr.w	r0, r4, r1
 800b0b0:	fa00 f101 	lsl.w	r1, r0, r1
 800b0b4:	428c      	cmp	r4, r1
 800b0b6:	d10b      	bne.n	800b0d0 <__any_on+0x3e>
 800b0b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d803      	bhi.n	800b0c8 <__any_on+0x36>
 800b0c0:	2000      	movs	r0, #0
 800b0c2:	bd10      	pop	{r4, pc}
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	e7f7      	b.n	800b0b8 <__any_on+0x26>
 800b0c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b0cc:	2900      	cmp	r1, #0
 800b0ce:	d0f5      	beq.n	800b0bc <__any_on+0x2a>
 800b0d0:	2001      	movs	r0, #1
 800b0d2:	e7f6      	b.n	800b0c2 <__any_on+0x30>

0800b0d4 <_calloc_r>:
 800b0d4:	b570      	push	{r4, r5, r6, lr}
 800b0d6:	fba1 5402 	umull	r5, r4, r1, r2
 800b0da:	b934      	cbnz	r4, 800b0ea <_calloc_r+0x16>
 800b0dc:	4629      	mov	r1, r5
 800b0de:	f000 f875 	bl	800b1cc <_malloc_r>
 800b0e2:	4606      	mov	r6, r0
 800b0e4:	b928      	cbnz	r0, 800b0f2 <_calloc_r+0x1e>
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	bd70      	pop	{r4, r5, r6, pc}
 800b0ea:	220c      	movs	r2, #12
 800b0ec:	2600      	movs	r6, #0
 800b0ee:	6002      	str	r2, [r0, #0]
 800b0f0:	e7f9      	b.n	800b0e6 <_calloc_r+0x12>
 800b0f2:	462a      	mov	r2, r5
 800b0f4:	4621      	mov	r1, r4
 800b0f6:	f7fc f887 	bl	8007208 <memset>
 800b0fa:	e7f4      	b.n	800b0e6 <_calloc_r+0x12>

0800b0fc <_free_r>:
 800b0fc:	b538      	push	{r3, r4, r5, lr}
 800b0fe:	4605      	mov	r5, r0
 800b100:	2900      	cmp	r1, #0
 800b102:	d040      	beq.n	800b186 <_free_r+0x8a>
 800b104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b108:	1f0c      	subs	r4, r1, #4
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	bfb8      	it	lt
 800b10e:	18e4      	addlt	r4, r4, r3
 800b110:	f000 fc9e 	bl	800ba50 <__malloc_lock>
 800b114:	4a1c      	ldr	r2, [pc, #112]	; (800b188 <_free_r+0x8c>)
 800b116:	6813      	ldr	r3, [r2, #0]
 800b118:	b933      	cbnz	r3, 800b128 <_free_r+0x2c>
 800b11a:	6063      	str	r3, [r4, #4]
 800b11c:	6014      	str	r4, [r2, #0]
 800b11e:	4628      	mov	r0, r5
 800b120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b124:	f000 bc9a 	b.w	800ba5c <__malloc_unlock>
 800b128:	42a3      	cmp	r3, r4
 800b12a:	d908      	bls.n	800b13e <_free_r+0x42>
 800b12c:	6820      	ldr	r0, [r4, #0]
 800b12e:	1821      	adds	r1, r4, r0
 800b130:	428b      	cmp	r3, r1
 800b132:	bf01      	itttt	eq
 800b134:	6819      	ldreq	r1, [r3, #0]
 800b136:	685b      	ldreq	r3, [r3, #4]
 800b138:	1809      	addeq	r1, r1, r0
 800b13a:	6021      	streq	r1, [r4, #0]
 800b13c:	e7ed      	b.n	800b11a <_free_r+0x1e>
 800b13e:	461a      	mov	r2, r3
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	b10b      	cbz	r3, 800b148 <_free_r+0x4c>
 800b144:	42a3      	cmp	r3, r4
 800b146:	d9fa      	bls.n	800b13e <_free_r+0x42>
 800b148:	6811      	ldr	r1, [r2, #0]
 800b14a:	1850      	adds	r0, r2, r1
 800b14c:	42a0      	cmp	r0, r4
 800b14e:	d10b      	bne.n	800b168 <_free_r+0x6c>
 800b150:	6820      	ldr	r0, [r4, #0]
 800b152:	4401      	add	r1, r0
 800b154:	1850      	adds	r0, r2, r1
 800b156:	4283      	cmp	r3, r0
 800b158:	6011      	str	r1, [r2, #0]
 800b15a:	d1e0      	bne.n	800b11e <_free_r+0x22>
 800b15c:	6818      	ldr	r0, [r3, #0]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	4401      	add	r1, r0
 800b162:	6011      	str	r1, [r2, #0]
 800b164:	6053      	str	r3, [r2, #4]
 800b166:	e7da      	b.n	800b11e <_free_r+0x22>
 800b168:	d902      	bls.n	800b170 <_free_r+0x74>
 800b16a:	230c      	movs	r3, #12
 800b16c:	602b      	str	r3, [r5, #0]
 800b16e:	e7d6      	b.n	800b11e <_free_r+0x22>
 800b170:	6820      	ldr	r0, [r4, #0]
 800b172:	1821      	adds	r1, r4, r0
 800b174:	428b      	cmp	r3, r1
 800b176:	bf01      	itttt	eq
 800b178:	6819      	ldreq	r1, [r3, #0]
 800b17a:	685b      	ldreq	r3, [r3, #4]
 800b17c:	1809      	addeq	r1, r1, r0
 800b17e:	6021      	streq	r1, [r4, #0]
 800b180:	6063      	str	r3, [r4, #4]
 800b182:	6054      	str	r4, [r2, #4]
 800b184:	e7cb      	b.n	800b11e <_free_r+0x22>
 800b186:	bd38      	pop	{r3, r4, r5, pc}
 800b188:	200005bc 	.word	0x200005bc

0800b18c <sbrk_aligned>:
 800b18c:	b570      	push	{r4, r5, r6, lr}
 800b18e:	4e0e      	ldr	r6, [pc, #56]	; (800b1c8 <sbrk_aligned+0x3c>)
 800b190:	460c      	mov	r4, r1
 800b192:	6831      	ldr	r1, [r6, #0]
 800b194:	4605      	mov	r5, r0
 800b196:	b911      	cbnz	r1, 800b19e <sbrk_aligned+0x12>
 800b198:	f000 fb46 	bl	800b828 <_sbrk_r>
 800b19c:	6030      	str	r0, [r6, #0]
 800b19e:	4621      	mov	r1, r4
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	f000 fb41 	bl	800b828 <_sbrk_r>
 800b1a6:	1c43      	adds	r3, r0, #1
 800b1a8:	d00a      	beq.n	800b1c0 <sbrk_aligned+0x34>
 800b1aa:	1cc4      	adds	r4, r0, #3
 800b1ac:	f024 0403 	bic.w	r4, r4, #3
 800b1b0:	42a0      	cmp	r0, r4
 800b1b2:	d007      	beq.n	800b1c4 <sbrk_aligned+0x38>
 800b1b4:	1a21      	subs	r1, r4, r0
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	f000 fb36 	bl	800b828 <_sbrk_r>
 800b1bc:	3001      	adds	r0, #1
 800b1be:	d101      	bne.n	800b1c4 <sbrk_aligned+0x38>
 800b1c0:	f04f 34ff 	mov.w	r4, #4294967295
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	bd70      	pop	{r4, r5, r6, pc}
 800b1c8:	200005c0 	.word	0x200005c0

0800b1cc <_malloc_r>:
 800b1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d0:	1ccd      	adds	r5, r1, #3
 800b1d2:	f025 0503 	bic.w	r5, r5, #3
 800b1d6:	3508      	adds	r5, #8
 800b1d8:	2d0c      	cmp	r5, #12
 800b1da:	bf38      	it	cc
 800b1dc:	250c      	movcc	r5, #12
 800b1de:	2d00      	cmp	r5, #0
 800b1e0:	4607      	mov	r7, r0
 800b1e2:	db01      	blt.n	800b1e8 <_malloc_r+0x1c>
 800b1e4:	42a9      	cmp	r1, r5
 800b1e6:	d905      	bls.n	800b1f4 <_malloc_r+0x28>
 800b1e8:	230c      	movs	r3, #12
 800b1ea:	2600      	movs	r6, #0
 800b1ec:	603b      	str	r3, [r7, #0]
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1f4:	4e2e      	ldr	r6, [pc, #184]	; (800b2b0 <_malloc_r+0xe4>)
 800b1f6:	f000 fc2b 	bl	800ba50 <__malloc_lock>
 800b1fa:	6833      	ldr	r3, [r6, #0]
 800b1fc:	461c      	mov	r4, r3
 800b1fe:	bb34      	cbnz	r4, 800b24e <_malloc_r+0x82>
 800b200:	4629      	mov	r1, r5
 800b202:	4638      	mov	r0, r7
 800b204:	f7ff ffc2 	bl	800b18c <sbrk_aligned>
 800b208:	1c43      	adds	r3, r0, #1
 800b20a:	4604      	mov	r4, r0
 800b20c:	d14d      	bne.n	800b2aa <_malloc_r+0xde>
 800b20e:	6834      	ldr	r4, [r6, #0]
 800b210:	4626      	mov	r6, r4
 800b212:	2e00      	cmp	r6, #0
 800b214:	d140      	bne.n	800b298 <_malloc_r+0xcc>
 800b216:	6823      	ldr	r3, [r4, #0]
 800b218:	4631      	mov	r1, r6
 800b21a:	4638      	mov	r0, r7
 800b21c:	eb04 0803 	add.w	r8, r4, r3
 800b220:	f000 fb02 	bl	800b828 <_sbrk_r>
 800b224:	4580      	cmp	r8, r0
 800b226:	d13a      	bne.n	800b29e <_malloc_r+0xd2>
 800b228:	6821      	ldr	r1, [r4, #0]
 800b22a:	3503      	adds	r5, #3
 800b22c:	1a6d      	subs	r5, r5, r1
 800b22e:	f025 0503 	bic.w	r5, r5, #3
 800b232:	3508      	adds	r5, #8
 800b234:	2d0c      	cmp	r5, #12
 800b236:	bf38      	it	cc
 800b238:	250c      	movcc	r5, #12
 800b23a:	4638      	mov	r0, r7
 800b23c:	4629      	mov	r1, r5
 800b23e:	f7ff ffa5 	bl	800b18c <sbrk_aligned>
 800b242:	3001      	adds	r0, #1
 800b244:	d02b      	beq.n	800b29e <_malloc_r+0xd2>
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	442b      	add	r3, r5
 800b24a:	6023      	str	r3, [r4, #0]
 800b24c:	e00e      	b.n	800b26c <_malloc_r+0xa0>
 800b24e:	6822      	ldr	r2, [r4, #0]
 800b250:	1b52      	subs	r2, r2, r5
 800b252:	d41e      	bmi.n	800b292 <_malloc_r+0xc6>
 800b254:	2a0b      	cmp	r2, #11
 800b256:	d916      	bls.n	800b286 <_malloc_r+0xba>
 800b258:	1961      	adds	r1, r4, r5
 800b25a:	42a3      	cmp	r3, r4
 800b25c:	6025      	str	r5, [r4, #0]
 800b25e:	bf18      	it	ne
 800b260:	6059      	strne	r1, [r3, #4]
 800b262:	6863      	ldr	r3, [r4, #4]
 800b264:	bf08      	it	eq
 800b266:	6031      	streq	r1, [r6, #0]
 800b268:	5162      	str	r2, [r4, r5]
 800b26a:	604b      	str	r3, [r1, #4]
 800b26c:	4638      	mov	r0, r7
 800b26e:	f104 060b 	add.w	r6, r4, #11
 800b272:	f000 fbf3 	bl	800ba5c <__malloc_unlock>
 800b276:	f026 0607 	bic.w	r6, r6, #7
 800b27a:	1d23      	adds	r3, r4, #4
 800b27c:	1af2      	subs	r2, r6, r3
 800b27e:	d0b6      	beq.n	800b1ee <_malloc_r+0x22>
 800b280:	1b9b      	subs	r3, r3, r6
 800b282:	50a3      	str	r3, [r4, r2]
 800b284:	e7b3      	b.n	800b1ee <_malloc_r+0x22>
 800b286:	6862      	ldr	r2, [r4, #4]
 800b288:	42a3      	cmp	r3, r4
 800b28a:	bf0c      	ite	eq
 800b28c:	6032      	streq	r2, [r6, #0]
 800b28e:	605a      	strne	r2, [r3, #4]
 800b290:	e7ec      	b.n	800b26c <_malloc_r+0xa0>
 800b292:	4623      	mov	r3, r4
 800b294:	6864      	ldr	r4, [r4, #4]
 800b296:	e7b2      	b.n	800b1fe <_malloc_r+0x32>
 800b298:	4634      	mov	r4, r6
 800b29a:	6876      	ldr	r6, [r6, #4]
 800b29c:	e7b9      	b.n	800b212 <_malloc_r+0x46>
 800b29e:	230c      	movs	r3, #12
 800b2a0:	4638      	mov	r0, r7
 800b2a2:	603b      	str	r3, [r7, #0]
 800b2a4:	f000 fbda 	bl	800ba5c <__malloc_unlock>
 800b2a8:	e7a1      	b.n	800b1ee <_malloc_r+0x22>
 800b2aa:	6025      	str	r5, [r4, #0]
 800b2ac:	e7de      	b.n	800b26c <_malloc_r+0xa0>
 800b2ae:	bf00      	nop
 800b2b0:	200005bc 	.word	0x200005bc

0800b2b4 <__ssputs_r>:
 800b2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b8:	688e      	ldr	r6, [r1, #8]
 800b2ba:	4682      	mov	sl, r0
 800b2bc:	429e      	cmp	r6, r3
 800b2be:	460c      	mov	r4, r1
 800b2c0:	4690      	mov	r8, r2
 800b2c2:	461f      	mov	r7, r3
 800b2c4:	d838      	bhi.n	800b338 <__ssputs_r+0x84>
 800b2c6:	898a      	ldrh	r2, [r1, #12]
 800b2c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2cc:	d032      	beq.n	800b334 <__ssputs_r+0x80>
 800b2ce:	6825      	ldr	r5, [r4, #0]
 800b2d0:	6909      	ldr	r1, [r1, #16]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	eba5 0901 	sub.w	r9, r5, r1
 800b2d8:	6965      	ldr	r5, [r4, #20]
 800b2da:	444b      	add	r3, r9
 800b2dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2e4:	106d      	asrs	r5, r5, #1
 800b2e6:	429d      	cmp	r5, r3
 800b2e8:	bf38      	it	cc
 800b2ea:	461d      	movcc	r5, r3
 800b2ec:	0553      	lsls	r3, r2, #21
 800b2ee:	d531      	bpl.n	800b354 <__ssputs_r+0xa0>
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	f7ff ff6b 	bl	800b1cc <_malloc_r>
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	b950      	cbnz	r0, 800b310 <__ssputs_r+0x5c>
 800b2fa:	230c      	movs	r3, #12
 800b2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b300:	f8ca 3000 	str.w	r3, [sl]
 800b304:	89a3      	ldrh	r3, [r4, #12]
 800b306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b30a:	81a3      	strh	r3, [r4, #12]
 800b30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b310:	464a      	mov	r2, r9
 800b312:	6921      	ldr	r1, [r4, #16]
 800b314:	f7ff fa18 	bl	800a748 <memcpy>
 800b318:	89a3      	ldrh	r3, [r4, #12]
 800b31a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b31e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b322:	81a3      	strh	r3, [r4, #12]
 800b324:	6126      	str	r6, [r4, #16]
 800b326:	444e      	add	r6, r9
 800b328:	6026      	str	r6, [r4, #0]
 800b32a:	463e      	mov	r6, r7
 800b32c:	6165      	str	r5, [r4, #20]
 800b32e:	eba5 0509 	sub.w	r5, r5, r9
 800b332:	60a5      	str	r5, [r4, #8]
 800b334:	42be      	cmp	r6, r7
 800b336:	d900      	bls.n	800b33a <__ssputs_r+0x86>
 800b338:	463e      	mov	r6, r7
 800b33a:	4632      	mov	r2, r6
 800b33c:	4641      	mov	r1, r8
 800b33e:	6820      	ldr	r0, [r4, #0]
 800b340:	f000 fb6c 	bl	800ba1c <memmove>
 800b344:	68a3      	ldr	r3, [r4, #8]
 800b346:	2000      	movs	r0, #0
 800b348:	1b9b      	subs	r3, r3, r6
 800b34a:	60a3      	str	r3, [r4, #8]
 800b34c:	6823      	ldr	r3, [r4, #0]
 800b34e:	4433      	add	r3, r6
 800b350:	6023      	str	r3, [r4, #0]
 800b352:	e7db      	b.n	800b30c <__ssputs_r+0x58>
 800b354:	462a      	mov	r2, r5
 800b356:	f000 fb87 	bl	800ba68 <_realloc_r>
 800b35a:	4606      	mov	r6, r0
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d1e1      	bne.n	800b324 <__ssputs_r+0x70>
 800b360:	4650      	mov	r0, sl
 800b362:	6921      	ldr	r1, [r4, #16]
 800b364:	f7ff feca 	bl	800b0fc <_free_r>
 800b368:	e7c7      	b.n	800b2fa <__ssputs_r+0x46>
	...

0800b36c <_svfiprintf_r>:
 800b36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b370:	4698      	mov	r8, r3
 800b372:	898b      	ldrh	r3, [r1, #12]
 800b374:	4607      	mov	r7, r0
 800b376:	061b      	lsls	r3, r3, #24
 800b378:	460d      	mov	r5, r1
 800b37a:	4614      	mov	r4, r2
 800b37c:	b09d      	sub	sp, #116	; 0x74
 800b37e:	d50e      	bpl.n	800b39e <_svfiprintf_r+0x32>
 800b380:	690b      	ldr	r3, [r1, #16]
 800b382:	b963      	cbnz	r3, 800b39e <_svfiprintf_r+0x32>
 800b384:	2140      	movs	r1, #64	; 0x40
 800b386:	f7ff ff21 	bl	800b1cc <_malloc_r>
 800b38a:	6028      	str	r0, [r5, #0]
 800b38c:	6128      	str	r0, [r5, #16]
 800b38e:	b920      	cbnz	r0, 800b39a <_svfiprintf_r+0x2e>
 800b390:	230c      	movs	r3, #12
 800b392:	603b      	str	r3, [r7, #0]
 800b394:	f04f 30ff 	mov.w	r0, #4294967295
 800b398:	e0d1      	b.n	800b53e <_svfiprintf_r+0x1d2>
 800b39a:	2340      	movs	r3, #64	; 0x40
 800b39c:	616b      	str	r3, [r5, #20]
 800b39e:	2300      	movs	r3, #0
 800b3a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b3a2:	2320      	movs	r3, #32
 800b3a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3a8:	2330      	movs	r3, #48	; 0x30
 800b3aa:	f04f 0901 	mov.w	r9, #1
 800b3ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b558 <_svfiprintf_r+0x1ec>
 800b3b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3ba:	4623      	mov	r3, r4
 800b3bc:	469a      	mov	sl, r3
 800b3be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3c2:	b10a      	cbz	r2, 800b3c8 <_svfiprintf_r+0x5c>
 800b3c4:	2a25      	cmp	r2, #37	; 0x25
 800b3c6:	d1f9      	bne.n	800b3bc <_svfiprintf_r+0x50>
 800b3c8:	ebba 0b04 	subs.w	fp, sl, r4
 800b3cc:	d00b      	beq.n	800b3e6 <_svfiprintf_r+0x7a>
 800b3ce:	465b      	mov	r3, fp
 800b3d0:	4622      	mov	r2, r4
 800b3d2:	4629      	mov	r1, r5
 800b3d4:	4638      	mov	r0, r7
 800b3d6:	f7ff ff6d 	bl	800b2b4 <__ssputs_r>
 800b3da:	3001      	adds	r0, #1
 800b3dc:	f000 80aa 	beq.w	800b534 <_svfiprintf_r+0x1c8>
 800b3e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3e2:	445a      	add	r2, fp
 800b3e4:	9209      	str	r2, [sp, #36]	; 0x24
 800b3e6:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	f000 80a2 	beq.w	800b534 <_svfiprintf_r+0x1c8>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3fa:	f10a 0a01 	add.w	sl, sl, #1
 800b3fe:	9304      	str	r3, [sp, #16]
 800b400:	9307      	str	r3, [sp, #28]
 800b402:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b406:	931a      	str	r3, [sp, #104]	; 0x68
 800b408:	4654      	mov	r4, sl
 800b40a:	2205      	movs	r2, #5
 800b40c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b410:	4851      	ldr	r0, [pc, #324]	; (800b558 <_svfiprintf_r+0x1ec>)
 800b412:	f7ff f98b 	bl	800a72c <memchr>
 800b416:	9a04      	ldr	r2, [sp, #16]
 800b418:	b9d8      	cbnz	r0, 800b452 <_svfiprintf_r+0xe6>
 800b41a:	06d0      	lsls	r0, r2, #27
 800b41c:	bf44      	itt	mi
 800b41e:	2320      	movmi	r3, #32
 800b420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b424:	0711      	lsls	r1, r2, #28
 800b426:	bf44      	itt	mi
 800b428:	232b      	movmi	r3, #43	; 0x2b
 800b42a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b42e:	f89a 3000 	ldrb.w	r3, [sl]
 800b432:	2b2a      	cmp	r3, #42	; 0x2a
 800b434:	d015      	beq.n	800b462 <_svfiprintf_r+0xf6>
 800b436:	4654      	mov	r4, sl
 800b438:	2000      	movs	r0, #0
 800b43a:	f04f 0c0a 	mov.w	ip, #10
 800b43e:	9a07      	ldr	r2, [sp, #28]
 800b440:	4621      	mov	r1, r4
 800b442:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b446:	3b30      	subs	r3, #48	; 0x30
 800b448:	2b09      	cmp	r3, #9
 800b44a:	d94e      	bls.n	800b4ea <_svfiprintf_r+0x17e>
 800b44c:	b1b0      	cbz	r0, 800b47c <_svfiprintf_r+0x110>
 800b44e:	9207      	str	r2, [sp, #28]
 800b450:	e014      	b.n	800b47c <_svfiprintf_r+0x110>
 800b452:	eba0 0308 	sub.w	r3, r0, r8
 800b456:	fa09 f303 	lsl.w	r3, r9, r3
 800b45a:	4313      	orrs	r3, r2
 800b45c:	46a2      	mov	sl, r4
 800b45e:	9304      	str	r3, [sp, #16]
 800b460:	e7d2      	b.n	800b408 <_svfiprintf_r+0x9c>
 800b462:	9b03      	ldr	r3, [sp, #12]
 800b464:	1d19      	adds	r1, r3, #4
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	9103      	str	r1, [sp, #12]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	bfbb      	ittet	lt
 800b46e:	425b      	neglt	r3, r3
 800b470:	f042 0202 	orrlt.w	r2, r2, #2
 800b474:	9307      	strge	r3, [sp, #28]
 800b476:	9307      	strlt	r3, [sp, #28]
 800b478:	bfb8      	it	lt
 800b47a:	9204      	strlt	r2, [sp, #16]
 800b47c:	7823      	ldrb	r3, [r4, #0]
 800b47e:	2b2e      	cmp	r3, #46	; 0x2e
 800b480:	d10c      	bne.n	800b49c <_svfiprintf_r+0x130>
 800b482:	7863      	ldrb	r3, [r4, #1]
 800b484:	2b2a      	cmp	r3, #42	; 0x2a
 800b486:	d135      	bne.n	800b4f4 <_svfiprintf_r+0x188>
 800b488:	9b03      	ldr	r3, [sp, #12]
 800b48a:	3402      	adds	r4, #2
 800b48c:	1d1a      	adds	r2, r3, #4
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	9203      	str	r2, [sp, #12]
 800b492:	2b00      	cmp	r3, #0
 800b494:	bfb8      	it	lt
 800b496:	f04f 33ff 	movlt.w	r3, #4294967295
 800b49a:	9305      	str	r3, [sp, #20]
 800b49c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b55c <_svfiprintf_r+0x1f0>
 800b4a0:	2203      	movs	r2, #3
 800b4a2:	4650      	mov	r0, sl
 800b4a4:	7821      	ldrb	r1, [r4, #0]
 800b4a6:	f7ff f941 	bl	800a72c <memchr>
 800b4aa:	b140      	cbz	r0, 800b4be <_svfiprintf_r+0x152>
 800b4ac:	2340      	movs	r3, #64	; 0x40
 800b4ae:	eba0 000a 	sub.w	r0, r0, sl
 800b4b2:	fa03 f000 	lsl.w	r0, r3, r0
 800b4b6:	9b04      	ldr	r3, [sp, #16]
 800b4b8:	3401      	adds	r4, #1
 800b4ba:	4303      	orrs	r3, r0
 800b4bc:	9304      	str	r3, [sp, #16]
 800b4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c2:	2206      	movs	r2, #6
 800b4c4:	4826      	ldr	r0, [pc, #152]	; (800b560 <_svfiprintf_r+0x1f4>)
 800b4c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4ca:	f7ff f92f 	bl	800a72c <memchr>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d038      	beq.n	800b544 <_svfiprintf_r+0x1d8>
 800b4d2:	4b24      	ldr	r3, [pc, #144]	; (800b564 <_svfiprintf_r+0x1f8>)
 800b4d4:	bb1b      	cbnz	r3, 800b51e <_svfiprintf_r+0x1b2>
 800b4d6:	9b03      	ldr	r3, [sp, #12]
 800b4d8:	3307      	adds	r3, #7
 800b4da:	f023 0307 	bic.w	r3, r3, #7
 800b4de:	3308      	adds	r3, #8
 800b4e0:	9303      	str	r3, [sp, #12]
 800b4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e4:	4433      	add	r3, r6
 800b4e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4e8:	e767      	b.n	800b3ba <_svfiprintf_r+0x4e>
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	2001      	movs	r0, #1
 800b4ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4f2:	e7a5      	b.n	800b440 <_svfiprintf_r+0xd4>
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	f04f 0c0a 	mov.w	ip, #10
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	3401      	adds	r4, #1
 800b4fe:	9305      	str	r3, [sp, #20]
 800b500:	4620      	mov	r0, r4
 800b502:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b506:	3a30      	subs	r2, #48	; 0x30
 800b508:	2a09      	cmp	r2, #9
 800b50a:	d903      	bls.n	800b514 <_svfiprintf_r+0x1a8>
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d0c5      	beq.n	800b49c <_svfiprintf_r+0x130>
 800b510:	9105      	str	r1, [sp, #20]
 800b512:	e7c3      	b.n	800b49c <_svfiprintf_r+0x130>
 800b514:	4604      	mov	r4, r0
 800b516:	2301      	movs	r3, #1
 800b518:	fb0c 2101 	mla	r1, ip, r1, r2
 800b51c:	e7f0      	b.n	800b500 <_svfiprintf_r+0x194>
 800b51e:	ab03      	add	r3, sp, #12
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	462a      	mov	r2, r5
 800b524:	4638      	mov	r0, r7
 800b526:	4b10      	ldr	r3, [pc, #64]	; (800b568 <_svfiprintf_r+0x1fc>)
 800b528:	a904      	add	r1, sp, #16
 800b52a:	f7fb ff13 	bl	8007354 <_printf_float>
 800b52e:	1c42      	adds	r2, r0, #1
 800b530:	4606      	mov	r6, r0
 800b532:	d1d6      	bne.n	800b4e2 <_svfiprintf_r+0x176>
 800b534:	89ab      	ldrh	r3, [r5, #12]
 800b536:	065b      	lsls	r3, r3, #25
 800b538:	f53f af2c 	bmi.w	800b394 <_svfiprintf_r+0x28>
 800b53c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b53e:	b01d      	add	sp, #116	; 0x74
 800b540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b544:	ab03      	add	r3, sp, #12
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	462a      	mov	r2, r5
 800b54a:	4638      	mov	r0, r7
 800b54c:	4b06      	ldr	r3, [pc, #24]	; (800b568 <_svfiprintf_r+0x1fc>)
 800b54e:	a904      	add	r1, sp, #16
 800b550:	f7fc f99c 	bl	800788c <_printf_i>
 800b554:	e7eb      	b.n	800b52e <_svfiprintf_r+0x1c2>
 800b556:	bf00      	nop
 800b558:	0800c1a4 	.word	0x0800c1a4
 800b55c:	0800c1aa 	.word	0x0800c1aa
 800b560:	0800c1ae 	.word	0x0800c1ae
 800b564:	08007355 	.word	0x08007355
 800b568:	0800b2b5 	.word	0x0800b2b5

0800b56c <__sfputc_r>:
 800b56c:	6893      	ldr	r3, [r2, #8]
 800b56e:	b410      	push	{r4}
 800b570:	3b01      	subs	r3, #1
 800b572:	2b00      	cmp	r3, #0
 800b574:	6093      	str	r3, [r2, #8]
 800b576:	da07      	bge.n	800b588 <__sfputc_r+0x1c>
 800b578:	6994      	ldr	r4, [r2, #24]
 800b57a:	42a3      	cmp	r3, r4
 800b57c:	db01      	blt.n	800b582 <__sfputc_r+0x16>
 800b57e:	290a      	cmp	r1, #10
 800b580:	d102      	bne.n	800b588 <__sfputc_r+0x1c>
 800b582:	bc10      	pop	{r4}
 800b584:	f7fd bbf8 	b.w	8008d78 <__swbuf_r>
 800b588:	6813      	ldr	r3, [r2, #0]
 800b58a:	1c58      	adds	r0, r3, #1
 800b58c:	6010      	str	r0, [r2, #0]
 800b58e:	7019      	strb	r1, [r3, #0]
 800b590:	4608      	mov	r0, r1
 800b592:	bc10      	pop	{r4}
 800b594:	4770      	bx	lr

0800b596 <__sfputs_r>:
 800b596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b598:	4606      	mov	r6, r0
 800b59a:	460f      	mov	r7, r1
 800b59c:	4614      	mov	r4, r2
 800b59e:	18d5      	adds	r5, r2, r3
 800b5a0:	42ac      	cmp	r4, r5
 800b5a2:	d101      	bne.n	800b5a8 <__sfputs_r+0x12>
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	e007      	b.n	800b5b8 <__sfputs_r+0x22>
 800b5a8:	463a      	mov	r2, r7
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b0:	f7ff ffdc 	bl	800b56c <__sfputc_r>
 800b5b4:	1c43      	adds	r3, r0, #1
 800b5b6:	d1f3      	bne.n	800b5a0 <__sfputs_r+0xa>
 800b5b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5bc <_vfiprintf_r>:
 800b5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c0:	460d      	mov	r5, r1
 800b5c2:	4614      	mov	r4, r2
 800b5c4:	4698      	mov	r8, r3
 800b5c6:	4606      	mov	r6, r0
 800b5c8:	b09d      	sub	sp, #116	; 0x74
 800b5ca:	b118      	cbz	r0, 800b5d4 <_vfiprintf_r+0x18>
 800b5cc:	6983      	ldr	r3, [r0, #24]
 800b5ce:	b90b      	cbnz	r3, 800b5d4 <_vfiprintf_r+0x18>
 800b5d0:	f7fe fc22 	bl	8009e18 <__sinit>
 800b5d4:	4b89      	ldr	r3, [pc, #548]	; (800b7fc <_vfiprintf_r+0x240>)
 800b5d6:	429d      	cmp	r5, r3
 800b5d8:	d11b      	bne.n	800b612 <_vfiprintf_r+0x56>
 800b5da:	6875      	ldr	r5, [r6, #4]
 800b5dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5de:	07d9      	lsls	r1, r3, #31
 800b5e0:	d405      	bmi.n	800b5ee <_vfiprintf_r+0x32>
 800b5e2:	89ab      	ldrh	r3, [r5, #12]
 800b5e4:	059a      	lsls	r2, r3, #22
 800b5e6:	d402      	bmi.n	800b5ee <_vfiprintf_r+0x32>
 800b5e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5ea:	f7ff f81e 	bl	800a62a <__retarget_lock_acquire_recursive>
 800b5ee:	89ab      	ldrh	r3, [r5, #12]
 800b5f0:	071b      	lsls	r3, r3, #28
 800b5f2:	d501      	bpl.n	800b5f8 <_vfiprintf_r+0x3c>
 800b5f4:	692b      	ldr	r3, [r5, #16]
 800b5f6:	b9eb      	cbnz	r3, 800b634 <_vfiprintf_r+0x78>
 800b5f8:	4629      	mov	r1, r5
 800b5fa:	4630      	mov	r0, r6
 800b5fc:	f7fd fc0e 	bl	8008e1c <__swsetup_r>
 800b600:	b1c0      	cbz	r0, 800b634 <_vfiprintf_r+0x78>
 800b602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b604:	07dc      	lsls	r4, r3, #31
 800b606:	d50e      	bpl.n	800b626 <_vfiprintf_r+0x6a>
 800b608:	f04f 30ff 	mov.w	r0, #4294967295
 800b60c:	b01d      	add	sp, #116	; 0x74
 800b60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b612:	4b7b      	ldr	r3, [pc, #492]	; (800b800 <_vfiprintf_r+0x244>)
 800b614:	429d      	cmp	r5, r3
 800b616:	d101      	bne.n	800b61c <_vfiprintf_r+0x60>
 800b618:	68b5      	ldr	r5, [r6, #8]
 800b61a:	e7df      	b.n	800b5dc <_vfiprintf_r+0x20>
 800b61c:	4b79      	ldr	r3, [pc, #484]	; (800b804 <_vfiprintf_r+0x248>)
 800b61e:	429d      	cmp	r5, r3
 800b620:	bf08      	it	eq
 800b622:	68f5      	ldreq	r5, [r6, #12]
 800b624:	e7da      	b.n	800b5dc <_vfiprintf_r+0x20>
 800b626:	89ab      	ldrh	r3, [r5, #12]
 800b628:	0598      	lsls	r0, r3, #22
 800b62a:	d4ed      	bmi.n	800b608 <_vfiprintf_r+0x4c>
 800b62c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b62e:	f7fe fffd 	bl	800a62c <__retarget_lock_release_recursive>
 800b632:	e7e9      	b.n	800b608 <_vfiprintf_r+0x4c>
 800b634:	2300      	movs	r3, #0
 800b636:	9309      	str	r3, [sp, #36]	; 0x24
 800b638:	2320      	movs	r3, #32
 800b63a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b63e:	2330      	movs	r3, #48	; 0x30
 800b640:	f04f 0901 	mov.w	r9, #1
 800b644:	f8cd 800c 	str.w	r8, [sp, #12]
 800b648:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b808 <_vfiprintf_r+0x24c>
 800b64c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b650:	4623      	mov	r3, r4
 800b652:	469a      	mov	sl, r3
 800b654:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b658:	b10a      	cbz	r2, 800b65e <_vfiprintf_r+0xa2>
 800b65a:	2a25      	cmp	r2, #37	; 0x25
 800b65c:	d1f9      	bne.n	800b652 <_vfiprintf_r+0x96>
 800b65e:	ebba 0b04 	subs.w	fp, sl, r4
 800b662:	d00b      	beq.n	800b67c <_vfiprintf_r+0xc0>
 800b664:	465b      	mov	r3, fp
 800b666:	4622      	mov	r2, r4
 800b668:	4629      	mov	r1, r5
 800b66a:	4630      	mov	r0, r6
 800b66c:	f7ff ff93 	bl	800b596 <__sfputs_r>
 800b670:	3001      	adds	r0, #1
 800b672:	f000 80aa 	beq.w	800b7ca <_vfiprintf_r+0x20e>
 800b676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b678:	445a      	add	r2, fp
 800b67a:	9209      	str	r2, [sp, #36]	; 0x24
 800b67c:	f89a 3000 	ldrb.w	r3, [sl]
 800b680:	2b00      	cmp	r3, #0
 800b682:	f000 80a2 	beq.w	800b7ca <_vfiprintf_r+0x20e>
 800b686:	2300      	movs	r3, #0
 800b688:	f04f 32ff 	mov.w	r2, #4294967295
 800b68c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b690:	f10a 0a01 	add.w	sl, sl, #1
 800b694:	9304      	str	r3, [sp, #16]
 800b696:	9307      	str	r3, [sp, #28]
 800b698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b69c:	931a      	str	r3, [sp, #104]	; 0x68
 800b69e:	4654      	mov	r4, sl
 800b6a0:	2205      	movs	r2, #5
 800b6a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6a6:	4858      	ldr	r0, [pc, #352]	; (800b808 <_vfiprintf_r+0x24c>)
 800b6a8:	f7ff f840 	bl	800a72c <memchr>
 800b6ac:	9a04      	ldr	r2, [sp, #16]
 800b6ae:	b9d8      	cbnz	r0, 800b6e8 <_vfiprintf_r+0x12c>
 800b6b0:	06d1      	lsls	r1, r2, #27
 800b6b2:	bf44      	itt	mi
 800b6b4:	2320      	movmi	r3, #32
 800b6b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6ba:	0713      	lsls	r3, r2, #28
 800b6bc:	bf44      	itt	mi
 800b6be:	232b      	movmi	r3, #43	; 0x2b
 800b6c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b6c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b6ca:	d015      	beq.n	800b6f8 <_vfiprintf_r+0x13c>
 800b6cc:	4654      	mov	r4, sl
 800b6ce:	2000      	movs	r0, #0
 800b6d0:	f04f 0c0a 	mov.w	ip, #10
 800b6d4:	9a07      	ldr	r2, [sp, #28]
 800b6d6:	4621      	mov	r1, r4
 800b6d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6dc:	3b30      	subs	r3, #48	; 0x30
 800b6de:	2b09      	cmp	r3, #9
 800b6e0:	d94e      	bls.n	800b780 <_vfiprintf_r+0x1c4>
 800b6e2:	b1b0      	cbz	r0, 800b712 <_vfiprintf_r+0x156>
 800b6e4:	9207      	str	r2, [sp, #28]
 800b6e6:	e014      	b.n	800b712 <_vfiprintf_r+0x156>
 800b6e8:	eba0 0308 	sub.w	r3, r0, r8
 800b6ec:	fa09 f303 	lsl.w	r3, r9, r3
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	46a2      	mov	sl, r4
 800b6f4:	9304      	str	r3, [sp, #16]
 800b6f6:	e7d2      	b.n	800b69e <_vfiprintf_r+0xe2>
 800b6f8:	9b03      	ldr	r3, [sp, #12]
 800b6fa:	1d19      	adds	r1, r3, #4
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	9103      	str	r1, [sp, #12]
 800b700:	2b00      	cmp	r3, #0
 800b702:	bfbb      	ittet	lt
 800b704:	425b      	neglt	r3, r3
 800b706:	f042 0202 	orrlt.w	r2, r2, #2
 800b70a:	9307      	strge	r3, [sp, #28]
 800b70c:	9307      	strlt	r3, [sp, #28]
 800b70e:	bfb8      	it	lt
 800b710:	9204      	strlt	r2, [sp, #16]
 800b712:	7823      	ldrb	r3, [r4, #0]
 800b714:	2b2e      	cmp	r3, #46	; 0x2e
 800b716:	d10c      	bne.n	800b732 <_vfiprintf_r+0x176>
 800b718:	7863      	ldrb	r3, [r4, #1]
 800b71a:	2b2a      	cmp	r3, #42	; 0x2a
 800b71c:	d135      	bne.n	800b78a <_vfiprintf_r+0x1ce>
 800b71e:	9b03      	ldr	r3, [sp, #12]
 800b720:	3402      	adds	r4, #2
 800b722:	1d1a      	adds	r2, r3, #4
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	9203      	str	r2, [sp, #12]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	bfb8      	it	lt
 800b72c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b730:	9305      	str	r3, [sp, #20]
 800b732:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b80c <_vfiprintf_r+0x250>
 800b736:	2203      	movs	r2, #3
 800b738:	4650      	mov	r0, sl
 800b73a:	7821      	ldrb	r1, [r4, #0]
 800b73c:	f7fe fff6 	bl	800a72c <memchr>
 800b740:	b140      	cbz	r0, 800b754 <_vfiprintf_r+0x198>
 800b742:	2340      	movs	r3, #64	; 0x40
 800b744:	eba0 000a 	sub.w	r0, r0, sl
 800b748:	fa03 f000 	lsl.w	r0, r3, r0
 800b74c:	9b04      	ldr	r3, [sp, #16]
 800b74e:	3401      	adds	r4, #1
 800b750:	4303      	orrs	r3, r0
 800b752:	9304      	str	r3, [sp, #16]
 800b754:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b758:	2206      	movs	r2, #6
 800b75a:	482d      	ldr	r0, [pc, #180]	; (800b810 <_vfiprintf_r+0x254>)
 800b75c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b760:	f7fe ffe4 	bl	800a72c <memchr>
 800b764:	2800      	cmp	r0, #0
 800b766:	d03f      	beq.n	800b7e8 <_vfiprintf_r+0x22c>
 800b768:	4b2a      	ldr	r3, [pc, #168]	; (800b814 <_vfiprintf_r+0x258>)
 800b76a:	bb1b      	cbnz	r3, 800b7b4 <_vfiprintf_r+0x1f8>
 800b76c:	9b03      	ldr	r3, [sp, #12]
 800b76e:	3307      	adds	r3, #7
 800b770:	f023 0307 	bic.w	r3, r3, #7
 800b774:	3308      	adds	r3, #8
 800b776:	9303      	str	r3, [sp, #12]
 800b778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b77a:	443b      	add	r3, r7
 800b77c:	9309      	str	r3, [sp, #36]	; 0x24
 800b77e:	e767      	b.n	800b650 <_vfiprintf_r+0x94>
 800b780:	460c      	mov	r4, r1
 800b782:	2001      	movs	r0, #1
 800b784:	fb0c 3202 	mla	r2, ip, r2, r3
 800b788:	e7a5      	b.n	800b6d6 <_vfiprintf_r+0x11a>
 800b78a:	2300      	movs	r3, #0
 800b78c:	f04f 0c0a 	mov.w	ip, #10
 800b790:	4619      	mov	r1, r3
 800b792:	3401      	adds	r4, #1
 800b794:	9305      	str	r3, [sp, #20]
 800b796:	4620      	mov	r0, r4
 800b798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b79c:	3a30      	subs	r2, #48	; 0x30
 800b79e:	2a09      	cmp	r2, #9
 800b7a0:	d903      	bls.n	800b7aa <_vfiprintf_r+0x1ee>
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d0c5      	beq.n	800b732 <_vfiprintf_r+0x176>
 800b7a6:	9105      	str	r1, [sp, #20]
 800b7a8:	e7c3      	b.n	800b732 <_vfiprintf_r+0x176>
 800b7aa:	4604      	mov	r4, r0
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7b2:	e7f0      	b.n	800b796 <_vfiprintf_r+0x1da>
 800b7b4:	ab03      	add	r3, sp, #12
 800b7b6:	9300      	str	r3, [sp, #0]
 800b7b8:	462a      	mov	r2, r5
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	4b16      	ldr	r3, [pc, #88]	; (800b818 <_vfiprintf_r+0x25c>)
 800b7be:	a904      	add	r1, sp, #16
 800b7c0:	f7fb fdc8 	bl	8007354 <_printf_float>
 800b7c4:	4607      	mov	r7, r0
 800b7c6:	1c78      	adds	r0, r7, #1
 800b7c8:	d1d6      	bne.n	800b778 <_vfiprintf_r+0x1bc>
 800b7ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7cc:	07d9      	lsls	r1, r3, #31
 800b7ce:	d405      	bmi.n	800b7dc <_vfiprintf_r+0x220>
 800b7d0:	89ab      	ldrh	r3, [r5, #12]
 800b7d2:	059a      	lsls	r2, r3, #22
 800b7d4:	d402      	bmi.n	800b7dc <_vfiprintf_r+0x220>
 800b7d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7d8:	f7fe ff28 	bl	800a62c <__retarget_lock_release_recursive>
 800b7dc:	89ab      	ldrh	r3, [r5, #12]
 800b7de:	065b      	lsls	r3, r3, #25
 800b7e0:	f53f af12 	bmi.w	800b608 <_vfiprintf_r+0x4c>
 800b7e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7e6:	e711      	b.n	800b60c <_vfiprintf_r+0x50>
 800b7e8:	ab03      	add	r3, sp, #12
 800b7ea:	9300      	str	r3, [sp, #0]
 800b7ec:	462a      	mov	r2, r5
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	4b09      	ldr	r3, [pc, #36]	; (800b818 <_vfiprintf_r+0x25c>)
 800b7f2:	a904      	add	r1, sp, #16
 800b7f4:	f7fc f84a 	bl	800788c <_printf_i>
 800b7f8:	e7e4      	b.n	800b7c4 <_vfiprintf_r+0x208>
 800b7fa:	bf00      	nop
 800b7fc:	0800bf8c 	.word	0x0800bf8c
 800b800:	0800bfac 	.word	0x0800bfac
 800b804:	0800bf6c 	.word	0x0800bf6c
 800b808:	0800c1a4 	.word	0x0800c1a4
 800b80c:	0800c1aa 	.word	0x0800c1aa
 800b810:	0800c1ae 	.word	0x0800c1ae
 800b814:	08007355 	.word	0x08007355
 800b818:	0800b597 	.word	0x0800b597

0800b81c <nan>:
 800b81c:	2000      	movs	r0, #0
 800b81e:	4901      	ldr	r1, [pc, #4]	; (800b824 <nan+0x8>)
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	7ff80000 	.word	0x7ff80000

0800b828 <_sbrk_r>:
 800b828:	b538      	push	{r3, r4, r5, lr}
 800b82a:	2300      	movs	r3, #0
 800b82c:	4d05      	ldr	r5, [pc, #20]	; (800b844 <_sbrk_r+0x1c>)
 800b82e:	4604      	mov	r4, r0
 800b830:	4608      	mov	r0, r1
 800b832:	602b      	str	r3, [r5, #0]
 800b834:	f7f7 f860 	bl	80028f8 <_sbrk>
 800b838:	1c43      	adds	r3, r0, #1
 800b83a:	d102      	bne.n	800b842 <_sbrk_r+0x1a>
 800b83c:	682b      	ldr	r3, [r5, #0]
 800b83e:	b103      	cbz	r3, 800b842 <_sbrk_r+0x1a>
 800b840:	6023      	str	r3, [r4, #0]
 800b842:	bd38      	pop	{r3, r4, r5, pc}
 800b844:	200005c4 	.word	0x200005c4

0800b848 <__sread>:
 800b848:	b510      	push	{r4, lr}
 800b84a:	460c      	mov	r4, r1
 800b84c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b850:	f000 f93a 	bl	800bac8 <_read_r>
 800b854:	2800      	cmp	r0, #0
 800b856:	bfab      	itete	ge
 800b858:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b85a:	89a3      	ldrhlt	r3, [r4, #12]
 800b85c:	181b      	addge	r3, r3, r0
 800b85e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b862:	bfac      	ite	ge
 800b864:	6563      	strge	r3, [r4, #84]	; 0x54
 800b866:	81a3      	strhlt	r3, [r4, #12]
 800b868:	bd10      	pop	{r4, pc}

0800b86a <__swrite>:
 800b86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b86e:	461f      	mov	r7, r3
 800b870:	898b      	ldrh	r3, [r1, #12]
 800b872:	4605      	mov	r5, r0
 800b874:	05db      	lsls	r3, r3, #23
 800b876:	460c      	mov	r4, r1
 800b878:	4616      	mov	r6, r2
 800b87a:	d505      	bpl.n	800b888 <__swrite+0x1e>
 800b87c:	2302      	movs	r3, #2
 800b87e:	2200      	movs	r2, #0
 800b880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b884:	f000 f8b8 	bl	800b9f8 <_lseek_r>
 800b888:	89a3      	ldrh	r3, [r4, #12]
 800b88a:	4632      	mov	r2, r6
 800b88c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b890:	81a3      	strh	r3, [r4, #12]
 800b892:	4628      	mov	r0, r5
 800b894:	463b      	mov	r3, r7
 800b896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b89a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b89e:	f000 b837 	b.w	800b910 <_write_r>

0800b8a2 <__sseek>:
 800b8a2:	b510      	push	{r4, lr}
 800b8a4:	460c      	mov	r4, r1
 800b8a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8aa:	f000 f8a5 	bl	800b9f8 <_lseek_r>
 800b8ae:	1c43      	adds	r3, r0, #1
 800b8b0:	89a3      	ldrh	r3, [r4, #12]
 800b8b2:	bf15      	itete	ne
 800b8b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b8b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b8ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b8be:	81a3      	strheq	r3, [r4, #12]
 800b8c0:	bf18      	it	ne
 800b8c2:	81a3      	strhne	r3, [r4, #12]
 800b8c4:	bd10      	pop	{r4, pc}

0800b8c6 <__sclose>:
 800b8c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ca:	f000 b851 	b.w	800b970 <_close_r>

0800b8ce <strncmp>:
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	b510      	push	{r4, lr}
 800b8d2:	b172      	cbz	r2, 800b8f2 <strncmp+0x24>
 800b8d4:	3901      	subs	r1, #1
 800b8d6:	1884      	adds	r4, r0, r2
 800b8d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b8dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b8e0:	4290      	cmp	r0, r2
 800b8e2:	d101      	bne.n	800b8e8 <strncmp+0x1a>
 800b8e4:	42a3      	cmp	r3, r4
 800b8e6:	d101      	bne.n	800b8ec <strncmp+0x1e>
 800b8e8:	1a80      	subs	r0, r0, r2
 800b8ea:	bd10      	pop	{r4, pc}
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	d1f3      	bne.n	800b8d8 <strncmp+0xa>
 800b8f0:	e7fa      	b.n	800b8e8 <strncmp+0x1a>
 800b8f2:	4610      	mov	r0, r2
 800b8f4:	e7f9      	b.n	800b8ea <strncmp+0x1c>

0800b8f6 <__ascii_wctomb>:
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	4608      	mov	r0, r1
 800b8fa:	b141      	cbz	r1, 800b90e <__ascii_wctomb+0x18>
 800b8fc:	2aff      	cmp	r2, #255	; 0xff
 800b8fe:	d904      	bls.n	800b90a <__ascii_wctomb+0x14>
 800b900:	228a      	movs	r2, #138	; 0x8a
 800b902:	f04f 30ff 	mov.w	r0, #4294967295
 800b906:	601a      	str	r2, [r3, #0]
 800b908:	4770      	bx	lr
 800b90a:	2001      	movs	r0, #1
 800b90c:	700a      	strb	r2, [r1, #0]
 800b90e:	4770      	bx	lr

0800b910 <_write_r>:
 800b910:	b538      	push	{r3, r4, r5, lr}
 800b912:	4604      	mov	r4, r0
 800b914:	4608      	mov	r0, r1
 800b916:	4611      	mov	r1, r2
 800b918:	2200      	movs	r2, #0
 800b91a:	4d05      	ldr	r5, [pc, #20]	; (800b930 <_write_r+0x20>)
 800b91c:	602a      	str	r2, [r5, #0]
 800b91e:	461a      	mov	r2, r3
 800b920:	f7f6 ff9e 	bl	8002860 <_write>
 800b924:	1c43      	adds	r3, r0, #1
 800b926:	d102      	bne.n	800b92e <_write_r+0x1e>
 800b928:	682b      	ldr	r3, [r5, #0]
 800b92a:	b103      	cbz	r3, 800b92e <_write_r+0x1e>
 800b92c:	6023      	str	r3, [r4, #0]
 800b92e:	bd38      	pop	{r3, r4, r5, pc}
 800b930:	200005c4 	.word	0x200005c4

0800b934 <__assert_func>:
 800b934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b936:	4614      	mov	r4, r2
 800b938:	461a      	mov	r2, r3
 800b93a:	4b09      	ldr	r3, [pc, #36]	; (800b960 <__assert_func+0x2c>)
 800b93c:	4605      	mov	r5, r0
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68d8      	ldr	r0, [r3, #12]
 800b942:	b14c      	cbz	r4, 800b958 <__assert_func+0x24>
 800b944:	4b07      	ldr	r3, [pc, #28]	; (800b964 <__assert_func+0x30>)
 800b946:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b94a:	9100      	str	r1, [sp, #0]
 800b94c:	462b      	mov	r3, r5
 800b94e:	4906      	ldr	r1, [pc, #24]	; (800b968 <__assert_func+0x34>)
 800b950:	f000 f81e 	bl	800b990 <fiprintf>
 800b954:	f000 f8ca 	bl	800baec <abort>
 800b958:	4b04      	ldr	r3, [pc, #16]	; (800b96c <__assert_func+0x38>)
 800b95a:	461c      	mov	r4, r3
 800b95c:	e7f3      	b.n	800b946 <__assert_func+0x12>
 800b95e:	bf00      	nop
 800b960:	2000018c 	.word	0x2000018c
 800b964:	0800c1b5 	.word	0x0800c1b5
 800b968:	0800c1c2 	.word	0x0800c1c2
 800b96c:	0800c1f0 	.word	0x0800c1f0

0800b970 <_close_r>:
 800b970:	b538      	push	{r3, r4, r5, lr}
 800b972:	2300      	movs	r3, #0
 800b974:	4d05      	ldr	r5, [pc, #20]	; (800b98c <_close_r+0x1c>)
 800b976:	4604      	mov	r4, r0
 800b978:	4608      	mov	r0, r1
 800b97a:	602b      	str	r3, [r5, #0]
 800b97c:	f7f6 ff8c 	bl	8002898 <_close>
 800b980:	1c43      	adds	r3, r0, #1
 800b982:	d102      	bne.n	800b98a <_close_r+0x1a>
 800b984:	682b      	ldr	r3, [r5, #0]
 800b986:	b103      	cbz	r3, 800b98a <_close_r+0x1a>
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	bd38      	pop	{r3, r4, r5, pc}
 800b98c:	200005c4 	.word	0x200005c4

0800b990 <fiprintf>:
 800b990:	b40e      	push	{r1, r2, r3}
 800b992:	b503      	push	{r0, r1, lr}
 800b994:	4601      	mov	r1, r0
 800b996:	ab03      	add	r3, sp, #12
 800b998:	4805      	ldr	r0, [pc, #20]	; (800b9b0 <fiprintf+0x20>)
 800b99a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b99e:	6800      	ldr	r0, [r0, #0]
 800b9a0:	9301      	str	r3, [sp, #4]
 800b9a2:	f7ff fe0b 	bl	800b5bc <_vfiprintf_r>
 800b9a6:	b002      	add	sp, #8
 800b9a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9ac:	b003      	add	sp, #12
 800b9ae:	4770      	bx	lr
 800b9b0:	2000018c 	.word	0x2000018c

0800b9b4 <_fstat_r>:
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	4d06      	ldr	r5, [pc, #24]	; (800b9d4 <_fstat_r+0x20>)
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	4608      	mov	r0, r1
 800b9be:	4611      	mov	r1, r2
 800b9c0:	602b      	str	r3, [r5, #0]
 800b9c2:	f7f6 ff74 	bl	80028ae <_fstat>
 800b9c6:	1c43      	adds	r3, r0, #1
 800b9c8:	d102      	bne.n	800b9d0 <_fstat_r+0x1c>
 800b9ca:	682b      	ldr	r3, [r5, #0]
 800b9cc:	b103      	cbz	r3, 800b9d0 <_fstat_r+0x1c>
 800b9ce:	6023      	str	r3, [r4, #0]
 800b9d0:	bd38      	pop	{r3, r4, r5, pc}
 800b9d2:	bf00      	nop
 800b9d4:	200005c4 	.word	0x200005c4

0800b9d8 <_isatty_r>:
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	2300      	movs	r3, #0
 800b9dc:	4d05      	ldr	r5, [pc, #20]	; (800b9f4 <_isatty_r+0x1c>)
 800b9de:	4604      	mov	r4, r0
 800b9e0:	4608      	mov	r0, r1
 800b9e2:	602b      	str	r3, [r5, #0]
 800b9e4:	f7f6 ff72 	bl	80028cc <_isatty>
 800b9e8:	1c43      	adds	r3, r0, #1
 800b9ea:	d102      	bne.n	800b9f2 <_isatty_r+0x1a>
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	b103      	cbz	r3, 800b9f2 <_isatty_r+0x1a>
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
 800b9f4:	200005c4 	.word	0x200005c4

0800b9f8 <_lseek_r>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	4608      	mov	r0, r1
 800b9fe:	4611      	mov	r1, r2
 800ba00:	2200      	movs	r2, #0
 800ba02:	4d05      	ldr	r5, [pc, #20]	; (800ba18 <_lseek_r+0x20>)
 800ba04:	602a      	str	r2, [r5, #0]
 800ba06:	461a      	mov	r2, r3
 800ba08:	f7f6 ff6a 	bl	80028e0 <_lseek>
 800ba0c:	1c43      	adds	r3, r0, #1
 800ba0e:	d102      	bne.n	800ba16 <_lseek_r+0x1e>
 800ba10:	682b      	ldr	r3, [r5, #0]
 800ba12:	b103      	cbz	r3, 800ba16 <_lseek_r+0x1e>
 800ba14:	6023      	str	r3, [r4, #0]
 800ba16:	bd38      	pop	{r3, r4, r5, pc}
 800ba18:	200005c4 	.word	0x200005c4

0800ba1c <memmove>:
 800ba1c:	4288      	cmp	r0, r1
 800ba1e:	b510      	push	{r4, lr}
 800ba20:	eb01 0402 	add.w	r4, r1, r2
 800ba24:	d902      	bls.n	800ba2c <memmove+0x10>
 800ba26:	4284      	cmp	r4, r0
 800ba28:	4623      	mov	r3, r4
 800ba2a:	d807      	bhi.n	800ba3c <memmove+0x20>
 800ba2c:	1e43      	subs	r3, r0, #1
 800ba2e:	42a1      	cmp	r1, r4
 800ba30:	d008      	beq.n	800ba44 <memmove+0x28>
 800ba32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba3a:	e7f8      	b.n	800ba2e <memmove+0x12>
 800ba3c:	4601      	mov	r1, r0
 800ba3e:	4402      	add	r2, r0
 800ba40:	428a      	cmp	r2, r1
 800ba42:	d100      	bne.n	800ba46 <memmove+0x2a>
 800ba44:	bd10      	pop	{r4, pc}
 800ba46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba4e:	e7f7      	b.n	800ba40 <memmove+0x24>

0800ba50 <__malloc_lock>:
 800ba50:	4801      	ldr	r0, [pc, #4]	; (800ba58 <__malloc_lock+0x8>)
 800ba52:	f7fe bdea 	b.w	800a62a <__retarget_lock_acquire_recursive>
 800ba56:	bf00      	nop
 800ba58:	200005b8 	.word	0x200005b8

0800ba5c <__malloc_unlock>:
 800ba5c:	4801      	ldr	r0, [pc, #4]	; (800ba64 <__malloc_unlock+0x8>)
 800ba5e:	f7fe bde5 	b.w	800a62c <__retarget_lock_release_recursive>
 800ba62:	bf00      	nop
 800ba64:	200005b8 	.word	0x200005b8

0800ba68 <_realloc_r>:
 800ba68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba6c:	4680      	mov	r8, r0
 800ba6e:	4614      	mov	r4, r2
 800ba70:	460e      	mov	r6, r1
 800ba72:	b921      	cbnz	r1, 800ba7e <_realloc_r+0x16>
 800ba74:	4611      	mov	r1, r2
 800ba76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba7a:	f7ff bba7 	b.w	800b1cc <_malloc_r>
 800ba7e:	b92a      	cbnz	r2, 800ba8c <_realloc_r+0x24>
 800ba80:	f7ff fb3c 	bl	800b0fc <_free_r>
 800ba84:	4625      	mov	r5, r4
 800ba86:	4628      	mov	r0, r5
 800ba88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba8c:	f000 f835 	bl	800bafa <_malloc_usable_size_r>
 800ba90:	4284      	cmp	r4, r0
 800ba92:	4607      	mov	r7, r0
 800ba94:	d802      	bhi.n	800ba9c <_realloc_r+0x34>
 800ba96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba9a:	d812      	bhi.n	800bac2 <_realloc_r+0x5a>
 800ba9c:	4621      	mov	r1, r4
 800ba9e:	4640      	mov	r0, r8
 800baa0:	f7ff fb94 	bl	800b1cc <_malloc_r>
 800baa4:	4605      	mov	r5, r0
 800baa6:	2800      	cmp	r0, #0
 800baa8:	d0ed      	beq.n	800ba86 <_realloc_r+0x1e>
 800baaa:	42bc      	cmp	r4, r7
 800baac:	4622      	mov	r2, r4
 800baae:	4631      	mov	r1, r6
 800bab0:	bf28      	it	cs
 800bab2:	463a      	movcs	r2, r7
 800bab4:	f7fe fe48 	bl	800a748 <memcpy>
 800bab8:	4631      	mov	r1, r6
 800baba:	4640      	mov	r0, r8
 800babc:	f7ff fb1e 	bl	800b0fc <_free_r>
 800bac0:	e7e1      	b.n	800ba86 <_realloc_r+0x1e>
 800bac2:	4635      	mov	r5, r6
 800bac4:	e7df      	b.n	800ba86 <_realloc_r+0x1e>
	...

0800bac8 <_read_r>:
 800bac8:	b538      	push	{r3, r4, r5, lr}
 800baca:	4604      	mov	r4, r0
 800bacc:	4608      	mov	r0, r1
 800bace:	4611      	mov	r1, r2
 800bad0:	2200      	movs	r2, #0
 800bad2:	4d05      	ldr	r5, [pc, #20]	; (800bae8 <_read_r+0x20>)
 800bad4:	602a      	str	r2, [r5, #0]
 800bad6:	461a      	mov	r2, r3
 800bad8:	f7f6 fea5 	bl	8002826 <_read>
 800badc:	1c43      	adds	r3, r0, #1
 800bade:	d102      	bne.n	800bae6 <_read_r+0x1e>
 800bae0:	682b      	ldr	r3, [r5, #0]
 800bae2:	b103      	cbz	r3, 800bae6 <_read_r+0x1e>
 800bae4:	6023      	str	r3, [r4, #0]
 800bae6:	bd38      	pop	{r3, r4, r5, pc}
 800bae8:	200005c4 	.word	0x200005c4

0800baec <abort>:
 800baec:	2006      	movs	r0, #6
 800baee:	b508      	push	{r3, lr}
 800baf0:	f000 f834 	bl	800bb5c <raise>
 800baf4:	2001      	movs	r0, #1
 800baf6:	f7f6 fe8c 	bl	8002812 <_exit>

0800bafa <_malloc_usable_size_r>:
 800bafa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bafe:	1f18      	subs	r0, r3, #4
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	bfbc      	itt	lt
 800bb04:	580b      	ldrlt	r3, [r1, r0]
 800bb06:	18c0      	addlt	r0, r0, r3
 800bb08:	4770      	bx	lr

0800bb0a <_raise_r>:
 800bb0a:	291f      	cmp	r1, #31
 800bb0c:	b538      	push	{r3, r4, r5, lr}
 800bb0e:	4604      	mov	r4, r0
 800bb10:	460d      	mov	r5, r1
 800bb12:	d904      	bls.n	800bb1e <_raise_r+0x14>
 800bb14:	2316      	movs	r3, #22
 800bb16:	6003      	str	r3, [r0, #0]
 800bb18:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1c:	bd38      	pop	{r3, r4, r5, pc}
 800bb1e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb20:	b112      	cbz	r2, 800bb28 <_raise_r+0x1e>
 800bb22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb26:	b94b      	cbnz	r3, 800bb3c <_raise_r+0x32>
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f000 f831 	bl	800bb90 <_getpid_r>
 800bb2e:	462a      	mov	r2, r5
 800bb30:	4601      	mov	r1, r0
 800bb32:	4620      	mov	r0, r4
 800bb34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb38:	f000 b818 	b.w	800bb6c <_kill_r>
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d00a      	beq.n	800bb56 <_raise_r+0x4c>
 800bb40:	1c59      	adds	r1, r3, #1
 800bb42:	d103      	bne.n	800bb4c <_raise_r+0x42>
 800bb44:	2316      	movs	r3, #22
 800bb46:	6003      	str	r3, [r0, #0]
 800bb48:	2001      	movs	r0, #1
 800bb4a:	e7e7      	b.n	800bb1c <_raise_r+0x12>
 800bb4c:	2400      	movs	r4, #0
 800bb4e:	4628      	mov	r0, r5
 800bb50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb54:	4798      	blx	r3
 800bb56:	2000      	movs	r0, #0
 800bb58:	e7e0      	b.n	800bb1c <_raise_r+0x12>
	...

0800bb5c <raise>:
 800bb5c:	4b02      	ldr	r3, [pc, #8]	; (800bb68 <raise+0xc>)
 800bb5e:	4601      	mov	r1, r0
 800bb60:	6818      	ldr	r0, [r3, #0]
 800bb62:	f7ff bfd2 	b.w	800bb0a <_raise_r>
 800bb66:	bf00      	nop
 800bb68:	2000018c 	.word	0x2000018c

0800bb6c <_kill_r>:
 800bb6c:	b538      	push	{r3, r4, r5, lr}
 800bb6e:	2300      	movs	r3, #0
 800bb70:	4d06      	ldr	r5, [pc, #24]	; (800bb8c <_kill_r+0x20>)
 800bb72:	4604      	mov	r4, r0
 800bb74:	4608      	mov	r0, r1
 800bb76:	4611      	mov	r1, r2
 800bb78:	602b      	str	r3, [r5, #0]
 800bb7a:	f7f6 fe3a 	bl	80027f2 <_kill>
 800bb7e:	1c43      	adds	r3, r0, #1
 800bb80:	d102      	bne.n	800bb88 <_kill_r+0x1c>
 800bb82:	682b      	ldr	r3, [r5, #0]
 800bb84:	b103      	cbz	r3, 800bb88 <_kill_r+0x1c>
 800bb86:	6023      	str	r3, [r4, #0]
 800bb88:	bd38      	pop	{r3, r4, r5, pc}
 800bb8a:	bf00      	nop
 800bb8c:	200005c4 	.word	0x200005c4

0800bb90 <_getpid_r>:
 800bb90:	f7f6 be28 	b.w	80027e4 <_getpid>

0800bb94 <_init>:
 800bb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb96:	bf00      	nop
 800bb98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb9a:	bc08      	pop	{r3}
 800bb9c:	469e      	mov	lr, r3
 800bb9e:	4770      	bx	lr

0800bba0 <_fini>:
 800bba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba2:	bf00      	nop
 800bba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bba6:	bc08      	pop	{r3}
 800bba8:	469e      	mov	lr, r3
 800bbaa:	4770      	bx	lr
